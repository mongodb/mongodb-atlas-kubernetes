// Code generated by crd2go. DO NOT EDIT.

package v1

import (
	k8s "github.com/mongodb/mongodb-atlas-kubernetes/tools/crd2go/k8s"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

func init() {
	SchemeBuilder.Register(&GroupAlertsConfig{})
	SchemeBuilder.Register(&GroupAlertsConfigList{})
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

type GroupAlertsConfig struct {
	metav1.TypeMeta `json:",inline"`

	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec GroupAlertsConfigSpec `json:"spec,omitempty"`

	Status GroupAlertsConfigStatus `json:"status,omitempty"`
}

type GroupAlertsConfigSpec struct {
	// V20250312 The spec of the groupalertsconfig resource for version v20250312.
	V20250312 *GroupAlertsConfigSpecV20250312 `json:"v20250312,omitempty"`
}

type GroupAlertsConfigSpecV20250312 struct {
	// Entry The entry fields of the groupalertsconfig resource spec. These fields can
	// be set for creating and updating groupalertsconfigs.
	Entry *GroupAlertsConfigSpecV20250312Entry `json:"entry,omitempty"`

	/*
	   GroupId Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

	   **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.
	*/
	GroupId *string `json:"groupId,omitempty"`

	/*
	   GroupRef A reference to a "Group" resource.
	   The value of "$.status.v20250312.id" will be used to set "groupId".
	   Mutually exclusive with the "groupId" property.
	*/
	GroupRef *k8s.LocalReference `json:"groupRef,omitempty"`
}

type GroupAlertsConfigSpecV20250312Entry struct {
	// Enabled Flag that indicates whether someone enabled this alert configuration for
	// the specified project.
	Enabled *bool `json:"enabled,omitempty"`

	// EventTypeName Event type that triggers an alert.
	EventTypeName *string `json:"eventTypeName,omitempty"`

	// Matchers List of rules that determine whether MongoDB Cloud checks an object for
	// the alert configuration.
	Matchers *[]Matchers `json:"matchers,omitempty"`

	// MetricThreshold Threshold for the metric that, when exceeded, triggers an alert.
	// The metric threshold pertains to event types which reflects changes of
	// measurements and metrics about the serverless database.
	MetricThreshold *MetricThreshold `json:"metricThreshold,omitempty"`

	// Notifications List that contains the targets that MongoDB Cloud sends
	// notifications.
	Notifications *[]Notifications `json:"notifications,omitempty"`

	// SeverityOverride Severity of the event.
	SeverityOverride *string `json:"severityOverride,omitempty"`

	// Threshold Threshold for the metric that, when exceeded, triggers an alert. The
	// metric threshold pertains to event types which reflects changes of measurements
	// and metrics in stream processors.
	Threshold *MetricThreshold `json:"threshold,omitempty"`
}

type Matchers struct {
	// FieldName Name of the parameter in the target object that MongoDB Cloud checks.
	// The parameter must match all rules for MongoDB Cloud to check for alert
	// configurations.
	FieldName string `json:"fieldName"`

	// Operator Comparison operator to apply when checking the current metric value
	// against **matcher[n].value**.
	Operator string `json:"operator"`

	// Value Value to match or exceed using the specified **matchers.operator**.
	Value string `json:"value"`
}

type MetricThreshold struct {
	// MetricName Human-readable label that identifies the metric against which MongoDB
	// Cloud checks the configured **metricThreshold.threshold**.
	MetricName string `json:"metricName"`

	// Mode MongoDB Cloud computes the current metric value as an average.
	Mode *string `json:"mode,omitempty"`

	// Operator Comparison operator to apply when checking the current metric value.
	Operator *string `json:"operator,omitempty"`

	// Threshold Value of metric that, when exceeded, triggers an alert.
	Threshold *float64 `json:"threshold,omitempty"`

	// Units Element used to express the quantity. This can be an element of time,
	// storage capacity, and the like.
	Units *string `json:"units,omitempty"`
}

type Notifications struct {
	/*
	   ApiTokenSecretRef SENSITIVE FIELD

	   Reference to a secret containing data for the "apiToken" field:

	   Slack API token or Bot token that MongoDB Cloud needs to send alert notifications via Slack. The resource requires this parameter when `"notifications.[n].typeName" : "SLACK"`. If the token later becomes invalid, MongoDB Cloud sends an email to the project owners. If the token remains invalid, MongoDB Cloud removes the token.

	   **NOTE**: After you create a notification which requires an API or integration key, the key appears partially redacted when you:

	   * View or edit the alert through the Atlas UI.

	   * Query the alert for the notification through the Atlas Administration API.
	*/
	ApiTokenSecretRef *ApiTokenSecretRef `json:"apiTokenSecretRef,omitempty"`

	// ChannelName Name of the Slack channel to which MongoDB Cloud sends alert
	// notifications. The resource requires this parameter when
	// `"notifications.[n].typeName" : "SLACK"`.
	ChannelName *string `json:"channelName,omitempty"`

	/*
	   DatadogApiKeySecretRef SENSITIVE FIELD

	   Reference to a secret containing data for the "datadogApiKey" field:

	   Datadog API Key that MongoDB Cloud needs to send alert notifications to Datadog. You can find this API key in the Datadog dashboard. The resource requires this parameter when `"notifications.[n].typeName" : "DATADOG"`.

	   **NOTE**: After you create a notification which requires an API or integration key, the key appears partially redacted when you:

	   * View or edit the alert through the Atlas UI.

	   * Query the alert for the notification through the Atlas Administration API.
	*/
	DatadogApiKeySecretRef *ApiTokenSecretRef `json:"datadogApiKeySecretRef,omitempty"`

	// DatadogRegion Datadog region that indicates which API Uniform Resource Locator
	// (URL) to use. The resource requires this parameter when
	// `"notifications.[n].typeName" : "DATADOG"`.
	DatadogRegion *string `json:"datadogRegion,omitempty"`

	// DelayMin Number of minutes that MongoDB Cloud waits after detecting an alert
	// condition before it sends out the first notification.
	DelayMin *int `json:"delayMin,omitempty"`

	/*
	   EmailAddress Email address to which MongoDB Cloud sends alert notifications. The resource requires this parameter when `"notifications.[n].typeName" : "EMAIL"`. You don't need to set this value to send emails to individual or groups of MongoDB Cloud users including:

	   - specific MongoDB Cloud users (`"notifications.[n].typeName" : "USER"`)
	   - MongoDB Cloud users with specific project roles (`"notifications.[n].typeName" : "GROUP"`)
	   - MongoDB Cloud users with specific organization roles (`"notifications.[n].typeName" : "ORG"`)
	   - MongoDB Cloud teams (`"notifications.[n].typeName" : "TEAM"`)

	   To send emails to one MongoDB Cloud user or grouping of users, set the `notifications.[n].emailEnabled` parameter.
	*/
	EmailAddress *string `json:"emailAddress,omitempty"`

	/*
	   EmailEnabled Flag that indicates whether MongoDB Cloud should send email notifications. The resource requires this parameter when one of the following values have been set:

	   - `"notifications.[n].typeName" : "ORG"`
	   - `"notifications.[n].typeName" : "GROUP"`
	   - `"notifications.[n].typeName" : "USER"`
	*/
	EmailEnabled *bool `json:"emailEnabled,omitempty"`

	// IntegrationId The id of the associated integration, the credentials of which to
	// use for requests.
	IntegrationId *string `json:"integrationId,omitempty"`

	/*
	   IntervalMin Number of minutes to wait between successive notifications. MongoDB Cloud sends notifications until someone acknowledges the unacknowledged alert.

	   PagerDuty, VictorOps, and OpsGenie notifications don't return this element. Configure and manage the notification interval within each of those services.
	*/
	IntervalMin *int `json:"intervalMin,omitempty"`

	/*
	   MicrosoftTeamsWebhookUrlSecretRef SENSITIVE FIELD

	   Reference to a secret containing data for the "microsoftTeamsWebhookUrl" field:

	   Microsoft Teams Webhook Uniform Resource Locator (URL) that MongoDB Cloud needs to send this notification via Microsoft Teams. The resource requires this parameter when `"notifications.[n].typeName" : "MICROSOFT_TEAMS"`. If the URL later becomes invalid, MongoDB Cloud sends an email to the project owners. If the key remains invalid, MongoDB Cloud removes it.

	   **NOTE**: When you view or edit the alert for a Microsoft Teams notification, the URL appears partially redacted.
	*/
	MicrosoftTeamsWebhookUrlSecretRef *ApiTokenSecretRef `json:"microsoftTeamsWebhookUrlSecretRef,omitempty"`

	// MobileNumber Mobile phone number to which MongoDB Cloud sends alert
	// notifications. The resource requires this parameter when
	// `"notifications.[n].typeName" : "SMS"`.
	MobileNumber *string `json:"mobileNumber,omitempty"`

	/*
	   NotificationTokenSecretRef SENSITIVE FIELD

	   Reference to a secret containing data for the "notificationToken" field:

	   HipChat API token that MongoDB Cloud needs to send alert notifications to HipChat. The resource requires this parameter when `"notifications.[n].typeName" : "HIP_CHAT"`". If the token later becomes invalid, MongoDB Cloud sends an email to the project owners. If the token remains invalid, MongoDB Cloud removes it.

	   **NOTE**: After you create a notification which requires an API or integration key, the key appears partially redacted when you:

	   * View or edit the alert through the Atlas UI.

	   * Query the alert for the notification through the Atlas Administration API.
	*/
	NotificationTokenSecretRef *ApiTokenSecretRef `json:"notificationTokenSecretRef,omitempty"`

	// NotifierId The notifierId is a system-generated unique identifier assigned to
	// each notification method. This is needed when updating third-party notifications
	// without requiring explicit authentication credentials.
	NotifierId *string `json:"notifierId,omitempty"`

	/*
	   OpsGenieApiKeySecretRef SENSITIVE FIELD

	   Reference to a secret containing data for the "opsGenieApiKey" field:

	   API Key that MongoDB Cloud needs to send this notification via Opsgenie. The resource requires this parameter when `"notifications.[n].typeName" : "OPS_GENIE"`. If the key later becomes invalid, MongoDB Cloud sends an email to the project owners. If the key remains invalid, MongoDB Cloud removes it.

	   **NOTE**: After you create a notification which requires an API or integration key, the key appears partially redacted when you:

	   * View or edit the alert through the Atlas UI.

	   * Query the alert for the notification through the Atlas Administration API.
	*/
	OpsGenieApiKeySecretRef *ApiTokenSecretRef `json:"opsGenieApiKeySecretRef,omitempty"`

	// OpsGenieRegion Opsgenie region that indicates which API Uniform Resource Locator
	// (URL) to use.
	OpsGenieRegion *string `json:"opsGenieRegion,omitempty"`

	// Region PagerDuty region that indicates which API Uniform Resource Locator (URL)
	// to use.
	Region *string `json:"region,omitempty"`

	// Roles List that contains the one or more organization roles that receive the
	// configured alert. This parameter is available when `"notifications.[n].typeName"
	// : "GROUP"` or `"notifications.[n].typeName" : "ORG"`. If you include this
	// parameter, MongoDB Cloud sends alerts only to users assigned the roles you
	// specify in the array. If you omit this parameter, MongoDB Cloud sends alerts to
	// users assigned any role.
	Roles *[]string `json:"roles,omitempty"`

	// RoomName HipChat API room name to which MongoDB Cloud sends alert notifications.
	// The resource requires this parameter when `"notifications.[n].typeName" :
	// "HIP_CHAT"`".
	RoomName *string `json:"roomName,omitempty"`

	/*
	   ServiceKeySecretRef SENSITIVE FIELD

	   Reference to a secret containing data for the "serviceKey" field:

	   PagerDuty service key that MongoDB Cloud needs to send notifications via PagerDuty. The resource requires this parameter when `"notifications.[n].typeName" : "PAGER_DUTY"`. If the key later becomes invalid, MongoDB Cloud sends an email to the project owners. If the key remains invalid, MongoDB Cloud removes it.

	   **NOTE**: After you create a notification which requires an API or integration key, the key appears partially redacted when you:

	   * View or edit the alert through the Atlas UI.

	   * Query the alert for the notification through the Atlas Administration API.
	*/
	ServiceKeySecretRef *ApiTokenSecretRef `json:"serviceKeySecretRef,omitempty"`

	/*
	   SmsEnabled Flag that indicates whether MongoDB Cloud should send text message notifications. The resource requires this parameter when one of the following values have been set:

	   - `"notifications.[n].typeName" : "ORG"`
	   - `"notifications.[n].typeName" : "GROUP"`
	   - `"notifications.[n].typeName" : "USER"`
	*/
	SmsEnabled *bool `json:"smsEnabled,omitempty"`

	// TeamId Unique 24-hexadecimal digit string that identifies one MongoDB Cloud
	// team. The resource requires this parameter when `"notifications.[n].typeName" :
	// "TEAM"`.
	TeamId *string `json:"teamId,omitempty"`

	// TeamName Name of the MongoDB Cloud team that receives this notification. The
	// resource requires this parameter when `"notifications.[n].typeName" : "TEAM"`.
	TeamName *string `json:"teamName,omitempty"`

	// TypeName Human-readable label that displays the alert notification type.
	TypeName *string `json:"typeName,omitempty"`

	// Username MongoDB Cloud username of the person to whom MongoDB Cloud sends
	// notifications. Specify only MongoDB Cloud users who belong to the project that
	// owns the alert configuration. The resource requires this parameter when
	// `"notifications.[n].typeName" : "USER"`.
	Username *string `json:"username,omitempty"`

	/*
	   VictorOpsApiKeySecretRef SENSITIVE FIELD

	   Reference to a secret containing data for the "victorOpsApiKey" field:

	   API key that MongoDB Cloud needs to send alert notifications to Splunk On-Call. The resource requires this parameter when `"notifications.[n].typeName" : "VICTOR_OPS"`. If the key later becomes invalid, MongoDB Cloud sends an email to the project owners. If the key remains invalid, MongoDB Cloud removes it.

	   **NOTE**: After you create a notification which requires an API or integration key, the key appears partially redacted when you:

	   * View or edit the alert through the Atlas UI.

	   * Query the alert for the notification through the Atlas Administration API.
	*/
	VictorOpsApiKeySecretRef *ApiTokenSecretRef `json:"victorOpsApiKeySecretRef,omitempty"`

	/*
	   VictorOpsRoutingKeySecretRef SENSITIVE FIELD

	   Reference to a secret containing data for the "victorOpsRoutingKey" field:

	   Routing key that MongoDB Cloud needs to send alert notifications to Splunk On-Call. The resource requires this parameter when `"notifications.[n].typeName" : "VICTOR_OPS"`. If the key later becomes invalid, MongoDB Cloud sends an email to the project owners. If the key remains invalid, MongoDB Cloud removes it.
	*/
	VictorOpsRoutingKeySecretRef *ApiTokenSecretRef `json:"victorOpsRoutingKeySecretRef,omitempty"`

	/*
	   WebhookSecretSecretRef SENSITIVE FIELD

	   Reference to a secret containing data for the "webhookSecret" field:

	   Authentication secret for a webhook-based alert.

	   Atlas returns this value if you set `"notifications.[n].typeName" :"WEBHOOK"` and either:
	   * You set `notification.[n].webhookSecret` to a non-empty string
	   * You set a default webhookSecret either on the Integrations page, or with the [Integrations API](#tag/Third-Party-Service-Integrations/operation/createIntegration)

	   **NOTE**: When you view or edit the alert for a webhook notification, the secret appears completely redacted.
	*/
	WebhookSecretSecretRef *ApiTokenSecretRef `json:"webhookSecretSecretRef,omitempty"`

	/*
	   WebhookUrlSecretRef SENSITIVE FIELD

	   Reference to a secret containing data for the "webhookUrl" field:

	   Target URL for a webhook-based alert.

	   Atlas returns this value if you set `"notifications.[n].typeName" :"WEBHOOK"` and either:
	   * You set `notification.[n].webhookURL` to a non-empty string
	   * You set a default webhookUrl either on the [Integrations](https://www.mongodb.com/docs/atlas/tutorial/third-party-service-integrations/#std-label-third-party-integrations) page, or with the [Integrations API](#tag/Third-Party-Service-Integrations/operation/createIntegration)

	   **NOTE**: When you view or edit the alert for a Webhook URL notification, the URL appears partially redacted.
	*/
	WebhookUrlSecretRef *ApiTokenSecretRef `json:"webhookUrlSecretRef,omitempty"`
}

type ApiTokenSecretRef struct {
	// Key Key of the secret data containing the sensitive field value, defaults to
	// "apiToken".
	Key *string `json:"key,omitempty"`

	// Name Name of the secret containing the sensitive field value.
	Name *string `json:"name,omitempty"`
}

type GroupAlertsConfigStatus struct {
	// Conditions Represents the latest available observations of a resource's current
	// state.
	Conditions *[]metav1.Condition `json:"conditions,omitempty"`

	// V20250312 The last observed Atlas state of the groupalertsconfig resource for
	// version v20250312.
	V20250312 *GroupAlertsConfigStatusV20250312 `json:"v20250312,omitempty"`
}

type GroupAlertsConfigStatusV20250312 struct {
	// Created Date and time when MongoDB Cloud created the alert configuration. This
	// parameter expresses its value in the ISO 8601 timestamp format in UTC.
	Created *string `json:"created,omitempty"`

	// GroupId Unique 24-hexadecimal digit string that identifies the project that owns
	// this alert configuration.
	GroupId *string `json:"groupId,omitempty"`

	// Id Unique 24-hexadecimal digit string that identifies this alert configuration.
	Id *string `json:"id,omitempty"`

	// Updated Date and time when someone last updated this alert configuration. This
	// parameter expresses its value in the ISO 8601 timestamp format in UTC.
	Updated *string `json:"updated,omitempty"`
}

// +kubebuilder:object:root=true
type GroupAlertsConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupAlertsConfig `json:"items"`
}
