// Code generated by crd2go. DO NOT EDIT.

package v1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

func init() {
	SchemeBuilder.Register(&Group{})
	SchemeBuilder.Register(&GroupList{})
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

type Group struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   GroupSpec   `json:"spec,omitempty"`
	Status GroupStatus `json:"status,omitempty"`
}

type GroupSpec struct {
	// V20250312 The spec of the group resource for version v20250312.
	V20250312 *GroupSpecV20250312 `json:"v20250312,omitempty"`
}

type GroupSpecV20250312 struct {
	// Entry The entry fields of the group resource spec. These fields can be set for
	// creating and updating groups.
	Entry *V20250312Entry `json:"entry,omitempty"`

	// ProjectOwnerId Unique 24-hexadecimal digit string that identifies the MongoDB
	// Cloud user to whom to grant the Project Owner role on the specified project. If
	// you set this parameter, it overrides the default value of the oldest
	// Organization Owner.
	ProjectOwnerId string `json:"projectOwnerId"`
}

type V20250312Entry struct {
	// Name Human-readable label that identifies the project included in the MongoDB
	// Cloud organization.
	Name string `json:"name"`

	// OrgId Unique 24-hexadecimal digit string that identifies the MongoDB Cloud
	// organization to which the project belongs.
	OrgId string `json:"orgId"`

	/*
	   RegionUsageRestrictions Applies to Atlas for Government only.

	   In Commercial Atlas, this field will be rejected in requests and missing in responses.

	   This field sets restrictions on available regions in the project.

	   `COMMERCIAL_FEDRAMP_REGIONS_ONLY`: Only allows deployments in FedRAMP Moderate regions.

	   `GOV_REGIONS_ONLY`: Only allows deployments in GovCloud regions.
	*/
	RegionUsageRestrictions *string `json:"regionUsageRestrictions,omitempty"`

	// Tags List that contains key-value pairs between 1 to 255 characters in length
	// for tagging and categorizing the project.
	Tags *[]Tags `json:"tags,omitempty"`

	// WithDefaultAlertsSettings Flag that indicates whether to create the project with
	// default alert settings.
	WithDefaultAlertsSettings *bool `json:"withDefaultAlertsSettings,omitempty"`
}

type Tags struct {
	// Key Constant that defines the set of the tag. For example, `environment` in the
	// `environment : production` tag.
	Key string `json:"key"`

	// Value Variable that belongs to the set of the tag. For example, `production` in
	// the `environment : production` tag.
	Value string `json:"value"`
}

type GroupStatus struct {
	// Conditions Represents the latest available observations of a resource's current
	// state.
	Conditions *[]metav1.Condition `json:"conditions,omitempty"`

	// V20250312 The last observed Atlas state of the group resource for version
	// v20250312.
	V20250312 *GroupStatusV20250312 `json:"v20250312,omitempty"`
}

type GroupStatusV20250312 struct {
	// ClusterCount Quantity of MongoDB Cloud clusters deployed in this project.
	ClusterCount int `json:"clusterCount"`

	// Created Date and time when MongoDB Cloud created this project. This parameter
	// expresses its value in the ISO 8601 timestamp format in UTC.
	Created string `json:"created"`

	// Id Unique 24-hexadecimal digit string that identifies the MongoDB Cloud project.
	Id *string `json:"id,omitempty"`
}

// +kubebuilder:object:root=true
type GroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Group `json:"items"`
}
