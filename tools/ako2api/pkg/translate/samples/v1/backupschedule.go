// Code generated by crd2go. DO NOT EDIT.

package v1

import (
	"github.com/mongodb/mongodb-atlas-kubernetes/tools/ako2api/pkg/k8s"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

func init() {
	SchemeBuilder.Register(&BackupSchedule{})
	SchemeBuilder.Register(&BackupScheduleList{})
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

type BackupSchedule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   BackupScheduleSpec   `json:"spec,omitempty"`
	Status BackupScheduleStatus `json:"status,omitempty"`
}

type BackupScheduleSpec struct {
	// V20250312 The spec of the backupschedule resource for version v20250312.
	V20250312 *BackupScheduleSpecV20250312 `json:"v20250312,omitempty"`
}

type BackupScheduleSpecV20250312 struct {
	// ClusterName Human-readable label that identifies the cluster.
	ClusterName string `json:"clusterName"`

	// Entry The entry fields of the backupschedule resource spec. These fields can be
	// set for creating and updating backupschedules.
	Entry *BackupScheduleSpecV20250312Entry `json:"entry,omitempty"`

	/*
	   GroupId Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

	   **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.
	*/
	GroupId *string `json:"groupId,omitempty"`

	/*
	   GroupRef A reference to a "Group" resource.
	   The value of "$.status.v20250312.id" will be used to set "groupId".
	   Mutually exclusive with the "groupId" property.
	*/
	GroupRef *k8s.LocalReference `json:"groupRef,omitempty"`
}

type BackupScheduleSpecV20250312Entry struct {
	// AutoExportEnabled Flag that indicates whether MongoDB Cloud automatically
	// exports Cloud Backup Snapshots to the Export Bucket.
	AutoExportEnabled *bool `json:"autoExportEnabled,omitempty"`

	// CopySettings List that contains a document for each copy setting item in the
	// desired backup policy.
	CopySettings *[]CopySettings `json:"copySettings,omitempty"`

	// DeleteCopiedBackups List that contains a document for each deleted copy setting
	// whose backup copies you want to delete.
	DeleteCopiedBackups *[]DeleteCopiedBackups `json:"deleteCopiedBackups,omitempty"`

	// Export Policy for automatically exporting Cloud Backup Snapshots.
	Export *Export `json:"export,omitempty"`

	// ExtraRetentionSettings List that contains a document for each extra retention
	// setting item in the desired backup policy.
	ExtraRetentionSettings *[]ExtraRetentionSettings `json:"extraRetentionSettings,omitempty"`

	// Policies Rules set for this backup schedule.
	Policies *[]Policies `json:"policies,omitempty"`

	// ReferenceHourOfDay Hour of day in Coordinated Universal Time (UTC) that
	// represents when MongoDB Cloud takes the Snapshot.
	ReferenceHourOfDay *int `json:"referenceHourOfDay,omitempty"`

	// ReferenceMinuteOfHour Minute of the **referenceHourOfDay** that represents when
	// MongoDB Cloud takes the Snapshot.
	ReferenceMinuteOfHour *int `json:"referenceMinuteOfHour,omitempty"`

	// RestoreWindowDays Number of previous days that you can restore back to with
	// Continuous Cloud Backup accuracy. You must specify a positive, non-zero integer.
	// This parameter applies to continuous Cloud Backups only.
	RestoreWindowDays *int `json:"restoreWindowDays,omitempty"`

	// UpdateSnapshots Flag that indicates whether to apply the retention changes in
	// the updated backup policy to Snapshots that MongoDB Cloud took previously.
	UpdateSnapshots *bool `json:"updateSnapshots,omitempty"`

	// UseOrgAndGroupNamesInExportPrefix Flag that indicates whether to use
	// organization and project names instead of organization and project UUIDs in the
	// path to the metadata files that MongoDB Cloud uploads to your Export Bucket.
	UseOrgAndGroupNamesInExportPrefix *bool `json:"useOrgAndGroupNamesInExportPrefix,omitempty"`
}

type CopySettings struct {
	// CloudProvider Human-readable label that identifies the cloud provider that
	// stores the snapshot copy.
	CloudProvider *string `json:"cloudProvider,omitempty"`

	// Frequencies List that describes which types of snapshots to copy.
	Frequencies *[]string `json:"frequencies,omitempty"`

	// RegionName Target region to copy snapshots belonging to zoneId. Please supply
	// the 'Atlas Region'.
	RegionName *string `json:"regionName,omitempty"`

	// ShouldCopyOplogs Flag that indicates whether to copy the oplogs to the target
	// region. You can use the oplogs to perform point-in-time restores.
	ShouldCopyOplogs *bool `json:"shouldCopyOplogs,omitempty"`

	// ZoneId Unique 24-hexadecimal digit string that identifies the zone in a cluster.
	// For global clusters, there can be multiple zones to choose from. For sharded
	// clusters and replica set clusters, there is only one zone in the cluster. To
	// find the Zone Id, do a GET request to Return One Cluster from One Project and
	// consult the replicationSpecs array.
	ZoneId string `json:"zoneId"`
}

type DeleteCopiedBackups struct {
	// CloudProvider Human-readable label that identifies the cloud provider for the
	// deleted copy setting whose backup copies you want to delete.
	CloudProvider *string `json:"cloudProvider,omitempty"`

	// RegionName Target region for the deleted copy setting whose backup copies you
	// want to delete. Please supply the 'Atlas Region'.
	RegionName *string `json:"regionName,omitempty"`

	// ZoneId Unique 24-hexadecimal digit string that identifies the zone in a cluster.
	// For global clusters, there can be multiple zones to choose from. For sharded
	// clusters and replica set clusters, there is only one zone in the cluster. To
	// find the Zone Id, do a GET request to Return One Cluster from One Project and
	// consult the replicationSpecs array.
	ZoneId *string `json:"zoneId,omitempty"`
}

type Export struct {
	// ExportBucketId Unique 24-hexadecimal character string that identifies the Export
	// Bucket.
	ExportBucketId *string `json:"exportBucketId,omitempty"`

	// FrequencyType Human-readable label that indicates the rate at which the export
	// policy item occurs.
	FrequencyType *string `json:"frequencyType,omitempty"`
}

type ExtraRetentionSettings struct {
	// FrequencyType The frequency type for the extra retention settings for the
	// cluster.
	FrequencyType *string `json:"frequencyType,omitempty"`

	// RetentionDays The number of extra retention days for the cluster.
	RetentionDays *int `json:"retentionDays,omitempty"`
}

type Policies struct {
	// Id Unique 24-hexadecimal digit string that identifies this backup policy.
	Id *string `json:"id,omitempty"`

	// PolicyItems List that contains the specifications for one policy.
	PolicyItems *[]OnDemandPolicyItem `json:"policyItems,omitempty"`
}

type BackupScheduleStatus struct {
	// Conditions Represents the latest available observations of a resource's current
	// state.
	Conditions *[]metav1.Condition `json:"conditions,omitempty"`

	// V20250312 The last observed Atlas state of the backupschedule resource for
	// version v20250312.
	V20250312 *BackupScheduleStatusV20250312 `json:"v20250312,omitempty"`
}

type BackupScheduleStatusV20250312 struct {
	// ClusterId Unique 24-hexadecimal digit string that identifies the cluster with
	// the Snapshot you want to return.
	ClusterId *string `json:"clusterId,omitempty"`

	// ClusterName Human-readable label that identifies the cluster with the Snapshot
	// you want to return.
	ClusterName *string `json:"clusterName,omitempty"`

	// NextSnapshot Date and time when MongoDB Cloud takes the next Snapshot. This
	// parameter expresses its value in the ISO 8601 timestamp format in UTC.
	NextSnapshot *string `json:"nextSnapshot,omitempty"`
}

// +kubebuilder:object:root=true
type BackupScheduleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackupSchedule `json:"items"`
}
