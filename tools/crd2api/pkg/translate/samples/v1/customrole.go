// Code generated by crd2go. DO NOT EDIT.

package v1

import (
	"github.com/josvazg/akotranslate/pkg/k8s"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

func init() {
	SchemeBuilder.Register(&CustomRole{})
	SchemeBuilder.Register(&CustomRoleList{})
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

type CustomRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   CustomRoleSpec   `json:"spec,omitempty"`
	Status CustomRoleStatus `json:"status,omitempty"`
}

type CustomRoleSpec struct {
	// V20250312 The spec of the customrole resource for version v20250312.
	V20250312 *CustomRoleSpecV20250312 `json:"v20250312,omitempty"`
}

type CustomRoleSpecV20250312 struct {
	// Entry The entry fields of the customrole resource spec. These fields can be set
	// for creating and updating customroles.
	Entry *CustomRoleSpecV20250312Entry `json:"entry,omitempty"`

	/*
	   GroupId Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

	   **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.
	*/
	GroupId *string `json:"groupId,omitempty"`

	/*
	   GroupRef A reference to a "Group" resource.
	   The value of "$.status.v20250312.id" will be used to set "groupId".
	   Mutually exclusive with the "groupId" property.
	*/
	GroupRef *k8s.LocalReference `json:"groupRef,omitempty"`
}

type CustomRoleSpecV20250312Entry struct {
	// Actions List of the individual privilege actions that the role grants.
	Actions *[]Actions `json:"actions,omitempty"`

	// InheritedRoles List of the built-in roles that this custom role inherits.
	InheritedRoles *[]InheritedRoles `json:"inheritedRoles,omitempty"`

	// RoleName Human-readable label that identifies the role for the request. This
	// name must be unique for this custom role in this project.
	RoleName string `json:"roleName"`
}

type Actions struct {
	// Action Human-readable label that identifies the privilege action.
	Action string `json:"action"`

	// Resources List of resources on which you grant the action.
	Resources *[]Resources `json:"resources,omitempty"`
}

type Resources struct {
	// Cluster Flag that indicates whether to grant the action on the cluster resource.
	// If `true`, MongoDB Cloud ignores the **actions.resources.collection** and
	// **actions.resources.db** parameters.
	Cluster bool `json:"cluster"`

	// Collection Human-readable label that identifies the collection on which you
	// grant the action to one MongoDB user. If you don't set this parameter, you grant
	// the action to all collections in the database specified in the
	// **actions.resources.db** parameter. If you set `"actions.resources.cluster" :
	// true`, MongoDB Cloud ignores this parameter.
	Collection string `json:"collection"`

	// Db Human-readable label that identifies the database on which you grant the
	// action to one MongoDB user. If you set `"actions.resources.cluster" : true`,
	// MongoDB Cloud ignores this parameter.
	Db string `json:"db"`
}

type InheritedRoles struct {
	// Db Human-readable label that identifies the database on which someone grants the
	// action to one MongoDB user.
	Db string `json:"db"`

	// Role Human-readable label that identifies the role inherited. Set this value to
	// `admin` for every role except `read` or `readWrite`.
	Role string `json:"role"`
}

type CustomRoleStatus struct {
	// Conditions Represents the latest available observations of a resource's current
	// state.
	Conditions *[]metav1.Condition `json:"conditions,omitempty"`
}

// +kubebuilder:object:root=true
type CustomRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CustomRole `json:"items"`
}
