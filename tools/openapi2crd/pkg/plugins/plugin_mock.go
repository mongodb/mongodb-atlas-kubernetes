// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package plugins

import (
	mock "github.com/stretchr/testify/mock"
)

// NewPluginMock creates a new instance of PluginMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPluginMock[R any](t interface {
	mock.TestingT
	Cleanup(func())
}) *PluginMock[R] {
	mock := &PluginMock[R]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PluginMock is an autogenerated mock type for the Plugin type
type PluginMock[R any] struct {
	mock.Mock
}

type PluginMock_Expecter[R any] struct {
	mock *mock.Mock
}

func (_m *PluginMock[R]) EXPECT() *PluginMock_Expecter[R] {
	return &PluginMock_Expecter[R]{mock: &_m.Mock}
}

// Name provides a mock function for the type PluginMock
func (_mock *PluginMock[R]) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// PluginMock_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type PluginMock_Name_Call[R any] struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *PluginMock_Expecter[R]) Name() *PluginMock_Name_Call[R] {
	return &PluginMock_Name_Call[R]{Call: _e.mock.On("Name")}
}

func (_c *PluginMock_Name_Call[R]) Run(run func()) *PluginMock_Name_Call[R] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PluginMock_Name_Call[R]) Return(s string) *PluginMock_Name_Call[R] {
	_c.Call.Return(s)
	return _c
}

func (_c *PluginMock_Name_Call[R]) RunAndReturn(run func() string) *PluginMock_Name_Call[R] {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function for the type PluginMock
func (_mock *PluginMock[R]) Process(request R) error {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(R) error); ok {
		r0 = returnFunc(request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PluginMock_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type PluginMock_Process_Call[R any] struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - request R
func (_e *PluginMock_Expecter[R]) Process(request interface{}) *PluginMock_Process_Call[R] {
	return &PluginMock_Process_Call[R]{Call: _e.mock.On("Process", request)}
}

func (_c *PluginMock_Process_Call[R]) Run(run func(request R)) *PluginMock_Process_Call[R] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 R
		if args[0] != nil {
			arg0 = args[0].(R)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *PluginMock_Process_Call[R]) Return(err error) *PluginMock_Process_Call[R] {
	_c.Call.Return(err)
	return _c
}

func (_c *PluginMock_Process_Call[R]) RunAndReturn(run func(request R) error) *PluginMock_Process_Call[R] {
	_c.Call.Return(run)
	return _c
}

// NewCRDPluginMock creates a new instance of CRDPluginMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCRDPluginMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CRDPluginMock {
	mock := &CRDPluginMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CRDPluginMock is an autogenerated mock type for the CRDPlugin type
type CRDPluginMock struct {
	mock.Mock
}

type CRDPluginMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CRDPluginMock) EXPECT() *CRDPluginMock_Expecter {
	return &CRDPluginMock_Expecter{mock: &_m.Mock}
}

// Name provides a mock function for the type CRDPluginMock
func (_mock *CRDPluginMock) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// CRDPluginMock_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type CRDPluginMock_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *CRDPluginMock_Expecter) Name() *CRDPluginMock_Name_Call {
	return &CRDPluginMock_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *CRDPluginMock_Name_Call) Run(run func()) *CRDPluginMock_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CRDPluginMock_Name_Call) Return(s string) *CRDPluginMock_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *CRDPluginMock_Name_Call) RunAndReturn(run func() string) *CRDPluginMock_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function for the type CRDPluginMock
func (_mock *CRDPluginMock) Process(request *CRDProcessorRequest) error {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*CRDProcessorRequest) error); ok {
		r0 = returnFunc(request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// CRDPluginMock_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type CRDPluginMock_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - request *CRDProcessorRequest
func (_e *CRDPluginMock_Expecter) Process(request interface{}) *CRDPluginMock_Process_Call {
	return &CRDPluginMock_Process_Call{Call: _e.mock.On("Process", request)}
}

func (_c *CRDPluginMock_Process_Call) Run(run func(request *CRDProcessorRequest)) *CRDPluginMock_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *CRDProcessorRequest
		if args[0] != nil {
			arg0 = args[0].(*CRDProcessorRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *CRDPluginMock_Process_Call) Return(err error) *CRDPluginMock_Process_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *CRDPluginMock_Process_Call) RunAndReturn(run func(request *CRDProcessorRequest) error) *CRDPluginMock_Process_Call {
	_c.Call.Return(run)
	return _c
}

// NewMappingPluginMock creates a new instance of MappingPluginMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMappingPluginMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MappingPluginMock {
	mock := &MappingPluginMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MappingPluginMock is an autogenerated mock type for the MappingPlugin type
type MappingPluginMock struct {
	mock.Mock
}

type MappingPluginMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MappingPluginMock) EXPECT() *MappingPluginMock_Expecter {
	return &MappingPluginMock_Expecter{mock: &_m.Mock}
}

// Name provides a mock function for the type MappingPluginMock
func (_mock *MappingPluginMock) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MappingPluginMock_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MappingPluginMock_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MappingPluginMock_Expecter) Name() *MappingPluginMock_Name_Call {
	return &MappingPluginMock_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MappingPluginMock_Name_Call) Run(run func()) *MappingPluginMock_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MappingPluginMock_Name_Call) Return(s string) *MappingPluginMock_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MappingPluginMock_Name_Call) RunAndReturn(run func() string) *MappingPluginMock_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function for the type MappingPluginMock
func (_mock *MappingPluginMock) Process(request *MappingProcessorRequest) error {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*MappingProcessorRequest) error); ok {
		r0 = returnFunc(request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MappingPluginMock_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MappingPluginMock_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - request *MappingProcessorRequest
func (_e *MappingPluginMock_Expecter) Process(request interface{}) *MappingPluginMock_Process_Call {
	return &MappingPluginMock_Process_Call{Call: _e.mock.On("Process", request)}
}

func (_c *MappingPluginMock_Process_Call) Run(run func(request *MappingProcessorRequest)) *MappingPluginMock_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *MappingProcessorRequest
		if args[0] != nil {
			arg0 = args[0].(*MappingProcessorRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MappingPluginMock_Process_Call) Return(err error) *MappingPluginMock_Process_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MappingPluginMock_Process_Call) RunAndReturn(run func(request *MappingProcessorRequest) error) *MappingPluginMock_Process_Call {
	_c.Call.Return(run)
	return _c
}

// NewPropertyPluginMock creates a new instance of PropertyPluginMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPropertyPluginMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PropertyPluginMock {
	mock := &PropertyPluginMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PropertyPluginMock is an autogenerated mock type for the PropertyPlugin type
type PropertyPluginMock struct {
	mock.Mock
}

type PropertyPluginMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PropertyPluginMock) EXPECT() *PropertyPluginMock_Expecter {
	return &PropertyPluginMock_Expecter{mock: &_m.Mock}
}

// Name provides a mock function for the type PropertyPluginMock
func (_mock *PropertyPluginMock) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// PropertyPluginMock_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type PropertyPluginMock_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *PropertyPluginMock_Expecter) Name() *PropertyPluginMock_Name_Call {
	return &PropertyPluginMock_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *PropertyPluginMock_Name_Call) Run(run func()) *PropertyPluginMock_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PropertyPluginMock_Name_Call) Return(s string) *PropertyPluginMock_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *PropertyPluginMock_Name_Call) RunAndReturn(run func() string) *PropertyPluginMock_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function for the type PropertyPluginMock
func (_mock *PropertyPluginMock) Process(request *PropertyProcessorRequest) error {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*PropertyProcessorRequest) error); ok {
		r0 = returnFunc(request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PropertyPluginMock_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type PropertyPluginMock_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - request *PropertyProcessorRequest
func (_e *PropertyPluginMock_Expecter) Process(request interface{}) *PropertyPluginMock_Process_Call {
	return &PropertyPluginMock_Process_Call{Call: _e.mock.On("Process", request)}
}

func (_c *PropertyPluginMock_Process_Call) Run(run func(request *PropertyProcessorRequest)) *PropertyPluginMock_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *PropertyProcessorRequest
		if args[0] != nil {
			arg0 = args[0].(*PropertyProcessorRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *PropertyPluginMock_Process_Call) Return(err error) *PropertyPluginMock_Process_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PropertyPluginMock_Process_Call) RunAndReturn(run func(request *PropertyProcessorRequest) error) *PropertyPluginMock_Process_Call {
	_c.Call.Return(run)
	return _c
}

// NewExtensionPluginMock creates a new instance of ExtensionPluginMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExtensionPluginMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExtensionPluginMock {
	mock := &ExtensionPluginMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ExtensionPluginMock is an autogenerated mock type for the ExtensionPlugin type
type ExtensionPluginMock struct {
	mock.Mock
}

type ExtensionPluginMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ExtensionPluginMock) EXPECT() *ExtensionPluginMock_Expecter {
	return &ExtensionPluginMock_Expecter{mock: &_m.Mock}
}

// Name provides a mock function for the type ExtensionPluginMock
func (_mock *ExtensionPluginMock) Name() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// ExtensionPluginMock_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type ExtensionPluginMock_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *ExtensionPluginMock_Expecter) Name() *ExtensionPluginMock_Name_Call {
	return &ExtensionPluginMock_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *ExtensionPluginMock_Name_Call) Run(run func()) *ExtensionPluginMock_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ExtensionPluginMock_Name_Call) Return(s string) *ExtensionPluginMock_Name_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *ExtensionPluginMock_Name_Call) RunAndReturn(run func() string) *ExtensionPluginMock_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function for the type ExtensionPluginMock
func (_mock *ExtensionPluginMock) Process(request *ExtensionProcessorRequest) error {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*ExtensionProcessorRequest) error); ok {
		r0 = returnFunc(request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ExtensionPluginMock_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type ExtensionPluginMock_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - request *ExtensionProcessorRequest
func (_e *ExtensionPluginMock_Expecter) Process(request interface{}) *ExtensionPluginMock_Process_Call {
	return &ExtensionPluginMock_Process_Call{Call: _e.mock.On("Process", request)}
}

func (_c *ExtensionPluginMock_Process_Call) Run(run func(request *ExtensionProcessorRequest)) *ExtensionPluginMock_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *ExtensionProcessorRequest
		if args[0] != nil {
			arg0 = args[0].(*ExtensionProcessorRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ExtensionPluginMock_Process_Call) Return(err error) *ExtensionPluginMock_Process_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ExtensionPluginMock_Process_Call) RunAndReturn(run func(request *ExtensionProcessorRequest) error) *ExtensionPluginMock_Process_Call {
	_c.Call.Return(run)
	return _c
}
