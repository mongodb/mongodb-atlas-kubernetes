// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package config

import (
	"github.com/getkin/kin-openapi/openapi3"
	mock "github.com/stretchr/testify/mock"
)

// NewLoaderMock creates a new instance of LoaderMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoaderMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoaderMock {
	mock := &LoaderMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// LoaderMock is an autogenerated mock type for the Loader type
type LoaderMock struct {
	mock.Mock
}

type LoaderMock_Expecter struct {
	mock *mock.Mock
}

func (_m *LoaderMock) EXPECT() *LoaderMock_Expecter {
	return &LoaderMock_Expecter{mock: &_m.Mock}
}

// Load provides a mock function for the type LoaderMock
func (_mock *LoaderMock) Load(path string) (*openapi3.T, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 *openapi3.T
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*openapi3.T, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *openapi3.T); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openapi3.T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// LoaderMock_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type LoaderMock_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - path string
func (_e *LoaderMock_Expecter) Load(path interface{}) *LoaderMock_Load_Call {
	return &LoaderMock_Load_Call{Call: _e.mock.On("Load", path)}
}

func (_c *LoaderMock_Load_Call) Run(run func(path string)) *LoaderMock_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *LoaderMock_Load_Call) Return(t *openapi3.T, err error) *LoaderMock_Load_Call {
	_c.Call.Return(t, err)
	return _c
}

func (_c *LoaderMock_Load_Call) RunAndReturn(run func(path string) (*openapi3.T, error)) *LoaderMock_Load_Call {
	_c.Call.Return(run)
	return _c
}
