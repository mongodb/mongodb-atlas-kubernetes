// Copyright 2025 MongoDB Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package exporter

import (
	"bufio"
	"os"
	"path/filepath"

	"github.com/pkg/errors"
	apiextensions "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions"
	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/client-go/kubernetes/scheme"
	"sigs.k8s.io/yaml"
)

// Exporter exports the yaml config to file.
type Exporter struct {
	writer *bufio.Writer
}

func New(outputFilepath string) (*Exporter, error) {
	f, err := os.Create(filepath.Clean(outputFilepath))
	if err != nil {
		return nil, errors.Wrapf(err, "Failed to open the output file %s", outputFilepath)
	}

	writer := bufio.NewWriter(f)
	_, err = writer.WriteString("# The file is generated by atlas2crd\n")
	if err != nil {
		return nil, errors.Wrapf(err, "Failed to write to output file")
	}

	return &Exporter{
		writer: writer,
	}, nil
}

// Export exports the yaml config to file.
func (e *Exporter) Export(final *apiextensions.CustomResourceDefinition) error {
	err := e.marshalCrd(final)
	if err != nil {
		return errors.Wrapf(err, "Failed to marshall CRD when writing output")
	}

	return e.writer.Flush()
}

func (e Exporter) marshalCrd(crd *apiextensions.CustomResourceDefinition) error {
	obj, err := convert(crd)
	if err != nil {
		return err
	}
	obj.Kind = "CustomResourceDefinition"
	obj.APIVersion = "apiextensions.k8s.io/v1"

	yamlBytes, err := yaml.Marshal(obj)
	if err != nil {
		return err
	}
	_, err = e.writer.WriteString("---\n")
	if err != nil {
		return err
	}
	_, err = e.writer.Write(yamlBytes)
	if err != nil {
		return err
	}

	return nil
}

func convert(crd *apiextensions.CustomResourceDefinition) (*apiextensionsv1.CustomResourceDefinition, error) {
	sch := runtime.NewScheme()
	_ = scheme.AddToScheme(sch)
	_ = apiextensions.AddToScheme(sch)
	_ = apiextensionsv1.AddToScheme(sch)
	_ = apiextensionsv1.RegisterConversions(sch)
	out := &apiextensionsv1.CustomResourceDefinition{}
	err := sch.Convert(crd, out, nil)
	if err != nil {
		return nil, err
	}
	return out, err
}
