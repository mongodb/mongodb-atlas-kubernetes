// Code generated by crd2go. DO NOT EDIT.

package v1

import (
	"github.com/josvazg/akotranslate/pkg/k8s"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

func init() {
	SchemeBuilder.Register(&Cluster{})
	SchemeBuilder.Register(&ClusterList{})
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

type Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   ClusterSpec   `json:"spec,omitempty"`
	Status ClusterStatus `json:"status,omitempty"`
}

type ClusterSpec struct {
	// V20250312 The spec of the cluster resource for version v20250312.
	V20250312 *ClusterSpecV20250312 `json:"v20250312,omitempty"`
}

type ClusterSpecV20250312 struct {
	// Entry The entry fields of the cluster resource spec. These fields can be set for
	// creating and updating clusters.
	Entry *ClusterSpecV20250312Entry `json:"entry,omitempty"`

	/*
	   GroupId Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

	   **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.
	*/
	GroupId *string `json:"groupId,omitempty"`

	/*
	   GroupRef A reference to a "Group" resource.
	   The value of "$.status.v20250312.id" will be used to set "groupId".
	   Mutually exclusive with the "groupId" property.
	*/
	GroupRef *k8s.LocalReference `json:"groupRef,omitempty"`
}

type ClusterSpecV20250312Entry struct {
	// AcceptDataRisksAndForceReplicaSetReconfig If reconfiguration is necessary to
	// regain a primary due to a regional outage, submit this field alongside your
	// topology reconfiguration to request a new regional outage resistant topology.
	// Forced reconfigurations during an outage of the majority of electable nodes
	// carry a risk of data loss if replicated writes (even majority committed writes)
	// have not been replicated to the new primary node. MongoDB Atlas docs contain
	// more information. To proceed with an operation which carries that risk, set
	// **acceptDataRisksAndForceReplicaSetReconfig** to the current date. This
	// parameter expresses its value in the ISO 8601 timestamp format in UTC.
	AcceptDataRisksAndForceReplicaSetReconfig *string `json:"acceptDataRisksAndForceReplicaSetReconfig,omitempty"`

	// AdvancedConfiguration Group of settings that configures a subset of the advanced
	// configuration details.
	AdvancedConfiguration *AdvancedConfiguration `json:"advancedConfiguration,omitempty"`

	// BackupEnabled Flag that indicates whether the cluster can perform backups. If
	// set to `true`, the cluster can perform backups. You must set this value to
	// `true` for NVMe clusters. Backup uses Cloud Backups for dedicated clusters and
	// [Shared Cluster
	// Backups](https://docs.atlas.mongodb.com/backup/shared-tier/overview/) for tenant
	// clusters. If set to `false`, the cluster doesn't use backups.
	BackupEnabled *bool `json:"backupEnabled,omitempty"`

	// BiConnector Settings needed to configure the MongoDB Connector for Business
	// Intelligence for this cluster.
	BiConnector *BiConnector `json:"biConnector,omitempty"`

	// ClusterType Configuration of nodes that comprise the cluster.
	ClusterType *string `json:"clusterType,omitempty"`

	/*
	   ConfigServerManagementMode Config Server Management Mode for creating or updating a sharded cluster.

	   When configured as ATLAS_MANAGED, atlas may automatically switch the cluster's config server type for optimal performance and savings.

	   When configured as FIXED_TO_DEDICATED, the cluster will always use a dedicated config server.
	*/
	ConfigServerManagementMode *string `json:"configServerManagementMode,omitempty"`

	// ConfigServerType Describes a sharded cluster's config server type.
	ConfigServerType *string `json:"configServerType,omitempty"`

	// DiskWarmingMode Disk warming mode selection.
	DiskWarmingMode *string `json:"diskWarmingMode,omitempty"`

	// EncryptionAtRestProvider Cloud service provider that manages your customer keys
	// to provide an additional layer of encryption at rest for the cluster. To enable
	// customer key management for encryption at rest, the cluster
	// **replicationSpecs[n].regionConfigs[m].{type}Specs.instanceSize** setting must
	// be `M10` or higher and `"backupEnabled" : false` or omitted entirely.
	EncryptionAtRestProvider *string `json:"encryptionAtRestProvider,omitempty"`

	// FeatureCompatibilityVersion Feature compatibility version of the cluster. This
	// will always appear regardless of whether FCV is pinned.
	FeatureCompatibilityVersion *string `json:"featureCompatibilityVersion,omitempty"`

	// FeatureCompatibilityVersionExpirationDate Feature compatibility version
	// expiration date. Will only appear if FCV is pinned. This parameter expresses its
	// value in the ISO 8601 timestamp format in UTC.
	FeatureCompatibilityVersionExpirationDate *string `json:"featureCompatibilityVersionExpirationDate,omitempty"`

	/*
	   GlobalClusterSelfManagedSharding Set this field to configure the Sharding Management Mode when creating a new Global Cluster.

	   When set to false, the management mode is set to Atlas-Managed Sharding. This mode fully manages the sharding of your Global Cluster and is built to provide a seamless deployment experience.

	   When set to true, the management mode is set to Self-Managed Sharding. This mode leaves the management of shards in your hands and is built to provide an advanced and flexible deployment experience.

	   This setting cannot be changed once the cluster is deployed.
	*/
	GlobalClusterSelfManagedSharding *bool `json:"globalClusterSelfManagedSharding,omitempty"`

	/*
	   Labels Collection of key-value pairs between 1 to 255 characters in length that tag and categorize the cluster. The MongoDB Cloud console doesn't display your labels.

	   Cluster labels are deprecated and will be removed in a future release. We strongly recommend that you use Resource Tags instead.
	*/
	Labels *[]Tags `json:"labels,omitempty"`

	// MongoDBEmployeeAccessGrant MongoDB employee granted access level and expiration
	// for a cluster.
	MongoDBEmployeeAccessGrant *MongoDBEmployeeAccessGrant `json:"mongoDBEmployeeAccessGrant,omitempty"`

	/*
	   MongoDBMajorVersion MongoDB major version of the cluster. Set to the binary major version.

	   On creation: Choose from the available versions of MongoDB, or leave unspecified for the current recommended default in the MongoDB Cloud platform. The recommended version is a recent Long Term Support version. The default is not guaranteed to be the most recently released version throughout the entire release cycle. For versions available in a specific project, see the linked documentation or use the API endpoint for [project LTS versions endpoint](#tag/Projects/operation/getProjectLtsVersions).

	    On update: Increase version only by 1 major version at a time. If the cluster is pinned to a MongoDB feature compatibility version exactly one major version below the current MongoDB version, the MongoDB version can be downgraded to the previous major version.
	*/
	MongoDBMajorVersion *string `json:"mongoDBMajorVersion,omitempty"`

	// Name Human-readable label that identifies the cluster.
	Name *string `json:"name,omitempty"`

	// Paused Flag that indicates whether the cluster is paused.
	Paused *bool `json:"paused,omitempty"`

	// PitEnabled Flag that indicates whether the cluster uses continuous cloud
	// backups.
	PitEnabled *bool `json:"pitEnabled,omitempty"`

	/*
	   RedactClientLogData Enable or disable log redaction.

	   This setting configures the ``mongod`` or ``mongos`` to redact any document field contents from a message accompanying a given log event before logging. This prevents the program from writing potentially sensitive data stored on the database to the diagnostic log. Metadata such as error or operation codes, line numbers, and source file names are still visible in the logs.

	   Use ``redactClientLogData`` in conjunction with Encryption at Rest and TLS/SSL (Transport Encryption) to assist compliance with regulatory requirements.

	   *Note*: changing this setting on a cluster will trigger a rolling restart as soon as the cluster is updated.
	*/
	RedactClientLogData *bool `json:"redactClientLogData,omitempty"`

	/*
	   ReplicaSetScalingStrategy Set this field to configure the replica set scaling mode for your cluster.

	   By default, Atlas scales under WORKLOAD_TYPE. This mode allows Atlas to scale your analytics nodes in parallel to your operational nodes.

	   When configured as SEQUENTIAL, Atlas scales all nodes sequentially. This mode is intended for steady-state workloads and applications performing latency-sensitive secondary reads.

	   When configured as NODE_TYPE, Atlas scales your electable nodes in parallel with your read-only and analytics nodes. This mode is intended for large, dynamic workloads requiring frequent and timely cluster tier scaling. This is the fastest scaling strategy, but it might impact latency of workloads when performing extensive secondary reads.
	*/
	ReplicaSetScalingStrategy *string `json:"replicaSetScalingStrategy,omitempty"`

	// ReplicationSpecs List of settings that configure your cluster regions. This
	// array has one object per shard representing node configurations in each shard.
	// For replica sets there is only one object representing node configurations.
	ReplicationSpecs *[]ReplicationSpecs `json:"replicationSpecs,omitempty"`

	// RootCertType Root Certificate Authority that MongoDB Atlas cluster uses. MongoDB
	// Cloud supports Internet Security Research Group.
	RootCertType *string `json:"rootCertType,omitempty"`

	// Tags List that contains key-value pairs between 1 to 255 characters in length
	// for tagging and categorizing the cluster.
	Tags *[]Tags `json:"tags,omitempty"`

	// TerminationProtectionEnabled Flag that indicates whether termination protection
	// is enabled on the cluster. If set to `true`, MongoDB Cloud won't delete the
	// cluster. If set to `false`, MongoDB Cloud will delete the cluster.
	TerminationProtectionEnabled *bool `json:"terminationProtectionEnabled,omitempty"`

	// VersionReleaseSystem Method by which the cluster maintains the MongoDB versions.
	// If value is `CONTINUOUS`, you must not specify **mongoDBMajorVersion**.
	VersionReleaseSystem *string `json:"versionReleaseSystem,omitempty"`
}

type AdvancedConfiguration struct {
	// CustomOpensslCipherConfigTls12 The custom OpenSSL cipher suite list for TLS 1.2.
	// This field is only valid when `tlsCipherConfigMode` is set to `CUSTOM`.
	CustomOpensslCipherConfigTls12 *[]string `json:"customOpensslCipherConfigTls12,omitempty"`

	// MinimumEnabledTlsProtocol Minimum Transport Layer Security (TLS) version that
	// the cluster accepts for incoming connections. Clusters using TLS 1.0 or 1.1
	// should consider setting TLS 1.2 as the minimum TLS protocol version.
	MinimumEnabledTlsProtocol *string `json:"minimumEnabledTlsProtocol,omitempty"`

	// TlsCipherConfigMode The TLS cipher suite configuration mode. The default mode
	// uses the default cipher suites. The custom mode allows you to specify custom
	// cipher suites for both TLS 1.2 and TLS 1.3.
	TlsCipherConfigMode *string `json:"tlsCipherConfigMode,omitempty"`
}

type BiConnector struct {
	// Enabled Flag that indicates whether MongoDB Connector for Business Intelligence
	// is enabled on the specified cluster.
	Enabled *bool `json:"enabled,omitempty"`

	// ReadPreference Data source node designated for the MongoDB Connector for
	// Business Intelligence on MongoDB Cloud. The MongoDB Connector for Business
	// Intelligence on MongoDB Cloud reads data from the primary, secondary, or
	// analytics node based on your read preferences. Defaults to `ANALYTICS` node, or
	// `SECONDARY` if there are no `ANALYTICS` nodes.
	ReadPreference *string `json:"readPreference,omitempty"`
}

type MongoDBEmployeeAccessGrant struct {
	// ExpirationTime Expiration date for the employee access grant. This parameter
	// expresses its value in the ISO 8601 timestamp format in UTC.
	ExpirationTime string `json:"expirationTime"`

	// GrantType Level of access to grant to MongoDB Employees.
	GrantType string `json:"grantType"`

	// Links List of one or more Uniform Resource Locators (URLs) that point to API
	// sub-resources, related API resources, or both. RFC 5988 outlines these
	// relationships.
	Links *[]Links `json:"links,omitempty"`
}

type Links struct {
	// Href Uniform Resource Locator (URL) that points another API resource to which
	// this response has some relationship. This URL often begins with
	// `https://cloud.mongodb.com/api/atlas`.
	Href *string `json:"href,omitempty"`

	// Rel Uniform Resource Locator (URL) that defines the semantic relationship
	// between this resource and another API resource. This URL often begins with
	// `https://cloud.mongodb.com/api/atlas`.
	Rel *string `json:"rel,omitempty"`
}

type ReplicationSpecs struct {
	/*
	   RegionConfigs Hardware specifications for nodes set for a given region. Each **regionConfigs** object describes the region's priority in elections and the number and type of MongoDB nodes that MongoDB Cloud deploys to the region. Each **regionConfigs** object must have either an **analyticsSpecs** object, **electableSpecs** object, or **readOnlySpecs** object. Tenant clusters only require **electableSpecs. Dedicated** clusters can specify any of these specifications, but must have at least one **electableSpecs** object within a **replicationSpec**.

	   **Example:**

	   If you set `"replicationSpecs[n].regionConfigs[m].analyticsSpecs.instanceSize" : "M30"`, set `"replicationSpecs[n].regionConfigs[m].electableSpecs.instanceSize" : `"M30"` if you have electable nodes and `"replicationSpecs[n].regionConfigs[m].readOnlySpecs.instanceSize" : `"M30"` if you have read-only nodes.
	*/
	RegionConfigs *[]RegionConfigs `json:"regionConfigs,omitempty"`

	// ZoneId Unique 24-hexadecimal digit string that identifies the zone in a Global
	// Cluster. This value can be used to configure Global Cluster backup policies.
	ZoneId *string `json:"zoneId,omitempty"`

	// ZoneName Human-readable label that describes the zone this shard belongs to in a
	// Global Cluster. Provide this value only if "clusterType" : "GEOSHARDED" but not
	// "selfManagedSharding" : true.
	ZoneName *string `json:"zoneName,omitempty"`
}

type RegionConfigs struct {
	// AnalyticsAutoScaling Options that determine how this cluster handles resource
	// scaling.
	AnalyticsAutoScaling *AnalyticsAutoScaling `json:"analyticsAutoScaling,omitempty"`

	// AnalyticsSpecs Hardware specifications for read-only nodes in the region.
	// Read-only nodes can never become the primary member, but can enable local reads.
	// If you don't specify this parameter, no read-only nodes are deployed to the
	// region.
	AnalyticsSpecs *AnalyticsSpecs `json:"analyticsSpecs,omitempty"`

	// AutoScaling Options that determine how this cluster handles resource scaling.
	AutoScaling *AnalyticsAutoScaling `json:"autoScaling,omitempty"`

	/*
	   BackingProviderName Cloud service provider on which MongoDB Cloud provisioned the multi-tenant cluster. The resource returns this parameter when **providerName** is `TENANT` and **electableSpecs.instanceSize** is `M0`, `M2` or `M5`.

	   Please note that  using an instanceSize of M2 or M5 will create a Flex cluster instead. Support for the instanceSize of M2 or M5 will be discontinued in January 2026. We recommend using the createFlexCluster API for such configurations moving forward.
	*/
	BackingProviderName *string `json:"backingProviderName,omitempty"`

	// ElectableSpecs Hardware specifications for all electable nodes deployed in the
	// region. Electable nodes can become the primary and can enable local reads. If
	// you don't specify this option, MongoDB Cloud deploys no electable nodes to the
	// region.
	ElectableSpecs *ElectableSpecs `json:"electableSpecs,omitempty"`

	/*
	   Priority Precedence is given to this region when a primary election occurs. If your **regionConfigs** has only **readOnlySpecs**, **analyticsSpecs**, or both, set this value to `0`. If you have multiple **regionConfigs** objects (your cluster is multi-region or multi-cloud), they must have priorities in descending order. The highest priority is `7`.

	   **Example:** If you have three regions, their priorities would be `7`, `6`, and `5` respectively. If you added two more regions for supporting electable nodes, the priorities of those regions would be `4` and `3` respectively.
	*/
	Priority *int `json:"priority,omitempty"`

	// ProviderName Cloud service provider on which MongoDB Cloud provisions the hosts.
	// Set dedicated clusters to `AWS`, `GCP`, `AZURE` or `TENANT`.
	ProviderName *string `json:"providerName,omitempty"`

	// ReadOnlySpecs Hardware specifications for read-only nodes in the region.
	// Read-only nodes can never become the primary member, but can enable local reads.
	// If you don't specify this parameter, no read-only nodes are deployed to the
	// region.
	ReadOnlySpecs *AnalyticsSpecs `json:"readOnlySpecs,omitempty"`

	// RegionName Physical location of your MongoDB cluster nodes. The region you
	// choose can affect network latency for clients accessing your databases. The
	// region name is only returned in the response for single-region clusters. When
	// MongoDB Cloud deploys a dedicated cluster, it checks if a VPC or VPC connection
	// exists for that provider and region. If not, MongoDB Cloud creates them as part
	// of the deployment. It assigns the VPC a Classless Inter-Domain Routing (CIDR)
	// block. To limit a new VPC peering connection to one Classless Inter-Domain
	// Routing (CIDR) block and region, create the connection first. Deploy the cluster
	// after the connection starts. GCP Clusters and Multi-region clusters require one
	// VPC peering connection for each region. MongoDB nodes can use only the peering
	// connection that resides in the same region as the nodes to communicate with the
	// peered VPC.
	RegionName *string `json:"regionName,omitempty"`
}

type AnalyticsAutoScaling struct {
	// Compute Options that determine how this cluster handles CPU scaling.
	Compute *Compute `json:"compute,omitempty"`

	// DiskGB Setting that enables disk auto-scaling.
	DiskGB *DiskGB `json:"diskGB,omitempty"`
}

type Compute struct {
	/*
	   Enabled Flag that indicates whether instance size reactive auto-scaling is enabled.

	   - Set to `true` to enable instance size reactive auto-scaling. If enabled, you must specify a value for **replicationSpecs[n].regionConfigs[m].autoScaling.compute.maxInstanceSize**.
	   - Set to `false` to disable instance size reactive auto-scaling.
	*/
	Enabled *bool `json:"enabled,omitempty"`

	// MaxInstanceSize Instance size boundary to which your cluster can automatically
	// scale.
	MaxInstanceSize *string `json:"maxInstanceSize,omitempty"`

	// MinInstanceSize Instance size boundary to which your cluster can automatically
	// scale.
	MinInstanceSize *string `json:"minInstanceSize,omitempty"`

	/*
	   PredictiveEnabled Flag that indicates whether predictive instance size auto-scaling is enabled.

	   - Set to `true` to enable predictive instance size auto-scaling. MongoDB Cloud requires **replicationSpecs[n].regionConfigs[m].autoScaling.compute.enabled** to be `true` in order to enable this feature.
	   - Set to `false` to disable predictive instance size auto-scaling.
	*/
	PredictiveEnabled *bool `json:"predictiveEnabled,omitempty"`

	// ScaleDownEnabled Flag that indicates whether the instance size may scale down
	// via reactive auto-scaling. MongoDB Cloud requires this parameter if
	// **replicationSpecs[n].regionConfigs[m].autoScaling.compute.enabled** is `true`.
	// If you enable this option, specify a value for
	// **replicationSpecs[n].regionConfigs[m].autoScaling.compute.minInstanceSize**.
	ScaleDownEnabled *bool `json:"scaleDownEnabled,omitempty"`
}

type DiskGB struct {
	// Enabled Flag that indicates whether this cluster enables disk auto-scaling. The
	// maximum memory allowed for the selected cluster tier and the oplog size can
	// limit storage auto-scaling.
	Enabled *bool `json:"enabled,omitempty"`
}

type AnalyticsSpecs struct {
	/*
	   DiskIOPS Target throughput desired for storage attached to your Azure-provisioned cluster. Change this parameter if you:

	   - set `"replicationSpecs[n].regionConfigs[m].providerName" : "Azure"`.
	   - set `"replicationSpecs[n].regionConfigs[m].electableSpecs.instanceSize" : "M40"` or greater not including `Mxx_NVME` tiers.

	   The maximum input/output operations per second (IOPS) depend on the selected **.instanceSize** and **.diskSizeGB**.
	   This parameter defaults to the cluster tier's standard IOPS value.
	   Changing this value impacts cluster cost.
	*/
	DiskIOPS *int `json:"diskIOPS,omitempty"`

	/*
	   DiskSizeGB Storage capacity of instance data volumes expressed in gigabytes. Increase this number to add capacity.

	    This value must be equal for all shards and node types.

	    This value is not configurable on M0/M2/M5 clusters.

	    MongoDB Cloud requires this parameter if you set **replicationSpecs**.

	    If you specify a disk size below the minimum (10 GB), this parameter defaults to the minimum disk size value.

	    Storage charge calculations depend on whether you choose the default value or a custom value.

	    The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require more storage space, consider upgrading your cluster to a higher tier.
	*/
	DiskSizeGB *float64 `json:"diskSizeGB,omitempty"`

	/*
	   EbsVolumeType Type of storage you want to attach to your AWS-provisioned cluster.

	   - `STANDARD` volume types can't exceed the default input/output operations per second (IOPS) rate for the selected volume size.

	   - `PROVISIONED` volume types must fall within the allowable IOPS range for the selected volume size. You must set this value to (`PROVISIONED`) for NVMe clusters.
	*/
	EbsVolumeType *string `json:"ebsVolumeType,omitempty"`

	// InstanceSize Hardware specification for the instance sizes in this region in
	// this shard. Each instance size has a default storage and memory capacity.
	// Electable nodes and read-only nodes (known as "base nodes") within a single
	// shard must use the same instance size. Analytics nodes can scale independently
	// from base nodes within a shard. Both base nodes and analytics nodes can scale
	// independently from their equivalents in other shards.
	InstanceSize *string `json:"instanceSize,omitempty"`

	// NodeCount Number of nodes of the given type for MongoDB Cloud to deploy to the
	// region.
	NodeCount *int `json:"nodeCount,omitempty"`
}

type ElectableSpecs struct {
	/*
	   DiskIOPS Target throughput desired for storage attached to your Azure-provisioned cluster. Change this parameter if you:

	   - set `"replicationSpecs[n].regionConfigs[m].providerName" : "Azure"`.
	   - set `"replicationSpecs[n].regionConfigs[m].electableSpecs.instanceSize" : "M40"` or greater not including `Mxx_NVME` tiers.

	   The maximum input/output operations per second (IOPS) depend on the selected **.instanceSize** and **.diskSizeGB**.
	   This parameter defaults to the cluster tier's standard IOPS value.
	   Changing this value impacts cluster cost.
	*/
	DiskIOPS *int `json:"diskIOPS,omitempty"`

	/*
	   DiskSizeGB Storage capacity of instance data volumes expressed in gigabytes. Increase this number to add capacity.

	    This value must be equal for all shards and node types.

	    This value is not configurable on M0/M2/M5 clusters.

	    MongoDB Cloud requires this parameter if you set **replicationSpecs**.

	    If you specify a disk size below the minimum (10 GB), this parameter defaults to the minimum disk size value.

	    Storage charge calculations depend on whether you choose the default value or a custom value.

	    The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require more storage space, consider upgrading your cluster to a higher tier.
	*/
	DiskSizeGB *float64 `json:"diskSizeGB,omitempty"`

	/*
	   EbsVolumeType Type of storage you want to attach to your AWS-provisioned cluster.

	   - `STANDARD` volume types can't exceed the default input/output operations per second (IOPS) rate for the selected volume size.

	   - `PROVISIONED` volume types must fall within the allowable IOPS range for the selected volume size. You must set this value to (`PROVISIONED`) for NVMe clusters.
	*/
	EbsVolumeType *string `json:"ebsVolumeType,omitempty"`

	// EffectiveInstanceSize The true tenant instance size. This is present to support
	// backwards compatibility for deprecated provider types and/or instance sizes.
	EffectiveInstanceSize *string `json:"effectiveInstanceSize,omitempty"`

	// InstanceSize Hardware specification for the instances in this M0/M2/M5 tier
	// cluster.
	InstanceSize *string `json:"instanceSize,omitempty"`

	// NodeCount Number of nodes of the given type for MongoDB Cloud to deploy to the
	// region.
	NodeCount *int `json:"nodeCount,omitempty"`
}

type ClusterStatus struct {
	// Conditions Represents the latest available observations of a resource's current
	// state.
	Conditions *[]metav1.Condition `json:"conditions,omitempty"`

	// V20250312 The last observed Atlas state of the cluster resource for version
	// v20250312.
	V20250312 *ClusterStatusV20250312 `json:"v20250312,omitempty"`
}

type ClusterStatusV20250312 struct {
	// AdvancedConfiguration Group of settings that configures a subset of the advanced
	// configuration details.
	AdvancedConfiguration *AdvancedConfiguration `json:"advancedConfiguration,omitempty"`

	/*
	   ConfigServerManagementMode Config Server Management Mode for creating or updating a sharded cluster.

	   When configured as ATLAS_MANAGED, atlas may automatically switch the cluster's config server type for optimal performance and savings.

	   When configured as FIXED_TO_DEDICATED, the cluster will always use a dedicated config server.
	*/
	ConfigServerManagementMode *string `json:"configServerManagementMode,omitempty"`

	// ConfigServerType Describes a sharded cluster's config server type.
	ConfigServerType *string `json:"configServerType,omitempty"`

	// ConnectionStrings Collection of Uniform Resource Locators that point to the
	// MongoDB database.
	ConnectionStrings *ConnectionStrings `json:"connectionStrings,omitempty"`

	// CreateDate Date and time when MongoDB Cloud created this cluster. This parameter
	// expresses its value in ISO 8601 format in UTC.
	CreateDate *string `json:"createDate,omitempty"`

	// FeatureCompatibilityVersion Feature compatibility version of the cluster. This
	// will always appear regardless of whether FCV is pinned.
	FeatureCompatibilityVersion *string `json:"featureCompatibilityVersion,omitempty"`

	// FeatureCompatibilityVersionExpirationDate Feature compatibility version
	// expiration date. Will only appear if FCV is pinned. This parameter expresses its
	// value in the ISO 8601 timestamp format in UTC.
	FeatureCompatibilityVersionExpirationDate *string `json:"featureCompatibilityVersionExpirationDate,omitempty"`

	/*
	   GlobalClusterSelfManagedSharding Set this field to configure the Sharding Management Mode when creating a new Global Cluster.

	   When set to false, the management mode is set to Atlas-Managed Sharding. This mode fully manages the sharding of your Global Cluster and is built to provide a seamless deployment experience.

	   When set to true, the management mode is set to Self-Managed Sharding. This mode leaves the management of shards in your hands and is built to provide an advanced and flexible deployment experience.

	   This setting cannot be changed once the cluster is deployed.
	*/
	GlobalClusterSelfManagedSharding *bool `json:"globalClusterSelfManagedSharding,omitempty"`

	// GroupId Unique 24-hexadecimal character string that identifies the project.
	GroupId *string `json:"groupId,omitempty"`

	// Id Unique 24-hexadecimal digit string that identifies the cluster.
	Id *string `json:"id,omitempty"`

	// MongoDBEmployeeAccessGrant MongoDB employee granted access level and expiration
	// for a cluster.
	MongoDBEmployeeAccessGrant *MongoDBEmployeeAccessGrant `json:"mongoDBEmployeeAccessGrant,omitempty"`

	// MongoDBVersion Version of MongoDB that the cluster runs.
	MongoDBVersion *string `json:"mongoDBVersion,omitempty"`

	/*
	   RedactClientLogData Enable or disable log redaction.

	   This setting configures the ``mongod`` or ``mongos`` to redact any document field contents from a message accompanying a given log event before logging. This prevents the program from writing potentially sensitive data stored on the database to the diagnostic log. Metadata such as error or operation codes, line numbers, and source file names are still visible in the logs.

	   Use ``redactClientLogData`` in conjunction with Encryption at Rest and TLS/SSL (Transport Encryption) to assist compliance with regulatory requirements.

	   *Note*: changing this setting on a cluster will trigger a rolling restart as soon as the cluster is updated.
	*/
	RedactClientLogData *bool `json:"redactClientLogData,omitempty"`

	/*
	   ReplicaSetScalingStrategy Set this field to configure the replica set scaling mode for your cluster.

	   By default, Atlas scales under WORKLOAD_TYPE. This mode allows Atlas to scale your analytics nodes in parallel to your operational nodes.

	   When configured as SEQUENTIAL, Atlas scales all nodes sequentially. This mode is intended for steady-state workloads and applications performing latency-sensitive secondary reads.

	   When configured as NODE_TYPE, Atlas scales your electable nodes in parallel with your read-only and analytics nodes. This mode is intended for large, dynamic workloads requiring frequent and timely cluster tier scaling. This is the fastest scaling strategy, but it might impact latency of workloads when performing extensive secondary reads.
	*/
	ReplicaSetScalingStrategy *string `json:"replicaSetScalingStrategy,omitempty"`

	// ReplicationSpecs List of settings that configure your cluster regions. This
	// array has one object per shard representing node configurations in each shard.
	// For replica sets there is only one object representing node configurations.
	ReplicationSpecs *[]V20250312ReplicationSpecs `json:"replicationSpecs,omitempty"`

	// StateName Human-readable label that indicates the current operating condition of
	// this cluster.
	StateName *string `json:"stateName,omitempty"`
}

type ConnectionStrings struct {
	// AwsPrivateLink Private endpoint-aware connection strings that use AWS-hosted
	// clusters with Amazon Web Services (AWS) PrivateLink. Each key identifies an
	// Amazon Web Services (AWS) interface endpoint. Each value identifies the related
	// `mongodb://` connection string that you use to connect to MongoDB Cloud through
	// the interface endpoint that the key names.
	AwsPrivateLink *map[string]string `json:"awsPrivateLink,omitempty"`

	// AwsPrivateLinkSrv Private endpoint-aware connection strings that use AWS-hosted
	// clusters with Amazon Web Services (AWS) PrivateLink. Each key identifies an
	// Amazon Web Services (AWS) interface endpoint. Each value identifies the related
	// `mongodb://` connection string that you use to connect to Atlas through the
	// interface endpoint that the key names. If the cluster uses an optimized
	// connection string, `awsPrivateLinkSrv` contains the optimized connection string.
	// If the cluster has the non-optimized (legacy) connection string,
	// `awsPrivateLinkSrv` contains the non-optimized connection string even if an
	// optimized connection string is also present.
	AwsPrivateLinkSrv *map[string]string `json:"awsPrivateLinkSrv,omitempty"`

	// Private Network peering connection strings for each interface Virtual Private
	// Cloud (VPC) endpoint that you configured to connect to this cluster. This
	// connection string uses the `mongodb+srv://` protocol. The resource returns this
	// parameter once someone creates a network peering connection to this cluster.
	// This protocol tells the application to look up the host seed list in the Domain
	// Name System (DNS). This list synchronizes with the nodes in a cluster. If the
	// connection string uses this Uniform Resource Identifier (URI) format, you don't
	// need to append the seed list or change the URI if the nodes change. Use this URI
	// format if your driver supports it. If it doesn't, use connectionStrings.private.
	// For Amazon Web Services (AWS) clusters, this resource returns this parameter
	// only if you enable custom DNS.
	Private *string `json:"private,omitempty"`

	// PrivateEndpoint List of private endpoint-aware connection strings that you can
	// use to connect to this cluster through a private endpoint. This parameter
	// returns only if you deployed a private endpoint to all regions to which you
	// deployed this clusters' nodes.
	PrivateEndpoint *[]PrivateEndpoint `json:"privateEndpoint,omitempty"`

	// PrivateSrv Network peering connection strings for each interface Virtual Private
	// Cloud (VPC) endpoint that you configured to connect to this cluster. This
	// connection string uses the `mongodb+srv://` protocol. The resource returns this
	// parameter when someone creates a network peering connection to this cluster.
	// This protocol tells the application to look up the host seed list in the Domain
	// Name System (DNS). This list synchronizes with the nodes in a cluster. If the
	// connection string uses this Uniform Resource Identifier (URI) format, you don't
	// need to append the seed list or change the Uniform Resource Identifier (URI) if
	// the nodes change. Use this Uniform Resource Identifier (URI) format if your
	// driver supports it. If it doesn't, use `connectionStrings.private`. For Amazon
	// Web Services (AWS) clusters, this parameter returns only if you [enable custom
	// DNS](https://docs.atlas.mongodb.com/reference/api/aws-custom-dns-update/).
	PrivateSrv *string `json:"privateSrv,omitempty"`

	// Standard Public connection string that you can use to connect to this cluster.
	// This connection string uses the `mongodb://` protocol.
	Standard *string `json:"standard,omitempty"`

	// StandardSrv Public connection string that you can use to connect to this
	// cluster. This connection string uses the `mongodb+srv://` protocol.
	StandardSrv *string `json:"standardSrv,omitempty"`
}

type PrivateEndpoint struct {
	// ConnectionString Private endpoint-aware connection string that uses the
	// `mongodb://` protocol to connect to MongoDB Cloud through a private endpoint.
	ConnectionString *string `json:"connectionString,omitempty"`

	// Endpoints List that contains the private endpoints through which you connect to
	// MongoDB Cloud when you use
	// **connectionStrings.privateEndpoint[n].connectionString** or
	// **connectionStrings.privateEndpoint[n].srvConnectionString**.
	Endpoints *[]Endpoints `json:"endpoints,omitempty"`

	// SrvConnectionString Private endpoint-aware connection string that uses the
	// `mongodb+srv://` protocol to connect to MongoDB Cloud through a private
	// endpoint. The `mongodb+srv` protocol tells the driver to look up the seed list
	// of hosts in the Domain Name System (DNS). This list synchronizes with the nodes
	// in a cluster. If the connection string uses this Uniform Resource Identifier
	// (URI) format, you don't need to append the seed list or change the Uniform
	// Resource Identifier (URI) if the nodes change. Use this Uniform Resource
	// Identifier (URI) format if your application supports it. If it doesn't, use
	// connectionStrings.privateEndpoint[n].connectionString.
	SrvConnectionString *string `json:"srvConnectionString,omitempty"`

	// SrvShardOptimizedConnectionString Private endpoint-aware connection string
	// optimized for sharded clusters that uses the `mongodb+srv://` protocol to
	// connect to MongoDB Cloud through a private endpoint. If the connection string
	// uses this Uniform Resource Identifier (URI) format, you don't need to change the
	// Uniform Resource Identifier (URI) if the nodes change. Use this Uniform Resource
	// Identifier (URI) format if your application and Atlas cluster supports it. If it
	// doesn't, use and consult the documentation for
	// connectionStrings.privateEndpoint[n].srvConnectionString.
	SrvShardOptimizedConnectionString *string `json:"srvShardOptimizedConnectionString,omitempty"`

	// Type MongoDB process type to which your application connects. Use `MONGOD` for
	// replica sets and `MONGOS` for sharded clusters.
	Type *string `json:"type,omitempty"`
}

type Endpoints struct {
	// EndpointId Unique string that the cloud provider uses to identify the private
	// endpoint.
	EndpointId *string `json:"endpointId,omitempty"`

	// ProviderName Cloud provider in which MongoDB Cloud deploys the private endpoint.
	ProviderName *string `json:"providerName,omitempty"`

	// Region Region where the private endpoint is deployed.
	Region *string `json:"region,omitempty"`
}

type V20250312ReplicationSpecs struct {
	// Id Unique 24-hexadecimal digit string that identifies the replication object for
	// a shard in a Cluster. If you include existing shard replication configurations
	// in the request, you must specify this parameter. If you add a new shard to an
	// existing Cluster, you may specify this parameter. The request deletes any
	// existing shards in the Cluster that you exclude from the request. This
	// corresponds to Shard ID displayed in the UI.
	Id *string `json:"id,omitempty"`

	// ZoneId Unique 24-hexadecimal digit string that identifies the zone in a Global
	// Cluster. This value can be used to configure Global Cluster backup policies.
	ZoneId *string `json:"zoneId,omitempty"`
}

// +kubebuilder:object:root=true
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster `json:"items"`
}
