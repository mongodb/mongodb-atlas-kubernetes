name: Build Container Image
description: Builds the operator container image for the given architecture
inputs:
  get-existing-cache:
    description: 'Get cache from the previous build'
    required: false
    default: 'false'
  platforms:
    description: The list of platforms for which the image will be built
    required: true
  version:
    description: The version of the operator will be built
    required: true
  certified_version:
    description: The certified version of the operator will be built
    default: ''
    required: false
  repository:
    description: The name of repository to build image
    required: true
  file:
    description: Name of the dockerfile relative to context
    required: false
    default: Dockerfile
  docker_username:
    description: The username to access the docker registry
    required: true
  docker_password:
    description: The password to access the docker registry
    required: true
  push_to_docker:
    description: Push image to docker.io
    required: false
    default: "true"
  push_to_quay:
    description: Also push image to quay.io
    required: false
    default: "false"
  quay_username:
    description: The username to access the docker registry
    required: false
  quay_password:
    description: The password to access the docker registry
    required: false
  forked:
    description: Flag to checkout source code from forked repository
    required: false
    default: "false"
  tags:
    description: A list of tags applied to the image
    required: true
  nix-build:
    description: The repo should be ran using nix
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - name: Check out code
      uses: actions/checkout@v4
      if: ${{ inputs.forked == false }}
      with:
        submodules: true
        fetch-depth: 0
    - name: Check out code for forked PR
      uses: actions/checkout@v4
      if: ${{ inputs.forked == true }}
      with:
        ref: ${{github.event.pull_request.head.sha}}
        repository: ${{github.event.pull_request.head.repo.full_name}}
        submodules: true
    - name: "Set up Docker Buildx"
      uses: docker/setup-buildx-action@v3
      with:
        platforms: ${{ inputs.platforms }}
        
    # Nix setup steps
    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@v13
      if: ${{ inputs.nix-build == 'true' }}

    - name: Setup Magic Nix Cache
      uses: DeterminateSystems/magic-nix-cache-action@v7
      if: ${{ inputs.nix-build == 'true' }}

    - name: Set up Nix Shell
      run: nix-shell --run 'go version'
      if: ${{ inputs.nix-build == 'true' }}
      shell: bash

    - name: Download Go build dependencies (Nix)
      run: nix-shell --run 'go mod download'
      if: ${{ inputs.nix-build == 'true' }}
      shell: bash

    - name: Build all platforms (Nix)
      env:
        VERSION: ${{ inputs.version }}
      run: nix-shell --run 'make all-platforms'
      if: ${{ inputs.nix-build == 'true' }}
      shell: bash

    # Non-Nix setup steps
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: "${{ github.workspace }}/go.mod"
        cache: false
      if: ${{ inputs.nix-build == 'false' }}

    - name: Setup cache
      if: ${{ inputs.get-existing-cache == 'false' && inputs.nix-build == 'false' }}
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-build-${{ hashFiles('**/go.sum', '**/go.mod') }}

    - name: Download go build dependencies (Non-Nix)
      shell: bash
      run: |
        go mod download
      if: ${{ inputs.nix-build == 'false' }}

    - name: Build all platforms (Non-Nix)
      shell: bash
      env:
        VERSION: ${{ inputs.version }}
      run: make all-platforms
      if: ${{ inputs.nix-build == 'false' }}

    - name: Login to docker registry
      if: ${{ inputs.push_to_docker == 'true' }}
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.docker_username }}
        password: ${{ inputs.docker_password }}
    - name: Login to quay.io registry
      if: ${{ inputs.push_to_quay == 'true' }}
      uses: docker/login-action@v3
      with:
        registry: quay.io
        username: ${{ inputs.quay_username }}
        password: ${{ inputs.quay_password }}

    - name: Build and Push Operator to ${{ inputs.tags }}
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ inputs.file }}
        build-args: VERSION=${{ inputs.version }}
        platforms: ${{ inputs.platforms }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        sbom: true
        push: true
        tags: ${{ inputs.tags }}
