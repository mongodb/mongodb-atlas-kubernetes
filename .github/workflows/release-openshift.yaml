name: Release Openshift Bundles
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version:"
        required: true
jobs:
  release-openshift:
    name: "Create Pull request for openshift release"
    environment: release
    runs-on: ubuntu-latest
    env:
      REPO_PATH: "operators/mongodb-atlas-kubernetes"
    strategy:
      fail-fast: false
      matrix:
        repository: ["mongodb-forks/community-operators", "mongodb-forks/community-operators-prod", "mongodb-forks/certified-operators"]
        include:
          - repository: "mongodb-forks/certified-operators"
            certified: true
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.AKO_RELEASER_APP_ID }}
          private-key: ${{ secrets.AKO_RELEASER_RSA_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: |
            mongodb-atlas-kubernetes
            mongodb-forks/community-operators
            mongodb-forks/community-operators-prod
            mongodb-forks/certified-operators
      - name: Clone/Checkout Atlas Operator
        uses: actions/checkout@v4
        with:
          path: "mongodb-atlas-kubernetes"
          fetch-depth: 0
      - name: Clone/Checkout releases repositories
        uses: actions/checkout@v4
        with:
          repository: ${{ matrix.repository }}
          ref: main
          path: ${{ matrix.repository }}
          token: ${{ steps.generate_token.outputs.token }}
      - name: Prepare version
        env:
          VERSION: ${{ github.event.inputs.version }}
          REPOSITORY: ${{ matrix.repository }}
        run: |
          cd $REPOSITORY
          
          # Sync fork
          gh auth setup-git
          gh repo set-default $REPOSITORY
          gh repo sync -b main
          
          mkdir -p "${REPO_PATH}/${VERSION}"

          cd ../../mongodb-atlas-kubernetes
          cp -r bundle.Dockerfile bundle/manifests bundle/metadata bundle/tests "../${REPOSITORY}/${REPO_PATH}/${VERSION}"
      - name: Configure non-certified release
        if: ${{ ! matrix.certified }}
        env:
          VERSION: ${{ github.event.inputs.version }}
          REPOSITORY: ${{ matrix.repository }}
        run: |
          echo "Configure non-certified release"
          cd "$REPOSITORY/$REPO_PATH"
          sed -i.bak 's/COPY bundle\/manifests/COPY manifests/' "${VERSION}/bundle.Dockerfile"
          sed -i.bak 's/COPY bundle\/metadata/COPY metadata/' "${VERSION}/bundle.Dockerfile"
          sed -i.bak 's/COPY bundle\/tests\/scorecard/COPY tests\/scorecard/' "${VERSION}/bundle.Dockerfile"
          rm "${VERSION}/bundle.Dockerfile.bak"
          
          yq e -i '.metadata.annotations.containerImage = "quay.io/" + .metadata.annotations.containerImage' \
            "${VERSION}"/manifests/mongodb-atlas-kubernetes.clusterserviceversion.yaml

          yq e -i '.spec.install.spec.deployments[0].spec.template.spec.containers[0].image = "quay.io/" + .spec.install.spec.deployments[0].spec.template.spec.containers[0].image' \
            "${VERSION}"/manifests/mongodb-atlas-kubernetes.clusterserviceversion.yaml

      - name: Certify Openshift images
        if: ${{ matrix.certified }}
        uses: ./mongodb-atlas-kubernetes/.github/actions/certify-openshift-images
        with:
          registry: quay.io
          registry_password: ${{ secrets.QUAY_PASSWORD }}
          repository: mongodb/mongodb-atlas-kubernetes-operator
          version: ${{ github.event.inputs.version }}
          rhcc_token: ${{ secrets.RH_CERTIFICATION_PYXIS_API_TOKEN }}
          rhcc_project: ${{ secrets.RH_CERTIFICATION_OSPID }}
          submit: false
      - name: Configure certified release
        if: ${{ matrix.certified }}
        env:
          VERSION: ${{ github.event.inputs.version }}
          REPOSITORY: ${{ matrix.repository }}
          IMAGE: quay.io/mongodb/mongodb-atlas-kubernetes-operator
        run: |
          echo -n "Determining SHA for arm64 ... "
          IMG_SHA_ARM64=$(docker manifest inspect quay.io/mongodb/mongodb-atlas-kubernetes-operator:${VERSION}-certified | \
          jq --raw-output '.manifests[] | select(.platform.architecture == "arm64") | .digest')
          echo ${IMG_SHA_ARM64}
          
          echo -n "Determining SHA for amd64 ... "
          IMG_SHA_AMD64=$(docker manifest inspect quay.io/mongodb/mongodb-atlas-kubernetes-operator:${VERSION}-certified | \
          jq --raw-output '.manifests[] | select(.platform.architecture == "amd64") | .digest')
          echo ${IMG_SHA_AMD64}
          
          # Replace deployment image version with SHA256
          value="${IMG_SHA_AMD64}" yq e -i '.spec.install.spec.deployments[0].spec.template.spec.containers[0].image = "quay.io/mongodb/mongodb-atlas-kubernetes-operator@" + env(value)' \
          "${REPOSITORY}/$REPO_PATH/${VERSION}/manifests/mongodb-atlas-kubernetes.clusterserviceversion.yaml"
        
          # set related images
          yq e -i '.spec = { "relatedImages": [ { "name": "mongodb-atlas-kubernetes-operator-arm64" }, { "name": "mongodb-atlas-kubernetes-operator-amd64" } ] } + .spec' \
          "${REPOSITORY}/$REPO_PATH/${VERSION}/manifests/mongodb-atlas-kubernetes.clusterserviceversion.yaml"
          
          value="${IMG_SHA_ARM64}" yq e -i '.spec.relatedImages[0].image = "quay.io/mongodb/mongodb-atlas-kubernetes-operator@" + env(value)' \
          "${REPOSITORY}/$REPO_PATH/${VERSION}/manifests/mongodb-atlas-kubernetes.clusterserviceversion.yaml"
          
          value="${IMG_SHA_AMD64}" yq e -i '.spec.relatedImages[1].image = "quay.io/mongodb/mongodb-atlas-kubernetes-operator@" + env(value)' \
          "${REPOSITORY}/$REPO_PATH/${VERSION}/manifests/mongodb-atlas-kubernetes.clusterserviceversion.yaml"
          
          # set containerImage annotation
          value="${IMG_SHA_AMD64}" yq e -i '.metadata.annotations.containerImage = "quay.io/mongodb/mongodb-atlas-kubernetes-operator@" + env(value)' \
          "${REPOSITORY}/$REPO_PATH/${VERSION}/manifests/mongodb-atlas-kubernetes.clusterserviceversion.yaml"
        
          # set openshift versions
          yq e -i '.annotations = .annotations + { "com.redhat.openshift.versions": "v4.8" }' "${REPOSITORY}/$REPO_PATH/${VERSION}/metadata/annotations.yaml"
      - name: Push Changes & Open PR
        env:
          VERSION: ${{ github.event.inputs.version }}
          REPOSITORY: ${{ matrix.repository }}
          ASSIGNEES: igor-karpukhin,helderjs,josvazg,roothorp,s-urbaniak
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          cd "$REPOSITORY/$REPO_PATH"
          
          # configure git user
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          # commit, push
          git checkout -b "mongodb-atlas-operator-community-${VERSION}"
          git add "${VERSION}"
          git status
          git commit -m "MongoDB Atlas Operator ${VERSION}" --signoff
          git push origin "mongodb-atlas-operator-community-${VERSION}"
          
          # open PR
          #gh pr create \
          #    --title "operator mongodb-atlas-kubernetes (${VERSION})" \
          #    --assignee "${ASSIGNEES}"
