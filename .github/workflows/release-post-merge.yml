# GitHub workflow for createing release.
# Trigger release branch should be merge into main
# TODO add e2e/smoke test for autogen configuration

name: Create Release.

on:
  pull_request:
    types: [ closed ]
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (Be sure `Release-branch` is successful):"
        required: true

jobs:
  create-release:
    name: Create Release
    if: (github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.sha, 'release')) || github.event.inputs.version != ''
    runs-on: ubuntu-latest
    env:
      DOCKER_RELEASE_REPO: mongodb/mongodb-atlas-kubernetes-operator
      REDHAT_SCAN_RELEASE_REGISTRY: scan.connect.redhat.com
      REDHAT_SCAN_OPERATOR_REPO: ospid-4b67df2e-b2d2-42ef-994e-e35dcff33ad4/mongodb-atlas-kubernetes-operator
      REDHAT_SCAN_BUNDLE_REPO: ospid-c531b655-554d-4c70-b592-c64723a5b840/mongodb-atlas-kubernetes-operator-bundle
      REDHAT_RELEASE_REGISTRY: registry.connect.redhat.com
      REDHAT_OPERATOR_REPO: mongodb/mongodb-atlas-kubernetes-operator
      QUAY_RELEASE_REGISTRY: quay.io
      QUAY_OPERATOR_REPO: mongodb/mongodb-atlas-kubernetes-operator
      QUAY_ROBOT_NAME: mongodb+mongodb_atlas_kubernetes
    steps:
      - name: Print Env and Get version
        id: tag
        env:
          BRANCH: ${{ github.event.pull_request.head.sha }}
          VERSION: ${{ github.event.inputs.version }}
        run: |
          version=$VERSION
          if [[ "$version" == "" ]]; then
            version=$(echo $BRANCH | awk -F '/' '{print $2}')
          fi

          echo "VERSION:$version"
          tag="v${version}"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3.1.0
        with:
          submodules: true
          fetch-depth: 0 #needs for tags

      - name: Create configuration package
        run: |
          set -x
          tar czvf atlas-operator-all-in-one-${{ steps.tag.outputs.version }}.tar.gz -C deploy all-in-one.yaml

      - name: Login to docker registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Prepare docker image tag
        id: prepare-docker-image-tag
        run: |
          REPOSITORY=${{ env.DOCKER_RELEASE_REPO }}
          TAG=${{ steps.tag.outputs.version }}
          TAGS="${REPOSITORY}:${TAG}"
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
      - name: Push Atlas Operator to Registry
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.prepare-docker-image-tag.outputs.tags }}
          build-args: VERSION=${{ steps.tag.outputs.tag }}

      - name: Login to Quay registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.QUAY_RELEASE_REGISTRY  }}
          username: ${{ env.QUAY_ROBOT_NAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Prepare docker Quay image tag
        id: prepare-quay-image-tag
        run: |
          REGISTRY=${{ env.QUAY_RELEASE_REGISTRY }}
          REPOSITORY=${{ env.QUAY_OPERATOR_REPO }}
          TAG=${{ steps.tag.outputs.version }}
          TAGS="${REGISTRY}/${REPOSITORY}:${TAG}"
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
      - name: Push Atlas Operator to Quay Registry
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.prepare-quay-image-tag.outputs.tags }}
          build-args: VERSION=${{ steps.tag.outputs.tag }}

#      - name: Now Prepare RedHadConnect image
#        uses: ./.github/actions/gen-install-scripts
#        with:
#          IMAGE_URL: ${{ env.REDHAT_RELEASE_REGISTRY }}/${{ env.REDHAT_OPERATOR_REPO }}:${{ env.VERSION }}
#          VERSION: ${{ env.VERSION }}
#          ENV: prod
#      - name: Login to RedHat registry
#        uses: docker/login-action@v2
#        with:
#          registry: ${{ env.REDHAT_SCAN_RELEASE_REGISTRY }}
#          username: unused
#          password: ${{ secrets.REDHAT_REGISTRY_PASSWORD }}
#      - name: Prepare docker RedHat image tag
#        id: prepare-redhat-image-tag
#        run: |
#          REPOSITORY=${{ env.REDHAT_SCAN_OPERATOR_REPO }}
#          TAG=${{ steps.tag.outputs.version }}
#          TAGS="${REPOSITORY}:${TAG}"
#          echo "tags=$TAGS" >> $GITHUB_OUTPUT
#      - name: Push Atlas Operator to RedHat Connect
#        uses: docker/build-push-action@v3
#        with:
#          context: .
#          push: true
#          tags: ${{ steps.prepare-redhat-image-tag.outputs.tags }}
#          labels: version=${{ steps.tag.outputs.version }}
#          build_args: VERSION=${{ steps.tag.outputs.tag }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          release_name: ${{ steps.tag.outputs.tag }}
          body_path: docs/release-notes/release-notes.md
          draft: true
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./atlas-operator-all-in-one-${{ steps.tag.outputs.version }}.tar.gz
          asset_name: atlas-operator-all-in-one-${{ steps.tag.outputs.version }}.tar.gz
          asset_content_type: application/tgz

# TODO RedHad autopublish does not work. need to push bundles manually for now