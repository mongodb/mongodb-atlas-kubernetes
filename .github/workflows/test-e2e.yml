name: E2E tests

on:
  workflow_call:
  workflow_dispatch:

env:
  MCLI_OPS_MANAGER_URL: "https://cloud-qa.mongodb.com/"
  MCLI_PUBLIC_API_KEY: ${{ secrets.ATLAS_PUBLIC_KEY }}
  MCLI_PRIVATE_API_KEY: ${{ secrets.ATLAS_PRIVATE_KEY }}
  MCLI_ORG_ID: ${{ secrets.ATLAS_ORG_ID }}

jobs:
  prepare-e2e:
    runs-on: ubuntu-latest
    outputs:
      test_matrix: ${{ steps.compute.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - name: Compute K8s matrix/versions for testing
        id: compute
        run: |
          matrix='["v1.30.10-kind"]'
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            matrix='["v1.30.10-kind", "v1.32.2-kind"]'
          fi
          echo "matrix=${matrix}" >> "${GITHUB_OUTPUT}"

  prepare-e2e-image:
    runs-on: ubuntu-latest
    outputs:
      image_url: ${{ steps.set_image_url.outputs.image_url }}
    env:
      REPO: ghcr.io/${{ github.repository_owner }}/mongodb-atlas-kubernetes-operator-prerelease
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      
      - name: Prepare image tag
        id: set_tag
        uses: ./.github/actions/set-tag
      
      - name: Prepare image url for GitHub Container Registry
        id: set_image_url
        run: |
          echo "image_url=${REPO}:${{ steps.set_tag.outputs.tag }}" >> "$GITHUB_OUTPUT"

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push image to GitHub Container Registry
        uses: ./.github/actions/build-push-image
        with:
          file: fast.Dockerfile
          repository: ${{ env.REPO }}
          version: ${{ steps.set_tag.outputs.tag }}
          tags: ${{ steps.set_image_url.outputs.image_url }}
          platforms: linux/amd64,linux/arm64
          push_to_docker: false

  e2e:
    needs: [prepare-e2e]
    runs-on: ubuntu-latest
    environment: test
    strategy:
      fail-fast: false
      matrix:
        k8s: ${{ fromJson(needs.prepare-e2e.outputs.test_matrix) }}
        test: 
          [
            "free-tier",
          ]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      
      - name: Install devbox
        uses: jetify-com/devbox-install-action@v0.13.0
        with:
          enable-cache: 'true'

      - name: Generate kustomized all-in-one install configs
        uses: ./.github/actions/gen-install-scripts
        with:
          ENV: dev
          VERSION: dev

      - name: Extract k8s version/platform
        id: extract
        run: |
          echo "k8s_version=$(echo '${{ matrix.k8s }}' | awk -F '-' '{print $1}')" >> $GITHUB_OUTPUT
          echo "k8s_platform=$(echo '${{ matrix.k8s }}' | awk -F '-' '{print $2}')" >> $GITHUB_OUTPUT

      - name: Setup kind cluster
        if: ${{ steps.extract.outputs.k8s_platform == 'kind' }}
        uses: helm/kind-action@v1.12.0
        with:
          version: v0.26.0
          config: test/helper/e2e/config/kind.yaml
          node_image: kindest/node:${{ steps.extract.outputs.k8s_version }}
          cluster_name: ${{ matrix.test }}-${{ matrix.k8s }}
          wait: 180s

      - name: Print Kubernetes version
        run: devbox run -- kubectl version

      - name: Apply CRDs
        run: devbox run -- kubectl apply -f deploy/crds

      - name: Run CI E2E tests
        run: devbox run -- ./scripts/launch-ci-e2e.sh
        env:
          TEST_NAME: ${{ matrix.test }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_ACCOUNT_ARN_LIST: ${{ secrets.AWS_ACCOUNT_ARN_LIST }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          GCP_SA_CRED: ${{ secrets.GCP_SA_CRED }}
          DATADOG_KEY: ${{ secrets.DATADOG_KEY }}
          PAGER_DUTY_SERVICE_KEY: ${{ secrets.PAGER_DUTY_SERVICE_KEY }}

      - name: Upload logs on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: output/**
