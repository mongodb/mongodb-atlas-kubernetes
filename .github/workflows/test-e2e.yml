name: E2E tests.

on:
  workflow_call:
    inputs:
      forked:
        type: boolean
        required: false
        default: false

jobs:
  prepare-e2e:
    name: Prepare E2E configuration and image
    runs-on: ubuntu-latest
    env:
      # uncomment the below for local testing
      # DOCKER_REPO: ${{ env.DOCKER_REGISTRY }}/mongodb-atlas-kubernetes-operator
      DOCKER_REPO: mongodb/mongodb-atlas-kubernetes-operator-prerelease
    steps:
      - if: ${{ inputs.forked == false }}
        name: Check out code
        uses: actions/checkout@v3.0.0
        with:
          fetch-depth: 0 # required for tags

      - if: ${{ inputs.forked == true }}
        name: Check out code
        uses: actions/checkout@v3.0.0
        with:
          ref: ${{github.event.pull_request.head.sha}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          fetch-depth: 0 # required for tags

      - name: Prepare tag
        id: prepare
        uses: ./.github/actions/set-tag

      - name: Push Atlas Operator to Registry
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ env.DOCKER_REPO }}
          registry: ${{ env.DOCKER_REGISTRY }}
          tags: ${{ steps.prepare.outputs.tag }}

  e2e:
    name: E2E tests
    needs: prepare-e2e
    runs-on: ubuntu-latest
    env:
      # uncomment the below for local testing
      # DOCKER_REPO: ${{ env.DOCKER_REGISTRY }}/mongodb-atlas-kubernetes-operator
      DOCKER_REGISTRY: docker.io
      DOCKER_BUNDLES_REPO: mongodbinternal/mongodb-atlas-kubernetes-bundles-prerelease
      DOCKER_REPO: mongodb/mongodb-atlas-kubernetes-operator-prerelease
    strategy:
      fail-fast: false
      matrix:
        # k8s: ["1.17-kind", "1.19-kind", "1.17-opeshift"] # <supported platform version>-<platform>
        k8s: [ "v1.21.1-kind" ] # <K8sGitVersion>-<Platform>
        test:
          [
              "cluster-ns",
              "cluster-wide",
              "bundle-test",
              "helm-ns",
              "helm-wide",
              "helm-update",
              "serverless-instance",
              "multinamespaced",
              "privatelink",
              "integration-ns",
              "x509auth",
              "long-run",
              "networkpeering",
              "cloud-access-role",
              "deployment-annotations-ns",
          ]

    steps:
      - if: ${{ inputs.forked == false }}
        name: Check out code
        uses: actions/checkout@v3.0.0
        with:
          # Make sure we also get the helm-charts submodule!
          submodules: recursive

      - if: ${{ inputs.forked == true }}
        name: Check out code
        uses: actions/checkout@v3.0.0
        with:
          ref: ${{github.event.pull_request.head.sha}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
          # Make sure we also get the helm-charts submodule!
          submodules: recursive

      - name: Prepare tag
        id: prepare
        uses: ./.github/actions/set-tag

      - name: Generate configuration for the tests
        uses: ./.github/actions/gen-install-scripts
        with:
          IMAGE_URL: ${{ env.DOCKER_REPO }}:${{ steps.prepare.outputs.tag }}
          VERSION: ${{ steps.prepare.outputs.tag }}
          ENV: dev

      - name: Change path for the test
        run: |
          awk '{gsub(/cloud.mongodb.com/, "cloud-qa.mongodb.com", $0); print}' bundle/manifests/mongodb-atlas-kubernetes.clusterserviceversion.yaml > tmp && mv tmp bundle/manifests/mongodb-atlas-kubernetes.clusterserviceversion.yaml

      - name: Push bundle-image for the test
        if: ${{ matrix.test == 'openshift' || matrix.test == 'bundle-test' && !env.ACT }}
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ env.DOCKER_BUNDLES_REPO }}
          registry: ${{ env.DOCKER_REGISTRY }}
          tags: ${{ steps.prepare.outputs.tag }}
          dockerfile: bundle.Dockerfile

      - name: Set properties
        id: properties
        run: |
          version=$(echo ${{ matrix.k8s }} | awk -F "-" '{print $1}')
          platform=$(echo ${{ matrix.k8s }} | awk -F "-" '{print $2}')
          echo "::set-output name=k8s_version::$version"
          echo "::set-output name=k8s_platform::$platform"

      - name: Create k8s Kind Cluster
        if: ${{ steps.properties.outputs.k8s_platform == 'kind' && !env.ACT }}
        uses: helm/kind-action@v1.2.0
        with:
          version: v0.11.1
          config: test/e2e/config/kind.yaml
          node_image: kindest/node:${{ steps.properties.outputs.k8s_version }}
          cluster_name: ${{ matrix.test }}
          wait: 180s

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.18"


      - name: Install operator-sdk-v1.22.0
        run: |
          wget https://github.com/operator-framework/operator-sdk/releases/download/v1.22.0/operator-sdk_linux_amd64 -q
          chmod +x operator-sdk_linux_amd64 && sudo mv operator-sdk_linux_amd64 /usr/local/bin/operator-sdk
          operator-sdk version

      - name: Run e2e test
        env:
          MCLI_PUBLIC_API_KEY: ${{ secrets.ATLAS_PUBLIC_KEY }}
          MCLI_PRIVATE_API_KEY: ${{ secrets.ATLAS_PRIVATE_KEY }}
          MCLI_ORG_ID: ${{ secrets.ATLAS_ORG_ID}}
          MCLI_OPS_MANAGER_URL: "https://cloud-qa.mongodb.com/"
          IMAGE_URL: ${{ env.DOCKER_REPO }}:${{ steps.prepare.outputs.tag }}
          BUNDLE_IMAGE: "${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_BUNDLES_REPO}}:${{ steps.prepare.outputs.tag }}"
          K8S_PLATFORM: "${{ steps.properties.outputs.k8s_platform }}"
          K8S_VERSION: "${{ steps.properties.outputs.k8s_version }}"
          TEST_NAME: "${{ matrix.test }}"
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          OPENSHIFT_USER: ${{ secrets.OPENSHIFT_USER }}
          OPENSHIFT_PASS: ${{ secrets.OPENSHIFT_PASS }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          GCP_SA_CRED: ${{ secrets.GCP_SA_CRED }}
          DATADOG_KEY: ${{ secrets.DATADOG_KEY }}
        run: |
          helm version
          go version

          go install github.com/onsi/ginkgo/v2/ginkgo@v2.1.4 && \
          go install github.com/onsi/gomega/...

          # no `long-run`, no `broken` tests. `Long-run` tests run as a separate job
          [[ $TEST_NAME == 'long-run' ]]  &&  filter='long-run && !broken' || filter="$TEST_NAME"' && !long-run && !broken' && \
          echo 'Running: ginkgo --label-filter="${filter}" --timeout 120m --nodes=10 -v test/e2e/' && \
          ginkgo --label-filter="${filter}" --timeout 120m --nodes=10 -v test/e2e/

      - name: Upload operator logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: logs
          path: test/e2e/output/**
