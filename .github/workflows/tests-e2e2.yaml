name: Tests-E2Ev2

# This workflow is for running tests based on PR labels
# NOTE:
# The label filter app is used to select tests based on GitHub PR labels

on:
  workflow_call:
  workflow_dispatch:
    inputs:
      testLabels:
        description: 'Test labels to run'
        required: false
        default: '[]'
      branchName:
        description: 'The branch name to checkout'
        required: false
        default: 'main'

jobs:
  detect-tests:
    name: "Select tests to run"
    runs-on: ubuntu-latest
    outputs:
      e2e2_matrix: ${{ steps.set-matrix.outputs.e2e2_matrix }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branchName || github.head_ref }}

      - name: Setup GO
        uses: actions/setup-go@v5
        with:
          go-version-file: "${{ github.workspace }}/go.mod"

      - name: Install Ginkgo
        run: go install github.com/onsi/ginkgo/v2/ginkgo@latest

      - name: Get test labels from PR or input
        env:
          TEST_LABELS: ${{ github.event.inputs.testLabels }}
        id: get-labels
        uses: actions/github-script@v7
        with:
          script: |
            if (context.eventName === 'pull_request') {
              prLabels = context.payload.pull_request.labels.map(label => label.name);
              console.log("PR Labels:", prLabels);
              return prLabels;
            }
            
            if (context.eventName === "workflow_dispatch") {
              inputLabels = process.env.TEST_LABELS;
              console.log("Input labels:", inputLabels);
              return inputLabels.split(",").map(label => label.trim()).filter(label => label !== "");
            }
            console.log("Not a PullRequest or WorkflowDispatch event skipping");
            return [];

      - name: List available Ginkgo test labels
        id: fetch-labels
        run: |
          E2E2_LABELS=$(cd ./test/e2e2 && ginkgo labels | sed 's/^e2e2: //' | jq -s -c '.[0]')

          echo "e2e2_labels=$E2E2_LABELS" >> $GITHUB_ENV
          
          echo "Available E2Ev2 Tests: $E2E2_LABELS"

      - name: Compute Test Matrix
        id: set-matrix
        env:
          PR_LABELS: ${{ steps.get-labels.outputs.result || '["test/e2e2/*"]' }}
          E2E2_LABELS: ${{ env.e2e2_labels }}
          USE_JSON: true
        run: |
          # Nightly runs all tests, overriding PR labels as '["test/e2e2/*"]'
          if [ "${{ github.ref }}" == "refs/heads/main" ];then
            PR_LABELS='["test/e2e2/*"]'
            echo "Nightly runs all tests"
          fi
          echo PR_LABELS=${{ env.PR_LABELS }}
          echo E2E2_LABELS=${{ env.E2E2_LABELS }}
          if [ "${PR_LABELS}" == '["test/e2e2/*"]' ]; then
            echo '{"e2e2":["all-e2e2-tests"]}' > result.json
          else
            make compute-labels
            ./bin/ginkgo-labels > result.json
          fi
          echo "E2E2 tests to execute $(cat result.json | jq -c .e2e2)"
          echo "e2e2_matrix=$(cat result.json | jq -c .e2e2)" >> $GITHUB_OUTPUT
  compute:
    needs: detect-tests
    name: "Compute test matrix for k8s versions"
    runs-on: ubuntu-latest
    outputs:
      test_matrix: ${{ steps.test.outputs.matrix }}
    steps:
      - id: test
        name: Compute test matrix for k8s versions
        run: |
          # Note the use of external single quotes to allow for double quotes at inline YAML array
          matrix='["v1.30.10-kind"]'
          # Nightly runs in both the newest and oldest supported Kubernetes versions
          if [ "${{ github.ref }}" == "refs/heads/main" ];then
            matrix='["v1.30.10-kind", "v1.32.2-kind"]'
            echo "Nightly runs oldest and newest Kubernetes supported versions"
          fi
          echo "matrix=${matrix}" >> "${GITHUB_OUTPUT}"
          cat "${GITHUB_OUTPUT}"

  run-e2e2-tests:
    needs:
      - detect-tests
      - compute
    environment: test
    if: ${{ needs.detect-tests.outputs.e2e2_matrix != '[]' && fromJSON(needs.detect-tests.outputs.e2e2_matrix) != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        test: ${{ fromJSON(needs.detect-tests.outputs.e2e2_matrix) }}
        k8s: ${{ fromJSON(needs.compute.outputs.test_matrix) }}
    runs-on: ubuntu-latest
    name: "e2e2: ${{ matrix.test }}"
    steps:
      - name: Get repo files from cache
        id: get-repo-files-from-cache
        uses: actions/cache@v4
        with:
          path: ./*
          key: ${{ github.sha }}

      - name: Checkout if cache repo files missed
        if: steps.get-repo-files-from-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          ref: ${{github.event.pull_request.head.sha}}
          submodules: true
          fetch-depth: 0

      - name: Install devbox
        uses: jetify-com/devbox-install-action@v0.13.0
        with:
          enable-cache: 'true'

      - name: Prepare tag
        id: prepare
        uses: ./.github/actions/set-tag
      - name: Set properties
        id: properties
        run: |
          version=$(echo ${{ matrix.k8s }} | awk -F "-" '{print $1}')
          platform=$(echo ${{ matrix.k8s }} | awk -F "-" '{print $2}')
          echo "k8s_version=$version" >> $GITHUB_OUTPUT
          echo "k8s_platform=$platform" >> $GITHUB_OUTPUT

      - name: Create k8s Kind Cluster
        if: ${{ steps.properties.outputs.k8s_platform == 'kind' && !env.ACT }}
        uses: helm/kind-action@v1.12.0
        with:
          version: v0.26.0
          config: test/helper/e2e/config/kind.yaml
          node_image: kindest/node:${{ steps.properties.outputs.k8s_version }}
          cluster_name: ${{ matrix.test }}
          wait: 180s

      - name: Print kubectl version
        run: |
          devbox run -- 'kubectl version'

      - name: Install CRDs if needed
        run: |
          devbox run -- 'make install-crds'

      - name: Run E2E2 test
        env:
          MCLI_PUBLIC_API_KEY: ${{ secrets.ATLAS_PUBLIC_KEY }}
          MCLI_PRIVATE_API_KEY: ${{ secrets.ATLAS_PRIVATE_KEY }}
          MCLI_ORG_ID: ${{ secrets.ATLAS_ORG_ID}}
          MCLI_OPS_MANAGER_URL: "https://cloud-qa.mongodb.com/"
          TEST_NAME: "${{ matrix.test }}"
          USE_KIND: false
        run: |
          echo "Using ENV: ${{ steps.select-env.outputs.ENV }}"
          label=${TEST_NAME}
          if [ "${TEST_NAME}" == "all-e2e2-tests" ]; then
            echo "Passing an empty label to run all tests"
            label=""
          fi
          devbox run -- make e2e2 label="${label}"          

      - name: Upload operator logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: output/**
