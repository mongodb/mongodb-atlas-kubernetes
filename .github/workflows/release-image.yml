name: Release Image

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., 1.2.3)"
        required: true
        type: string
      authors:
        description: "Comma-separated list of the release authors' emails"
        required: true
        type: string
      commit_sha:
        description: "Commit SHA to use for the image (e.g. 7c2a91 or latest)"
        required: false
        default: "latest"
        type: string
  push:
    branches:
      - '**'

permissions:
  contents: write
  pull-requests: write

jobs:
  release-image:
    runs-on: ubuntu-latest
    environment: release
    env:
      VERSION: test-0.0.0
      AUTHORS: andrei.pacurar@mongodb.com
      COMMIT_SHA: latest
      DOCKER_RELEASE_REPO: docker.io/andrpac/mongodb-atlas-kubernetes-operator
      DOCKER_PRERELEASE_REPO: docker.io/andrpac/mongodb-atlas-kubernetes-operator-prerelease
      DOCKER_SIGNATURE_REPO: docker.io/andrpac/signatures
      QUAY_RELEASE_REPO: quay.io/andrpac/mongodb-atlas-kubernetes-operator
      QUAY_PRERELEASE_REPO: quay.io/andrpac/mongodb-atlas-kubernetes-operator-prerelease

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate GitHub App Token
        id: generate_token
        uses: mongodb/apix-action/token@v8
        with:
          app-id: ${{ secrets.AKO_RELEASER_APP_ID }}
          private-key: ${{ secrets.AKO_RELEASER_RSA_KEY }}

      - name: Log in to Docker registry
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.ANDRPAC_DOCKER_USERNAME }}
          password: ${{ secrets.ANDRPAC_DOCKER_PASSWORD }}

      - name: Log in to Quay registry
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.ANDRPAC_QUAY_USERNAME }}
          password: ${{ secrets.ANDRPAC_QUAY_PASSWORD }}

      - name: Log in to Artifactory
        uses: docker/login-action@v3
        with:
          registry: artifactory.corp.mongodb.com
          username: ${{ secrets.MDB_ARTIFACTORY_USERNAME }}
          password: ${{ secrets.MDB_ARTIFACTORY_PASSWORD }}

      - name: Resolve commit SHA and tags
        id: tags
        run: |
          sha="${{ env.COMMIT_SHA }}"
          if [ "$sha" = "latest" ]; then
            sha=$(git rev-parse HEAD)
          fi
          short_sha="${sha:0:6}"
          promoted_tag="promoted-${short_sha}"
          release_tag="${{ env.VERSION }}"
          certified_tag="certified-${release_tag}"
          docker_image_url="${{ env.DOCKER_RELEASE_REPO }}:${release_tag}"
          quay_image_url="${{ env.QUAY_RELEASE_REPO }}:${release_tag}"
          quay_certified_image_url="${{ env.QUAY_RELEASE_REPO }}:${certified_tag}"
          echo "sha=${sha}" >> "$GITHUB_OUTPUT"
          echo "promoted_tag=${promoted_tag}" >> "$GITHUB_OUTPUT"
          echo "release_tag=${release_tag}" >> "$GITHUB_OUTPUT"
          echo "certified_tag=${certified_tag}" >> "$GITHUB_OUTPUT"
          echo "docker_image_url=${docker_image_url}" >> "$GITHUB_OUTPUT"
          echo "quay_image_url=${quay_image_url}" >> "$GITHUB_OUTPUT"
          echo "quay_certified_image_url=${quay_certified_image_url}" >> "$GITHUB_OUTPUT"

      - name: Generate deployment configurations
        uses: ./.github/actions/gen-install-scripts
        with:
          ENV: prod
          IMAGE_URL: ${{ steps.tags.outputs.docker_image_url }}

      - name: Create branch and push it
        id: generate_branch
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          export BRANCH="new-release/${VERSION}"
          export COMMIT_MESSAGE="Release ${VERSION}"
          git checkout -b $BRANCH
          git add -f ./deploy ./bundle bundle.Dockerfile docs/releases
          scripts/create-signed-commit.sh
          echo "BRANCH=$BRANCH" >> $GITHUB_OUTPUT
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_OUTPUT

      - name: Create PR
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          BRANCH: ${{ steps.generate_branch.outputs.BRANCH }}
          COMMIT_MESSAGE: ${{ steps.generate_branch.outputs.COMMIT_MESSAGE }}
        run: |
          gh pr create --head="${BRANCH}" \
          --title "${COMMIT_MESSAGE}" \
          --body "This is an autogenerated PR to prepare for the release"

      - name: Tag commit and push
        run: |
          git config user.name "ako-release-bot"
          git config user.email "ako-release-bot@users.noreply.github.com"
          git fetch origin --tags
          git tag -a "${{ env.VERSION }}" "${{ steps.tags.outputs.sha }}" -m "Release ${{ env.VERSION }}"
          git push origin "${{ env.VERSION }}"

      - name: Create configuration package
        run: |
          set -x
          tar czvf atlas-operator-all-in-one-${{ env.VERSION }}.tar.gz -C deploy all-in-one.yaml

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          body_path: docs/release-notes/release-notes-template.md
          draft: true
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./atlas-operator-all-in-one-${{ env.VERSION }}.tar.gz
          asset_name: atlas-operator-all-in-one-${{ env.VERSION }}.tar.gz
          asset_content_type: application/tgz