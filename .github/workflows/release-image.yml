name: Release Image

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., 1.2.3)"
        required: true
        type: string
      authors:
        description: "Comma-separated list of the release authors' emails"
        required: true
        type: string
      commit_sha:
        description: "Commit SHA to use for the image (e.g. 7c2a91 or latest)"
        required: false
        default: "latest"
        type: string

  push:
    branches:
      - '**'

permissions:
  contents: write
  pull-requests: write

jobs:
  resolve_commit_sha:
    name: Resolve Commit SHA
    runs-on: ubuntu-latest
    env:
      COMMIT_SHA: latest  # for testing; replace with "${{ inputs.commit_sha }}" later
    outputs:
      sha: ${{ steps.resolve.outputs.sha }}
    steps:
      - name: Checkout repo to access refs
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Resolve commit to check out
        id: resolve
        run: |
          if [ "${{ env.COMMIT_SHA }}" = "latest" ]; then
            branch="${GITHUB_REF#refs/heads/}"
            echo "Resolving latest commit on branch: $branch"
            git fetch origin "$branch"
            sha=$(git rev-parse origin/"$branch")
          else
            echo "Using specified commit SHA: ${{ env.COMMIT_SHA }}"
            sha="${{ env.COMMIT_SHA }}"
            git fetch origin "$sha"
          fi

          echo "Resolved commit SHA: $sha"
          echo "sha=$sha" >> "$GITHUB_OUTPUT"

  prepare_release:
    name: Release Image
    needs: resolve_commit_sha
    runs-on: ubuntu-latest
    environment: release
    env:
      VERSION: test-0.0.0
      AUTHORS: andrei.pacurar@mongodb.com
      COMMIT_SHA: ${{ needs.resolve_commit_sha.outputs.sha }}
      DOCKER_RELEASE_REPO: docker.io/andrpac/mongodb-atlas-kubernetes-operator
      DOCKER_PRERELEASE_REPO: docker.io/andrpac/mongodb-atlas-kubernetes-operator-prerelease
      DOCKER_SIGNATURE_REPO: docker.io/andrpac/signatures
      QUAY_RELEASE_REPO: quay.io/andrpac/mongodb-atlas-kubernetes-operator
      QUAY_PRERELEASE_REPO: quay.io/andrpac/mongodb-atlas-kubernetes-operator-prerelease

    steps:
      - name: Checkout resolved commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.COMMIT_SHA }}

      - name: Generate GitHub App Token
        id: generate_token
        uses: mongodb/apix-action/token@v8
        with:
          app-id: ${{ secrets.AKO_RELEASER_APP_ID }}
          private-key: ${{ secrets.AKO_RELEASER_RSA_KEY }}

      - name: Log in to Docker registry
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.ANDRPAC_DOCKER_USERNAME }}
          password: ${{ secrets.ANDRPAC_DOCKER_PASSWORD }}

      - name: Log in to Quay registry
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.ANDRPAC_QUAY_USERNAME }}
          password: ${{ secrets.ANDRPAC_QUAY_PASSWORD }}

      - name: Log in to Artifactory
        uses: docker/login-action@v3
        with:
          registry: artifactory.corp.mongodb.com
          username: ${{ secrets.MDB_ARTIFACTORY_USERNAME }}
          password: ${{ secrets.MDB_ARTIFACTORY_PASSWORD }}

      - name: Resolve commit SHA and tags
        id: tags
        run: |
          short_sha="${COMMIT_SHA:0:6}"
          promoted_tag="promoted-${short_sha}"
          release_tag="${VERSION}"
          certified_tag="certified-${release_tag}"
          docker_image_url="${DOCKER_RELEASE_REPO}:${release_tag}"
          quay_image_url="${QUAY_RELEASE_REPO}:${release_tag}"
          quay_certified_image_url="${QUAY_RELEASE_REPO}:${certified_tag}"

          echo "sha=${COMMIT_SHA}" >> "$GITHUB_OUTPUT"
          echo "promoted_tag=${promoted_tag}" >> "$GITHUB_OUTPUT"
          echo "release_tag=${release_tag}" >> "$GITHUB_OUTPUT"
          echo "certified_tag=${certified_tag}" >> "$GITHUB_OUTPUT"
          echo "docker_image_url=${docker_image_url}" >> "$GITHUB_OUTPUT"
          echo "quay_image_url=${quay_image_url}" >> "$GITHUB_OUTPUT"
          echo "quay_certified_image_url=${quay_certified_image_url}" >> "$GITHUB_OUTPUT"

      - name: Generate deployment configurations
        uses: ./.github/actions/gen-install-scripts
        with:
          ENV: prod
          IMAGE_URL: ${{ steps.tags.outputs.docker_image_url }}

      - name: Generate SDLC checklist files for released version
        run: make gen-sdlc-checklist

      - name: Create release branch with updates, tag new updates
        id: generate_branch
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          git config --global user.name "${{ steps.generate_token.outputs.user-name }}"
          git config --global user.email "${{ steps.generate_token.outputs.user-email }}"

          export BRANCH="new-release/${VERSION}"
          export COMMIT_MESSAGE="Release ${VERSION}"

          git checkout -b "$BRANCH"
          git add -f ./deploy ./bundle bundle.Dockerfile docs/releases
          scripts/create-signed-commit.sh

          gh pr create --head="$BRANCH" \
            --title "$COMMIT_MESSAGE" \
            --body "This is an autogenerated PR to prepare for the release"

          git tag -a "${VERSION}" -m "Release ${VERSION}"
          git push origin "${VERSION}"

          echo "release_ref=$BRANCH" >> "$GITHUB_OUTPUT"

  publish_release:
    name: Build & Publish Release
    needs: prepare_release
    runs-on: ubuntu-latest
    environment: release
    env:
      VERSION: test-0.0.0
      RELEASE_REF: ${{ needs.prepare_release.outputs.release_ref }}
    steps:
      - name: Generate GitHub App Token
        id: token2
        uses: mongodb/apix-action/token@v8
        with:
          app-id: ${{ secrets.AKO_RELEASER_APP_ID }}
          private-key: ${{ secrets.AKO_RELEASER_RSA_KEY }}

      - name: Checkout the release commit
        uses: actions/checkout@v4
        with:
          ref: ${{ env.RELEASE_REF }}
          fetch-depth: 0

      - name: Create configuration package
        run: |
          tar czvf atlas-operator-all-in-one-${VERSION}.tar.gz -C deploy all-in-one.yaml

      - name: Create GitHub Release and Upload Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: ${{ env.VERSION }}
          token: ${{ steps.token2.outputs.token }}
          files: ./atlas-operator-all-in-one-${{ env.VERSION }}.tar.gz
          target_commitish: ${{ env.RELEASE_REF }}
          generate_release_notes: true
          prerelease: false
          draft: true