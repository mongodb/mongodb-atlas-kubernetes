// Code generated by crd2go. DO NOT EDIT.

package v1

import metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

func init() {
	SchemeBuilder.Register(&Group{})
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type SearchIndex struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   SearchIndexSpec   `json:"spec,omitempty"`
	Status SearchIndexStatus `json:"status,omitempty"`
}

type SearchIndexSpec struct {
	// V20231115 The spec of the searchindex resource for version v20231115.
	V20231115 *SearchIndexSpecV20231115 `json:"v20231115,omitempty"`
}

type SearchIndexSpecV20231115 struct {
	// Entry The entry fields of the searchindex resource spec. These fields can be set
	// for creating and updating searchindexes.
	Entry *SearchIndexSpecV20231115Entry `json:"entry,omitempty"`

	// Parameters The parameter fields of the searchindex resource spec. These fields
	// are used when creating searchindexes only.
	Parameters *SearchIndexSpecV20231115Parameters `json:"parameters,omitempty"`
}

type SearchIndexSpecV20231115Entry struct {
	/*
	   Analyzer Specific pre-defined method chosen to convert database field text into searchable words. This conversion reduces the text of fields into the smallest units of text. These units are called a **term** or **token**. This process, known as tokenization, involves a variety of changes made to the text in fields:

	     - extracting words
	     - removing punctuation
	     - removing accents
	     - changing to lowercase
	     - removing common words
	     - reducing words to their root form (stemming)
	     - changing words to their base form (lemmatization)
	       MongoDB Cloud uses the selected process to build the Atlas Search index.
	*/
	Analyzer *string `json:"analyzer,omitempty"`

	// Analyzers List of user-defined methods to convert database field text into
	// searchable words.
	Analyzers *[]SearchIndexSpecV20231115EntryAnalyzers `json:"analyzers,omitempty"`

	// CollectionName Human-readable label that identifies the collection that contains
	// one or more Atlas Search indexes.
	CollectionName string `json:"collectionName"`

	// Database Human-readable label that identifies the database that contains the
	// collection with one or more Atlas Search indexes.
	Database string `json:"database"`

	// Fields Settings that configure the fields, one per object, to index. You must
	// define at least one "vector" type field. You can optionally define "filter" type
	// fields also.
	Fields *[]SearchIndexSpecV20231115EntryFields `json:"fields,omitempty"`

	// Mappings Index specifications for the collection's fields.
	Mappings *SearchIndexSpecV20231115EntryMappings `json:"mappings,omitempty"`

	// Name Human-readable label that identifies this index. Within each namespace,
	// names of all indexes in the namespace must be unique.
	Name string `json:"name"`

	// SearchAnalyzer Method applied to identify words when searching this index.
	SearchAnalyzer *string `json:"searchAnalyzer,omitempty"`

	// StoredSource Flag that indicates whether to store all fields (true) on Atlas
	// Search. By default, Atlas doesn't store (false) the fields on Atlas Search.
	// Alternatively, you can specify an object that only contains the list of fields
	// to store (include) or not store (exclude) on Atlas Search. To learn more, see
	// documentation.
	StoredSource *SearchIndexSpecV20231115EntryStoredSource `json:"storedSource,omitempty"`

	// Synonyms Rule sets that map words to their synonyms in this index.
	Synonyms *[]SearchIndexSpecV20231115EntrySynonyms `json:"synonyms,omitempty"`

	// Type Type of the index. Default type is search.
	Type *string `json:"type,omitempty"`
}

type SearchIndexSpecV20231115EntryAnalyzers struct {
	// CharFilters Filters that examine text one character at a time and perform
	// filtering operations.
	CharFilters *[]SearchIndexSpecV20231115EntryAnalyzersCharFilters `json:"charFilters,omitempty"`

	/*
	   Name Human-readable name that identifies the custom analyzer. Names must be unique within an index, and must not start with any of the following strings:
	   - `lucene.`
	   - `builtin.`
	   - `mongodb.`
	*/
	Name string `json:"name"`

	/*
	   TokenFilters Filter that performs operations such as:

	   - Stemming, which reduces related words, such as "talking", "talked", and "talks" to their root word "talk".

	   - Redaction, the removal of sensitive information from public documents.
	*/
	TokenFilters *[]SearchIndexSpecV20231115EntryAnalyzersTokenFilters `json:"tokenFilters,omitempty"`

	// Tokenizer Tokenizer that you want to use to create tokens. Tokens determine how
	// Atlas Search splits up text into discrete chunks for indexing.
	Tokenizer SearchIndexSpecV20231115EntryAnalyzersTokenizer `json:"tokenizer"`
}

type SearchIndexSpecV20231115EntryAnalyzersCharFilters struct{}

type SearchIndexSpecV20231115EntryAnalyzersTokenFilters struct{}

type SearchIndexSpecV20231115EntryAnalyzersTokenizer struct {
	// Group Index of the character group within the matching expression to extract
	// into tokens. Use `0` to extract all character groups.
	Group *int `json:"group,omitempty"`

	// MaxGram Characters to include in the longest token that Atlas Search creates.
	MaxGram *int `json:"maxGram,omitempty"`

	// MaxTokenLength Maximum number of characters in a single token. Tokens greater
	// than this length are split at this length into multiple tokens.
	MaxTokenLength *int `json:"maxTokenLength,omitempty"`

	// MinGram Characters to include in the shortest token that Atlas Search creates.
	MinGram *int `json:"minGram,omitempty"`

	// Pattern Regular expression to match against.
	Pattern *string `json:"pattern,omitempty"`

	// Type Human-readable label that identifies this tokenizer type.
	Type *string `json:"type,omitempty"`
}

type SearchIndexSpecV20231115EntryFields struct{}

type SearchIndexSpecV20231115EntryMappings struct {
	// Dynamic Flag that indicates whether the index uses dynamic or static mappings.
	// Required if **mappings.fields** is omitted.
	Dynamic *bool `json:"dynamic,omitempty"`

	// Fields One or more field specifications for the Atlas Search index. Required if
	// **mappings.dynamic** is omitted or set to **false**.
	Fields *SearchIndexSpecV20231115EntryMappingsFields `json:"fields,omitempty"`
}

type SearchIndexSpecV20231115EntryMappingsFields struct{}

type SearchIndexSpecV20231115EntryStoredSource struct{}

type SearchIndexSpecV20231115EntrySynonyms struct {
	// Analyzer Specific pre-defined method chosen to apply to the synonyms to be
	// searched.
	Analyzer string `json:"analyzer"`

	// Name Human-readable label that identifies the synonym definition. Each
	// **synonym.name** must be unique within the same index definition.
	Name string `json:"name"`

	// Source Data set that stores the mapping one or more words map to one or more
	// synonyms of those words.
	Source SearchIndexSpecV20231115EntrySynonymsSource `json:"source"`
}

type SearchIndexSpecV20231115EntrySynonymsSource struct {
	// Collection Human-readable label that identifies the MongoDB collection that
	// stores words and their applicable synonyms.
	Collection string `json:"collection"`
}

type SearchIndexSpecV20231115Parameters struct {
	// ClusterName Name of the cluster that contains the collection on which to create
	// an Atlas Search index.
	ClusterName *string `json:"clusterName,omitempty"`

	/*
	   GroupId Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

	   **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.
	*/
	GroupId *string `json:"groupId,omitempty"`
}

type SearchIndexStatus struct {
	// Conditions Represents the latest available observations of a resource's current
	// state.
	Conditions *[]SearchIndexStatusConditions `json:"conditions,omitempty"`

	// V20231115 The last observed Atlas state of the searchindex resource for version
	// v20231115.
	V20231115 *SearchIndexStatusV20231115 `json:"v20231115,omitempty"`
}

type SearchIndexStatusConditions struct {
	// LastTransitionTime Last time the condition transitioned from one status to
	// another.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`

	// Message A human readable message indicating details about the transition.
	Message *string `json:"message,omitempty"`

	// ObservedGeneration observedGeneration represents the .metadata.generation that
	// the condition was set based upon.
	ObservedGeneration *int `json:"observedGeneration,omitempty"`

	// Reason The reason for the condition's last transition.
	Reason *string `json:"reason,omitempty"`

	// Status Status of the condition, one of True, False, Unknown.
	Status string `json:"status"`

	// Type Type of condition.
	Type string `json:"type"`
}

type SearchIndexStatusV20231115 struct {
	// IndexID Unique 24-hexadecimal digit string that identifies this Atlas Search
	// index.
	IndexID *string `json:"indexID,omitempty"`

	/*
	   Status Condition of the search index when you made this request.

	   | Status | Index Condition |

	   	|---|---|
	   	| IN_PROGRESS | Atlas is building or re-building the index after an edit. |
	   	| STEADY | You can use this search index. |
	   	| FAILED | Atlas could not build the index. |
	   	| MIGRATING | Atlas is upgrading the underlying cluster tier and migrating indexes. |
	   	| PAUSED | The cluster is paused. |
	*/
	Status *string `json:"status,omitempty"`
}
