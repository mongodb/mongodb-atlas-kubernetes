// Code generated by crd2go. DO NOT EDIT.

package v1

import (
	k8s "github.com/josvazg/crd2go/k8s"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

func init() {
	SchemeBuilder.Register(&NetworkPeeringConnection{})
	SchemeBuilder.Register(&NetworkPeeringConnectionList{})
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

type NetworkPeeringConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   NetworkPeeringConnectionSpec   `json:"spec,omitempty"`
	Status NetworkPeeringConnectionStatus `json:"status,omitempty"`
}

type NetworkPeeringConnectionSpec struct {
	// V20250312 The spec of the networkpeeringconnection resource for version
	// v20250312.
	V20250312 *NetworkPeeringConnectionSpecV20250312 `json:"v20250312,omitempty"`
}

type NetworkPeeringConnectionSpecV20250312 struct {
	// Entry The entry fields of the networkpeeringconnection resource spec. These
	// fields can be set for creating and updating networkpeeringconnections.
	Entry *NetworkPeeringConnectionSpecV20250312Entry `json:"entry,omitempty"`

	/*
	   GroupId Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

	   **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.
	*/
	GroupId *string `json:"groupId,omitempty"`

	/*
	   GroupRef A reference to a "Group" resource.
	   The value of "$.status.v20250312.groupId" will be used to set "groupId".
	   Mutually exclusive with the "groupId" property.
	*/
	GroupRef *k8s.LocalReference `json:"groupRef,omitempty"`
}

type NetworkPeeringConnectionSpecV20250312Entry struct {
	// AccepterRegionName Amazon Web Services (AWS) region where the Virtual Peering
	// Connection (VPC) that you peered with the MongoDB Cloud VPC resides. The
	// resource returns `null` if your VPC and the MongoDB Cloud VPC reside in the same
	// region.
	AccepterRegionName *string `json:"accepterRegionName,omitempty"`

	// AwsAccountId Unique twelve-digit string that identifies the Amazon Web Services
	// (AWS) account that owns the VPC that you peered with the MongoDB Cloud VPC.
	AwsAccountId *string `json:"awsAccountId,omitempty"`

	// AzureDirectoryId Unique string that identifies the Azure AD directory in which
	// the VNet peered with the MongoDB Cloud VNet resides.
	AzureDirectoryId *string `json:"azureDirectoryId,omitempty"`

	// AzureSubscriptionId Unique string that identifies the Azure subscription in
	// which the VNet you peered with the MongoDB Cloud VNet resides.
	AzureSubscriptionId *string `json:"azureSubscriptionId,omitempty"`

	// ContainerId Unique 24-hexadecimal digit string that identifies the MongoDB Cloud
	// network container that contains the specified network peering connection.
	ContainerId string `json:"containerId"`

	// GcpProjectId Human-readable label that identifies the GCP project that contains
	// the network that you want to peer with the MongoDB Cloud VPC.
	GcpProjectId *string `json:"gcpProjectId,omitempty"`

	// NetworkName Human-readable label that identifies the network to peer with the
	// MongoDB Cloud VPC.
	NetworkName *string `json:"networkName,omitempty"`

	// ProviderName Cloud service provider that serves the requested network peering
	// connection.
	ProviderName *string `json:"providerName,omitempty"`

	// ResourceGroupName Human-readable label that identifies the resource group in
	// which the VNet to peer with the MongoDB Cloud VNet resides.
	ResourceGroupName *string `json:"resourceGroupName,omitempty"`

	// RouteTableCidrBlock Internet Protocol (IP) addresses expressed in Classless
	// Inter-Domain Routing (CIDR) notation of the VPC's subnet that you want to peer
	// with the MongoDB Cloud VPC.
	RouteTableCidrBlock *string `json:"routeTableCidrBlock,omitempty"`

	// VnetName Human-readable label that identifies the VNet that you want to peer
	// with the MongoDB Cloud VNet.
	VnetName *string `json:"vnetName,omitempty"`

	// VpcId Unique string that identifies the VPC on Amazon Web Services (AWS) that
	// you want to peer with the MongoDB Cloud VPC.
	VpcId *string `json:"vpcId,omitempty"`
}

type NetworkPeeringConnectionStatus struct {
	// Conditions Represents the latest available observations of a resource's current
	// state.
	Conditions *[]metav1.Condition `json:"conditions,omitempty"`

	// V20250312 The last observed Atlas state of the networkpeeringconnection resource
	// for version v20250312.
	V20250312 *NetworkPeeringConnectionStatusV20250312 `json:"v20250312,omitempty"`
}

type NetworkPeeringConnectionStatusV20250312 struct {
	// ConnectionId Unique string that identifies the peering connection on AWS.
	ConnectionId *string `json:"connectionId,omitempty"`

	// ErrorMessage Details of the error returned when requesting a GCP network peering
	// resource. The resource returns `null` if the request succeeded.
	ErrorMessage *string `json:"errorMessage,omitempty"`

	// ErrorState Error message returned when a requested Azure network peering
	// resource returns `"status" : "FAILED"`. The resource returns `null` if the
	// request succeeded.
	ErrorState *string `json:"errorState,omitempty"`

	// ErrorStateName Type of error that can be returned when requesting an Amazon Web
	// Services (AWS) peering connection. The resource returns `null` if the request
	// succeeded.
	ErrorStateName *string `json:"errorStateName,omitempty"`

	// Id Unique 24-hexadecimal digit string that identifies the network peering
	// connection.
	Id *string `json:"id,omitempty"`

	// Status State of the network peering connection at the time you made the request.
	Status *string `json:"status,omitempty"`

	// StatusName State of the network peering connection at the time you made the
	// request.
	StatusName *string `json:"statusName,omitempty"`
}

// +kubebuilder:object:root=true
type NetworkPeeringConnectionList struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Items             []NetworkPeeringConnection `json:"items"`
}
