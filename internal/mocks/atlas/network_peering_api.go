// Code generated by mockery. DO NOT EDIT.

package atlas

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20231115004/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// NetworkPeeringApiMock is an autogenerated mock type for the NetworkPeeringApi type
type NetworkPeeringApiMock struct {
	mock.Mock
}

type NetworkPeeringApiMock_Expecter struct {
	mock *mock.Mock
}

func (_m *NetworkPeeringApiMock) EXPECT() *NetworkPeeringApiMock_Expecter {
	return &NetworkPeeringApiMock_Expecter{mock: &_m.Mock}
}

// CreatePeeringConnection provides a mock function with given fields: ctx, groupId, baseNetworkPeeringConnectionSettings
func (_m *NetworkPeeringApiMock) CreatePeeringConnection(ctx context.Context, groupId string, baseNetworkPeeringConnectionSettings *admin.BaseNetworkPeeringConnectionSettings) admin.CreatePeeringConnectionApiRequest {
	ret := _m.Called(ctx, groupId, baseNetworkPeeringConnectionSettings)

	if len(ret) == 0 {
		panic("no return value specified for CreatePeeringConnection")
	}

	var r0 admin.CreatePeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.BaseNetworkPeeringConnectionSettings) admin.CreatePeeringConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, baseNetworkPeeringConnectionSettings)
	} else {
		r0 = ret.Get(0).(admin.CreatePeeringConnectionApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_CreatePeeringConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePeeringConnection'
type NetworkPeeringApiMock_CreatePeeringConnection_Call struct {
	*mock.Call
}

// CreatePeeringConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - baseNetworkPeeringConnectionSettings *admin.BaseNetworkPeeringConnectionSettings
func (_e *NetworkPeeringApiMock_Expecter) CreatePeeringConnection(ctx interface{}, groupId interface{}, baseNetworkPeeringConnectionSettings interface{}) *NetworkPeeringApiMock_CreatePeeringConnection_Call {
	return &NetworkPeeringApiMock_CreatePeeringConnection_Call{Call: _e.mock.On("CreatePeeringConnection", ctx, groupId, baseNetworkPeeringConnectionSettings)}
}

func (_c *NetworkPeeringApiMock_CreatePeeringConnection_Call) Run(run func(ctx context.Context, groupId string, baseNetworkPeeringConnectionSettings *admin.BaseNetworkPeeringConnectionSettings)) *NetworkPeeringApiMock_CreatePeeringConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.BaseNetworkPeeringConnectionSettings))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_CreatePeeringConnection_Call) Return(_a0 admin.CreatePeeringConnectionApiRequest) *NetworkPeeringApiMock_CreatePeeringConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_CreatePeeringConnection_Call) RunAndReturn(run func(context.Context, string, *admin.BaseNetworkPeeringConnectionSettings) admin.CreatePeeringConnectionApiRequest) *NetworkPeeringApiMock_CreatePeeringConnection_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePeeringConnectionExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApiMock) CreatePeeringConnectionExecute(r admin.CreatePeeringConnectionApiRequest) (*admin.BaseNetworkPeeringConnectionSettings, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreatePeeringConnectionExecute")
	}

	var r0 *admin.BaseNetworkPeeringConnectionSettings
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreatePeeringConnectionApiRequest) (*admin.BaseNetworkPeeringConnectionSettings, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreatePeeringConnectionApiRequest) *admin.BaseNetworkPeeringConnectionSettings); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.BaseNetworkPeeringConnectionSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreatePeeringConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreatePeeringConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApiMock_CreatePeeringConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePeeringConnectionExecute'
type NetworkPeeringApiMock_CreatePeeringConnectionExecute_Call struct {
	*mock.Call
}

// CreatePeeringConnectionExecute is a helper method to define mock.On call
//   - r admin.CreatePeeringConnectionApiRequest
func (_e *NetworkPeeringApiMock_Expecter) CreatePeeringConnectionExecute(r interface{}) *NetworkPeeringApiMock_CreatePeeringConnectionExecute_Call {
	return &NetworkPeeringApiMock_CreatePeeringConnectionExecute_Call{Call: _e.mock.On("CreatePeeringConnectionExecute", r)}
}

func (_c *NetworkPeeringApiMock_CreatePeeringConnectionExecute_Call) Run(run func(r admin.CreatePeeringConnectionApiRequest)) *NetworkPeeringApiMock_CreatePeeringConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreatePeeringConnectionApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_CreatePeeringConnectionExecute_Call) Return(_a0 *admin.BaseNetworkPeeringConnectionSettings, _a1 *http.Response, _a2 error) *NetworkPeeringApiMock_CreatePeeringConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApiMock_CreatePeeringConnectionExecute_Call) RunAndReturn(run func(admin.CreatePeeringConnectionApiRequest) (*admin.BaseNetworkPeeringConnectionSettings, *http.Response, error)) *NetworkPeeringApiMock_CreatePeeringConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePeeringConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApiMock) CreatePeeringConnectionWithParams(ctx context.Context, args *admin.CreatePeeringConnectionApiParams) admin.CreatePeeringConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreatePeeringConnectionWithParams")
	}

	var r0 admin.CreatePeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreatePeeringConnectionApiParams) admin.CreatePeeringConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreatePeeringConnectionApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_CreatePeeringConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePeeringConnectionWithParams'
type NetworkPeeringApiMock_CreatePeeringConnectionWithParams_Call struct {
	*mock.Call
}

// CreatePeeringConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreatePeeringConnectionApiParams
func (_e *NetworkPeeringApiMock_Expecter) CreatePeeringConnectionWithParams(ctx interface{}, args interface{}) *NetworkPeeringApiMock_CreatePeeringConnectionWithParams_Call {
	return &NetworkPeeringApiMock_CreatePeeringConnectionWithParams_Call{Call: _e.mock.On("CreatePeeringConnectionWithParams", ctx, args)}
}

func (_c *NetworkPeeringApiMock_CreatePeeringConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.CreatePeeringConnectionApiParams)) *NetworkPeeringApiMock_CreatePeeringConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreatePeeringConnectionApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_CreatePeeringConnectionWithParams_Call) Return(_a0 admin.CreatePeeringConnectionApiRequest) *NetworkPeeringApiMock_CreatePeeringConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_CreatePeeringConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreatePeeringConnectionApiParams) admin.CreatePeeringConnectionApiRequest) *NetworkPeeringApiMock_CreatePeeringConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePeeringContainer provides a mock function with given fields: ctx, groupId, cloudProviderContainer
func (_m *NetworkPeeringApiMock) CreatePeeringContainer(ctx context.Context, groupId string, cloudProviderContainer *admin.CloudProviderContainer) admin.CreatePeeringContainerApiRequest {
	ret := _m.Called(ctx, groupId, cloudProviderContainer)

	if len(ret) == 0 {
		panic("no return value specified for CreatePeeringContainer")
	}

	var r0 admin.CreatePeeringContainerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.CloudProviderContainer) admin.CreatePeeringContainerApiRequest); ok {
		r0 = rf(ctx, groupId, cloudProviderContainer)
	} else {
		r0 = ret.Get(0).(admin.CreatePeeringContainerApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_CreatePeeringContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePeeringContainer'
type NetworkPeeringApiMock_CreatePeeringContainer_Call struct {
	*mock.Call
}

// CreatePeeringContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - cloudProviderContainer *admin.CloudProviderContainer
func (_e *NetworkPeeringApiMock_Expecter) CreatePeeringContainer(ctx interface{}, groupId interface{}, cloudProviderContainer interface{}) *NetworkPeeringApiMock_CreatePeeringContainer_Call {
	return &NetworkPeeringApiMock_CreatePeeringContainer_Call{Call: _e.mock.On("CreatePeeringContainer", ctx, groupId, cloudProviderContainer)}
}

func (_c *NetworkPeeringApiMock_CreatePeeringContainer_Call) Run(run func(ctx context.Context, groupId string, cloudProviderContainer *admin.CloudProviderContainer)) *NetworkPeeringApiMock_CreatePeeringContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.CloudProviderContainer))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_CreatePeeringContainer_Call) Return(_a0 admin.CreatePeeringContainerApiRequest) *NetworkPeeringApiMock_CreatePeeringContainer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_CreatePeeringContainer_Call) RunAndReturn(run func(context.Context, string, *admin.CloudProviderContainer) admin.CreatePeeringContainerApiRequest) *NetworkPeeringApiMock_CreatePeeringContainer_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePeeringContainerExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApiMock) CreatePeeringContainerExecute(r admin.CreatePeeringContainerApiRequest) (*admin.CloudProviderContainer, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreatePeeringContainerExecute")
	}

	var r0 *admin.CloudProviderContainer
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreatePeeringContainerApiRequest) (*admin.CloudProviderContainer, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreatePeeringContainerApiRequest) *admin.CloudProviderContainer); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CloudProviderContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreatePeeringContainerApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreatePeeringContainerApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApiMock_CreatePeeringContainerExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePeeringContainerExecute'
type NetworkPeeringApiMock_CreatePeeringContainerExecute_Call struct {
	*mock.Call
}

// CreatePeeringContainerExecute is a helper method to define mock.On call
//   - r admin.CreatePeeringContainerApiRequest
func (_e *NetworkPeeringApiMock_Expecter) CreatePeeringContainerExecute(r interface{}) *NetworkPeeringApiMock_CreatePeeringContainerExecute_Call {
	return &NetworkPeeringApiMock_CreatePeeringContainerExecute_Call{Call: _e.mock.On("CreatePeeringContainerExecute", r)}
}

func (_c *NetworkPeeringApiMock_CreatePeeringContainerExecute_Call) Run(run func(r admin.CreatePeeringContainerApiRequest)) *NetworkPeeringApiMock_CreatePeeringContainerExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreatePeeringContainerApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_CreatePeeringContainerExecute_Call) Return(_a0 *admin.CloudProviderContainer, _a1 *http.Response, _a2 error) *NetworkPeeringApiMock_CreatePeeringContainerExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApiMock_CreatePeeringContainerExecute_Call) RunAndReturn(run func(admin.CreatePeeringContainerApiRequest) (*admin.CloudProviderContainer, *http.Response, error)) *NetworkPeeringApiMock_CreatePeeringContainerExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePeeringContainerWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApiMock) CreatePeeringContainerWithParams(ctx context.Context, args *admin.CreatePeeringContainerApiParams) admin.CreatePeeringContainerApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreatePeeringContainerWithParams")
	}

	var r0 admin.CreatePeeringContainerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreatePeeringContainerApiParams) admin.CreatePeeringContainerApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreatePeeringContainerApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_CreatePeeringContainerWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePeeringContainerWithParams'
type NetworkPeeringApiMock_CreatePeeringContainerWithParams_Call struct {
	*mock.Call
}

// CreatePeeringContainerWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreatePeeringContainerApiParams
func (_e *NetworkPeeringApiMock_Expecter) CreatePeeringContainerWithParams(ctx interface{}, args interface{}) *NetworkPeeringApiMock_CreatePeeringContainerWithParams_Call {
	return &NetworkPeeringApiMock_CreatePeeringContainerWithParams_Call{Call: _e.mock.On("CreatePeeringContainerWithParams", ctx, args)}
}

func (_c *NetworkPeeringApiMock_CreatePeeringContainerWithParams_Call) Run(run func(ctx context.Context, args *admin.CreatePeeringContainerApiParams)) *NetworkPeeringApiMock_CreatePeeringContainerWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreatePeeringContainerApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_CreatePeeringContainerWithParams_Call) Return(_a0 admin.CreatePeeringContainerApiRequest) *NetworkPeeringApiMock_CreatePeeringContainerWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_CreatePeeringContainerWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreatePeeringContainerApiParams) admin.CreatePeeringContainerApiRequest) *NetworkPeeringApiMock_CreatePeeringContainerWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePeeringConnection provides a mock function with given fields: ctx, groupId, peerId
func (_m *NetworkPeeringApiMock) DeletePeeringConnection(ctx context.Context, groupId string, peerId string) admin.DeletePeeringConnectionApiRequest {
	ret := _m.Called(ctx, groupId, peerId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePeeringConnection")
	}

	var r0 admin.DeletePeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeletePeeringConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, peerId)
	} else {
		r0 = ret.Get(0).(admin.DeletePeeringConnectionApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_DeletePeeringConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePeeringConnection'
type NetworkPeeringApiMock_DeletePeeringConnection_Call struct {
	*mock.Call
}

// DeletePeeringConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - peerId string
func (_e *NetworkPeeringApiMock_Expecter) DeletePeeringConnection(ctx interface{}, groupId interface{}, peerId interface{}) *NetworkPeeringApiMock_DeletePeeringConnection_Call {
	return &NetworkPeeringApiMock_DeletePeeringConnection_Call{Call: _e.mock.On("DeletePeeringConnection", ctx, groupId, peerId)}
}

func (_c *NetworkPeeringApiMock_DeletePeeringConnection_Call) Run(run func(ctx context.Context, groupId string, peerId string)) *NetworkPeeringApiMock_DeletePeeringConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_DeletePeeringConnection_Call) Return(_a0 admin.DeletePeeringConnectionApiRequest) *NetworkPeeringApiMock_DeletePeeringConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_DeletePeeringConnection_Call) RunAndReturn(run func(context.Context, string, string) admin.DeletePeeringConnectionApiRequest) *NetworkPeeringApiMock_DeletePeeringConnection_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePeeringConnectionExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApiMock) DeletePeeringConnectionExecute(r admin.DeletePeeringConnectionApiRequest) (map[string]interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeletePeeringConnectionExecute")
	}

	var r0 map[string]interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeletePeeringConnectionApiRequest) (map[string]interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeletePeeringConnectionApiRequest) map[string]interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeletePeeringConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeletePeeringConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApiMock_DeletePeeringConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePeeringConnectionExecute'
type NetworkPeeringApiMock_DeletePeeringConnectionExecute_Call struct {
	*mock.Call
}

// DeletePeeringConnectionExecute is a helper method to define mock.On call
//   - r admin.DeletePeeringConnectionApiRequest
func (_e *NetworkPeeringApiMock_Expecter) DeletePeeringConnectionExecute(r interface{}) *NetworkPeeringApiMock_DeletePeeringConnectionExecute_Call {
	return &NetworkPeeringApiMock_DeletePeeringConnectionExecute_Call{Call: _e.mock.On("DeletePeeringConnectionExecute", r)}
}

func (_c *NetworkPeeringApiMock_DeletePeeringConnectionExecute_Call) Run(run func(r admin.DeletePeeringConnectionApiRequest)) *NetworkPeeringApiMock_DeletePeeringConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeletePeeringConnectionApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_DeletePeeringConnectionExecute_Call) Return(_a0 map[string]interface{}, _a1 *http.Response, _a2 error) *NetworkPeeringApiMock_DeletePeeringConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApiMock_DeletePeeringConnectionExecute_Call) RunAndReturn(run func(admin.DeletePeeringConnectionApiRequest) (map[string]interface{}, *http.Response, error)) *NetworkPeeringApiMock_DeletePeeringConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePeeringConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApiMock) DeletePeeringConnectionWithParams(ctx context.Context, args *admin.DeletePeeringConnectionApiParams) admin.DeletePeeringConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeletePeeringConnectionWithParams")
	}

	var r0 admin.DeletePeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeletePeeringConnectionApiParams) admin.DeletePeeringConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeletePeeringConnectionApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_DeletePeeringConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePeeringConnectionWithParams'
type NetworkPeeringApiMock_DeletePeeringConnectionWithParams_Call struct {
	*mock.Call
}

// DeletePeeringConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeletePeeringConnectionApiParams
func (_e *NetworkPeeringApiMock_Expecter) DeletePeeringConnectionWithParams(ctx interface{}, args interface{}) *NetworkPeeringApiMock_DeletePeeringConnectionWithParams_Call {
	return &NetworkPeeringApiMock_DeletePeeringConnectionWithParams_Call{Call: _e.mock.On("DeletePeeringConnectionWithParams", ctx, args)}
}

func (_c *NetworkPeeringApiMock_DeletePeeringConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.DeletePeeringConnectionApiParams)) *NetworkPeeringApiMock_DeletePeeringConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeletePeeringConnectionApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_DeletePeeringConnectionWithParams_Call) Return(_a0 admin.DeletePeeringConnectionApiRequest) *NetworkPeeringApiMock_DeletePeeringConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_DeletePeeringConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeletePeeringConnectionApiParams) admin.DeletePeeringConnectionApiRequest) *NetworkPeeringApiMock_DeletePeeringConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePeeringContainer provides a mock function with given fields: ctx, groupId, containerId
func (_m *NetworkPeeringApiMock) DeletePeeringContainer(ctx context.Context, groupId string, containerId string) admin.DeletePeeringContainerApiRequest {
	ret := _m.Called(ctx, groupId, containerId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePeeringContainer")
	}

	var r0 admin.DeletePeeringContainerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeletePeeringContainerApiRequest); ok {
		r0 = rf(ctx, groupId, containerId)
	} else {
		r0 = ret.Get(0).(admin.DeletePeeringContainerApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_DeletePeeringContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePeeringContainer'
type NetworkPeeringApiMock_DeletePeeringContainer_Call struct {
	*mock.Call
}

// DeletePeeringContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - containerId string
func (_e *NetworkPeeringApiMock_Expecter) DeletePeeringContainer(ctx interface{}, groupId interface{}, containerId interface{}) *NetworkPeeringApiMock_DeletePeeringContainer_Call {
	return &NetworkPeeringApiMock_DeletePeeringContainer_Call{Call: _e.mock.On("DeletePeeringContainer", ctx, groupId, containerId)}
}

func (_c *NetworkPeeringApiMock_DeletePeeringContainer_Call) Run(run func(ctx context.Context, groupId string, containerId string)) *NetworkPeeringApiMock_DeletePeeringContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_DeletePeeringContainer_Call) Return(_a0 admin.DeletePeeringContainerApiRequest) *NetworkPeeringApiMock_DeletePeeringContainer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_DeletePeeringContainer_Call) RunAndReturn(run func(context.Context, string, string) admin.DeletePeeringContainerApiRequest) *NetworkPeeringApiMock_DeletePeeringContainer_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePeeringContainerExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApiMock) DeletePeeringContainerExecute(r admin.DeletePeeringContainerApiRequest) (map[string]interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeletePeeringContainerExecute")
	}

	var r0 map[string]interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeletePeeringContainerApiRequest) (map[string]interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeletePeeringContainerApiRequest) map[string]interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeletePeeringContainerApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeletePeeringContainerApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApiMock_DeletePeeringContainerExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePeeringContainerExecute'
type NetworkPeeringApiMock_DeletePeeringContainerExecute_Call struct {
	*mock.Call
}

// DeletePeeringContainerExecute is a helper method to define mock.On call
//   - r admin.DeletePeeringContainerApiRequest
func (_e *NetworkPeeringApiMock_Expecter) DeletePeeringContainerExecute(r interface{}) *NetworkPeeringApiMock_DeletePeeringContainerExecute_Call {
	return &NetworkPeeringApiMock_DeletePeeringContainerExecute_Call{Call: _e.mock.On("DeletePeeringContainerExecute", r)}
}

func (_c *NetworkPeeringApiMock_DeletePeeringContainerExecute_Call) Run(run func(r admin.DeletePeeringContainerApiRequest)) *NetworkPeeringApiMock_DeletePeeringContainerExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeletePeeringContainerApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_DeletePeeringContainerExecute_Call) Return(_a0 map[string]interface{}, _a1 *http.Response, _a2 error) *NetworkPeeringApiMock_DeletePeeringContainerExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApiMock_DeletePeeringContainerExecute_Call) RunAndReturn(run func(admin.DeletePeeringContainerApiRequest) (map[string]interface{}, *http.Response, error)) *NetworkPeeringApiMock_DeletePeeringContainerExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePeeringContainerWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApiMock) DeletePeeringContainerWithParams(ctx context.Context, args *admin.DeletePeeringContainerApiParams) admin.DeletePeeringContainerApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeletePeeringContainerWithParams")
	}

	var r0 admin.DeletePeeringContainerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeletePeeringContainerApiParams) admin.DeletePeeringContainerApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeletePeeringContainerApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_DeletePeeringContainerWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePeeringContainerWithParams'
type NetworkPeeringApiMock_DeletePeeringContainerWithParams_Call struct {
	*mock.Call
}

// DeletePeeringContainerWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeletePeeringContainerApiParams
func (_e *NetworkPeeringApiMock_Expecter) DeletePeeringContainerWithParams(ctx interface{}, args interface{}) *NetworkPeeringApiMock_DeletePeeringContainerWithParams_Call {
	return &NetworkPeeringApiMock_DeletePeeringContainerWithParams_Call{Call: _e.mock.On("DeletePeeringContainerWithParams", ctx, args)}
}

func (_c *NetworkPeeringApiMock_DeletePeeringContainerWithParams_Call) Run(run func(ctx context.Context, args *admin.DeletePeeringContainerApiParams)) *NetworkPeeringApiMock_DeletePeeringContainerWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeletePeeringContainerApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_DeletePeeringContainerWithParams_Call) Return(_a0 admin.DeletePeeringContainerApiRequest) *NetworkPeeringApiMock_DeletePeeringContainerWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_DeletePeeringContainerWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeletePeeringContainerApiParams) admin.DeletePeeringContainerApiRequest) *NetworkPeeringApiMock_DeletePeeringContainerWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DisablePeering provides a mock function with given fields: ctx, groupId, privateIPMode
func (_m *NetworkPeeringApiMock) DisablePeering(ctx context.Context, groupId string, privateIPMode *admin.PrivateIPMode) admin.DisablePeeringApiRequest {
	ret := _m.Called(ctx, groupId, privateIPMode)

	if len(ret) == 0 {
		panic("no return value specified for DisablePeering")
	}

	var r0 admin.DisablePeeringApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, *admin.PrivateIPMode) admin.DisablePeeringApiRequest); ok {
		r0 = rf(ctx, groupId, privateIPMode)
	} else {
		r0 = ret.Get(0).(admin.DisablePeeringApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_DisablePeering_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisablePeering'
type NetworkPeeringApiMock_DisablePeering_Call struct {
	*mock.Call
}

// DisablePeering is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - privateIPMode *admin.PrivateIPMode
func (_e *NetworkPeeringApiMock_Expecter) DisablePeering(ctx interface{}, groupId interface{}, privateIPMode interface{}) *NetworkPeeringApiMock_DisablePeering_Call {
	return &NetworkPeeringApiMock_DisablePeering_Call{Call: _e.mock.On("DisablePeering", ctx, groupId, privateIPMode)}
}

func (_c *NetworkPeeringApiMock_DisablePeering_Call) Run(run func(ctx context.Context, groupId string, privateIPMode *admin.PrivateIPMode)) *NetworkPeeringApiMock_DisablePeering_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*admin.PrivateIPMode))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_DisablePeering_Call) Return(_a0 admin.DisablePeeringApiRequest) *NetworkPeeringApiMock_DisablePeering_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_DisablePeering_Call) RunAndReturn(run func(context.Context, string, *admin.PrivateIPMode) admin.DisablePeeringApiRequest) *NetworkPeeringApiMock_DisablePeering_Call {
	_c.Call.Return(run)
	return _c
}

// DisablePeeringExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApiMock) DisablePeeringExecute(r admin.DisablePeeringApiRequest) (*admin.PrivateIPMode, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DisablePeeringExecute")
	}

	var r0 *admin.PrivateIPMode
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DisablePeeringApiRequest) (*admin.PrivateIPMode, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DisablePeeringApiRequest) *admin.PrivateIPMode); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PrivateIPMode)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DisablePeeringApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DisablePeeringApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApiMock_DisablePeeringExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisablePeeringExecute'
type NetworkPeeringApiMock_DisablePeeringExecute_Call struct {
	*mock.Call
}

// DisablePeeringExecute is a helper method to define mock.On call
//   - r admin.DisablePeeringApiRequest
func (_e *NetworkPeeringApiMock_Expecter) DisablePeeringExecute(r interface{}) *NetworkPeeringApiMock_DisablePeeringExecute_Call {
	return &NetworkPeeringApiMock_DisablePeeringExecute_Call{Call: _e.mock.On("DisablePeeringExecute", r)}
}

func (_c *NetworkPeeringApiMock_DisablePeeringExecute_Call) Run(run func(r admin.DisablePeeringApiRequest)) *NetworkPeeringApiMock_DisablePeeringExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DisablePeeringApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_DisablePeeringExecute_Call) Return(_a0 *admin.PrivateIPMode, _a1 *http.Response, _a2 error) *NetworkPeeringApiMock_DisablePeeringExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApiMock_DisablePeeringExecute_Call) RunAndReturn(run func(admin.DisablePeeringApiRequest) (*admin.PrivateIPMode, *http.Response, error)) *NetworkPeeringApiMock_DisablePeeringExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DisablePeeringWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApiMock) DisablePeeringWithParams(ctx context.Context, args *admin.DisablePeeringApiParams) admin.DisablePeeringApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DisablePeeringWithParams")
	}

	var r0 admin.DisablePeeringApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DisablePeeringApiParams) admin.DisablePeeringApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DisablePeeringApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_DisablePeeringWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisablePeeringWithParams'
type NetworkPeeringApiMock_DisablePeeringWithParams_Call struct {
	*mock.Call
}

// DisablePeeringWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DisablePeeringApiParams
func (_e *NetworkPeeringApiMock_Expecter) DisablePeeringWithParams(ctx interface{}, args interface{}) *NetworkPeeringApiMock_DisablePeeringWithParams_Call {
	return &NetworkPeeringApiMock_DisablePeeringWithParams_Call{Call: _e.mock.On("DisablePeeringWithParams", ctx, args)}
}

func (_c *NetworkPeeringApiMock_DisablePeeringWithParams_Call) Run(run func(ctx context.Context, args *admin.DisablePeeringApiParams)) *NetworkPeeringApiMock_DisablePeeringWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DisablePeeringApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_DisablePeeringWithParams_Call) Return(_a0 admin.DisablePeeringApiRequest) *NetworkPeeringApiMock_DisablePeeringWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_DisablePeeringWithParams_Call) RunAndReturn(run func(context.Context, *admin.DisablePeeringApiParams) admin.DisablePeeringApiRequest) *NetworkPeeringApiMock_DisablePeeringWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeeringConnection provides a mock function with given fields: ctx, groupId, peerId
func (_m *NetworkPeeringApiMock) GetPeeringConnection(ctx context.Context, groupId string, peerId string) admin.GetPeeringConnectionApiRequest {
	ret := _m.Called(ctx, groupId, peerId)

	if len(ret) == 0 {
		panic("no return value specified for GetPeeringConnection")
	}

	var r0 admin.GetPeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetPeeringConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, peerId)
	} else {
		r0 = ret.Get(0).(admin.GetPeeringConnectionApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_GetPeeringConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeeringConnection'
type NetworkPeeringApiMock_GetPeeringConnection_Call struct {
	*mock.Call
}

// GetPeeringConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - peerId string
func (_e *NetworkPeeringApiMock_Expecter) GetPeeringConnection(ctx interface{}, groupId interface{}, peerId interface{}) *NetworkPeeringApiMock_GetPeeringConnection_Call {
	return &NetworkPeeringApiMock_GetPeeringConnection_Call{Call: _e.mock.On("GetPeeringConnection", ctx, groupId, peerId)}
}

func (_c *NetworkPeeringApiMock_GetPeeringConnection_Call) Run(run func(ctx context.Context, groupId string, peerId string)) *NetworkPeeringApiMock_GetPeeringConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_GetPeeringConnection_Call) Return(_a0 admin.GetPeeringConnectionApiRequest) *NetworkPeeringApiMock_GetPeeringConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_GetPeeringConnection_Call) RunAndReturn(run func(context.Context, string, string) admin.GetPeeringConnectionApiRequest) *NetworkPeeringApiMock_GetPeeringConnection_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeeringConnectionExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApiMock) GetPeeringConnectionExecute(r admin.GetPeeringConnectionApiRequest) (*admin.BaseNetworkPeeringConnectionSettings, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPeeringConnectionExecute")
	}

	var r0 *admin.BaseNetworkPeeringConnectionSettings
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetPeeringConnectionApiRequest) (*admin.BaseNetworkPeeringConnectionSettings, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetPeeringConnectionApiRequest) *admin.BaseNetworkPeeringConnectionSettings); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.BaseNetworkPeeringConnectionSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetPeeringConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetPeeringConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApiMock_GetPeeringConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeeringConnectionExecute'
type NetworkPeeringApiMock_GetPeeringConnectionExecute_Call struct {
	*mock.Call
}

// GetPeeringConnectionExecute is a helper method to define mock.On call
//   - r admin.GetPeeringConnectionApiRequest
func (_e *NetworkPeeringApiMock_Expecter) GetPeeringConnectionExecute(r interface{}) *NetworkPeeringApiMock_GetPeeringConnectionExecute_Call {
	return &NetworkPeeringApiMock_GetPeeringConnectionExecute_Call{Call: _e.mock.On("GetPeeringConnectionExecute", r)}
}

func (_c *NetworkPeeringApiMock_GetPeeringConnectionExecute_Call) Run(run func(r admin.GetPeeringConnectionApiRequest)) *NetworkPeeringApiMock_GetPeeringConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetPeeringConnectionApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_GetPeeringConnectionExecute_Call) Return(_a0 *admin.BaseNetworkPeeringConnectionSettings, _a1 *http.Response, _a2 error) *NetworkPeeringApiMock_GetPeeringConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApiMock_GetPeeringConnectionExecute_Call) RunAndReturn(run func(admin.GetPeeringConnectionApiRequest) (*admin.BaseNetworkPeeringConnectionSettings, *http.Response, error)) *NetworkPeeringApiMock_GetPeeringConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeeringConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApiMock) GetPeeringConnectionWithParams(ctx context.Context, args *admin.GetPeeringConnectionApiParams) admin.GetPeeringConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetPeeringConnectionWithParams")
	}

	var r0 admin.GetPeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetPeeringConnectionApiParams) admin.GetPeeringConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetPeeringConnectionApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_GetPeeringConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeeringConnectionWithParams'
type NetworkPeeringApiMock_GetPeeringConnectionWithParams_Call struct {
	*mock.Call
}

// GetPeeringConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetPeeringConnectionApiParams
func (_e *NetworkPeeringApiMock_Expecter) GetPeeringConnectionWithParams(ctx interface{}, args interface{}) *NetworkPeeringApiMock_GetPeeringConnectionWithParams_Call {
	return &NetworkPeeringApiMock_GetPeeringConnectionWithParams_Call{Call: _e.mock.On("GetPeeringConnectionWithParams", ctx, args)}
}

func (_c *NetworkPeeringApiMock_GetPeeringConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.GetPeeringConnectionApiParams)) *NetworkPeeringApiMock_GetPeeringConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetPeeringConnectionApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_GetPeeringConnectionWithParams_Call) Return(_a0 admin.GetPeeringConnectionApiRequest) *NetworkPeeringApiMock_GetPeeringConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_GetPeeringConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetPeeringConnectionApiParams) admin.GetPeeringConnectionApiRequest) *NetworkPeeringApiMock_GetPeeringConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeeringContainer provides a mock function with given fields: ctx, groupId, containerId
func (_m *NetworkPeeringApiMock) GetPeeringContainer(ctx context.Context, groupId string, containerId string) admin.GetPeeringContainerApiRequest {
	ret := _m.Called(ctx, groupId, containerId)

	if len(ret) == 0 {
		panic("no return value specified for GetPeeringContainer")
	}

	var r0 admin.GetPeeringContainerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetPeeringContainerApiRequest); ok {
		r0 = rf(ctx, groupId, containerId)
	} else {
		r0 = ret.Get(0).(admin.GetPeeringContainerApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_GetPeeringContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeeringContainer'
type NetworkPeeringApiMock_GetPeeringContainer_Call struct {
	*mock.Call
}

// GetPeeringContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - containerId string
func (_e *NetworkPeeringApiMock_Expecter) GetPeeringContainer(ctx interface{}, groupId interface{}, containerId interface{}) *NetworkPeeringApiMock_GetPeeringContainer_Call {
	return &NetworkPeeringApiMock_GetPeeringContainer_Call{Call: _e.mock.On("GetPeeringContainer", ctx, groupId, containerId)}
}

func (_c *NetworkPeeringApiMock_GetPeeringContainer_Call) Run(run func(ctx context.Context, groupId string, containerId string)) *NetworkPeeringApiMock_GetPeeringContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_GetPeeringContainer_Call) Return(_a0 admin.GetPeeringContainerApiRequest) *NetworkPeeringApiMock_GetPeeringContainer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_GetPeeringContainer_Call) RunAndReturn(run func(context.Context, string, string) admin.GetPeeringContainerApiRequest) *NetworkPeeringApiMock_GetPeeringContainer_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeeringContainerExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApiMock) GetPeeringContainerExecute(r admin.GetPeeringContainerApiRequest) (*admin.CloudProviderContainer, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPeeringContainerExecute")
	}

	var r0 *admin.CloudProviderContainer
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetPeeringContainerApiRequest) (*admin.CloudProviderContainer, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetPeeringContainerApiRequest) *admin.CloudProviderContainer); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CloudProviderContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetPeeringContainerApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetPeeringContainerApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApiMock_GetPeeringContainerExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeeringContainerExecute'
type NetworkPeeringApiMock_GetPeeringContainerExecute_Call struct {
	*mock.Call
}

// GetPeeringContainerExecute is a helper method to define mock.On call
//   - r admin.GetPeeringContainerApiRequest
func (_e *NetworkPeeringApiMock_Expecter) GetPeeringContainerExecute(r interface{}) *NetworkPeeringApiMock_GetPeeringContainerExecute_Call {
	return &NetworkPeeringApiMock_GetPeeringContainerExecute_Call{Call: _e.mock.On("GetPeeringContainerExecute", r)}
}

func (_c *NetworkPeeringApiMock_GetPeeringContainerExecute_Call) Run(run func(r admin.GetPeeringContainerApiRequest)) *NetworkPeeringApiMock_GetPeeringContainerExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetPeeringContainerApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_GetPeeringContainerExecute_Call) Return(_a0 *admin.CloudProviderContainer, _a1 *http.Response, _a2 error) *NetworkPeeringApiMock_GetPeeringContainerExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApiMock_GetPeeringContainerExecute_Call) RunAndReturn(run func(admin.GetPeeringContainerApiRequest) (*admin.CloudProviderContainer, *http.Response, error)) *NetworkPeeringApiMock_GetPeeringContainerExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeeringContainerWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApiMock) GetPeeringContainerWithParams(ctx context.Context, args *admin.GetPeeringContainerApiParams) admin.GetPeeringContainerApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetPeeringContainerWithParams")
	}

	var r0 admin.GetPeeringContainerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetPeeringContainerApiParams) admin.GetPeeringContainerApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetPeeringContainerApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_GetPeeringContainerWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeeringContainerWithParams'
type NetworkPeeringApiMock_GetPeeringContainerWithParams_Call struct {
	*mock.Call
}

// GetPeeringContainerWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetPeeringContainerApiParams
func (_e *NetworkPeeringApiMock_Expecter) GetPeeringContainerWithParams(ctx interface{}, args interface{}) *NetworkPeeringApiMock_GetPeeringContainerWithParams_Call {
	return &NetworkPeeringApiMock_GetPeeringContainerWithParams_Call{Call: _e.mock.On("GetPeeringContainerWithParams", ctx, args)}
}

func (_c *NetworkPeeringApiMock_GetPeeringContainerWithParams_Call) Run(run func(ctx context.Context, args *admin.GetPeeringContainerApiParams)) *NetworkPeeringApiMock_GetPeeringContainerWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetPeeringContainerApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_GetPeeringContainerWithParams_Call) Return(_a0 admin.GetPeeringContainerApiRequest) *NetworkPeeringApiMock_GetPeeringContainerWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_GetPeeringContainerWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetPeeringContainerApiParams) admin.GetPeeringContainerApiRequest) *NetworkPeeringApiMock_GetPeeringContainerWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListPeeringConnections provides a mock function with given fields: ctx, groupId
func (_m *NetworkPeeringApiMock) ListPeeringConnections(ctx context.Context, groupId string) admin.ListPeeringConnectionsApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListPeeringConnections")
	}

	var r0 admin.ListPeeringConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListPeeringConnectionsApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListPeeringConnectionsApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_ListPeeringConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPeeringConnections'
type NetworkPeeringApiMock_ListPeeringConnections_Call struct {
	*mock.Call
}

// ListPeeringConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *NetworkPeeringApiMock_Expecter) ListPeeringConnections(ctx interface{}, groupId interface{}) *NetworkPeeringApiMock_ListPeeringConnections_Call {
	return &NetworkPeeringApiMock_ListPeeringConnections_Call{Call: _e.mock.On("ListPeeringConnections", ctx, groupId)}
}

func (_c *NetworkPeeringApiMock_ListPeeringConnections_Call) Run(run func(ctx context.Context, groupId string)) *NetworkPeeringApiMock_ListPeeringConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_ListPeeringConnections_Call) Return(_a0 admin.ListPeeringConnectionsApiRequest) *NetworkPeeringApiMock_ListPeeringConnections_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_ListPeeringConnections_Call) RunAndReturn(run func(context.Context, string) admin.ListPeeringConnectionsApiRequest) *NetworkPeeringApiMock_ListPeeringConnections_Call {
	_c.Call.Return(run)
	return _c
}

// ListPeeringConnectionsExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApiMock) ListPeeringConnectionsExecute(r admin.ListPeeringConnectionsApiRequest) (*admin.PaginatedContainerPeer, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListPeeringConnectionsExecute")
	}

	var r0 *admin.PaginatedContainerPeer
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListPeeringConnectionsApiRequest) (*admin.PaginatedContainerPeer, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListPeeringConnectionsApiRequest) *admin.PaginatedContainerPeer); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedContainerPeer)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListPeeringConnectionsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListPeeringConnectionsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApiMock_ListPeeringConnectionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPeeringConnectionsExecute'
type NetworkPeeringApiMock_ListPeeringConnectionsExecute_Call struct {
	*mock.Call
}

// ListPeeringConnectionsExecute is a helper method to define mock.On call
//   - r admin.ListPeeringConnectionsApiRequest
func (_e *NetworkPeeringApiMock_Expecter) ListPeeringConnectionsExecute(r interface{}) *NetworkPeeringApiMock_ListPeeringConnectionsExecute_Call {
	return &NetworkPeeringApiMock_ListPeeringConnectionsExecute_Call{Call: _e.mock.On("ListPeeringConnectionsExecute", r)}
}

func (_c *NetworkPeeringApiMock_ListPeeringConnectionsExecute_Call) Run(run func(r admin.ListPeeringConnectionsApiRequest)) *NetworkPeeringApiMock_ListPeeringConnectionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListPeeringConnectionsApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_ListPeeringConnectionsExecute_Call) Return(_a0 *admin.PaginatedContainerPeer, _a1 *http.Response, _a2 error) *NetworkPeeringApiMock_ListPeeringConnectionsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApiMock_ListPeeringConnectionsExecute_Call) RunAndReturn(run func(admin.ListPeeringConnectionsApiRequest) (*admin.PaginatedContainerPeer, *http.Response, error)) *NetworkPeeringApiMock_ListPeeringConnectionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListPeeringConnectionsWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApiMock) ListPeeringConnectionsWithParams(ctx context.Context, args *admin.ListPeeringConnectionsApiParams) admin.ListPeeringConnectionsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListPeeringConnectionsWithParams")
	}

	var r0 admin.ListPeeringConnectionsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListPeeringConnectionsApiParams) admin.ListPeeringConnectionsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListPeeringConnectionsApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_ListPeeringConnectionsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPeeringConnectionsWithParams'
type NetworkPeeringApiMock_ListPeeringConnectionsWithParams_Call struct {
	*mock.Call
}

// ListPeeringConnectionsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListPeeringConnectionsApiParams
func (_e *NetworkPeeringApiMock_Expecter) ListPeeringConnectionsWithParams(ctx interface{}, args interface{}) *NetworkPeeringApiMock_ListPeeringConnectionsWithParams_Call {
	return &NetworkPeeringApiMock_ListPeeringConnectionsWithParams_Call{Call: _e.mock.On("ListPeeringConnectionsWithParams", ctx, args)}
}

func (_c *NetworkPeeringApiMock_ListPeeringConnectionsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListPeeringConnectionsApiParams)) *NetworkPeeringApiMock_ListPeeringConnectionsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListPeeringConnectionsApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_ListPeeringConnectionsWithParams_Call) Return(_a0 admin.ListPeeringConnectionsApiRequest) *NetworkPeeringApiMock_ListPeeringConnectionsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_ListPeeringConnectionsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListPeeringConnectionsApiParams) admin.ListPeeringConnectionsApiRequest) *NetworkPeeringApiMock_ListPeeringConnectionsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListPeeringContainerByCloudProvider provides a mock function with given fields: ctx, groupId
func (_m *NetworkPeeringApiMock) ListPeeringContainerByCloudProvider(ctx context.Context, groupId string) admin.ListPeeringContainerByCloudProviderApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListPeeringContainerByCloudProvider")
	}

	var r0 admin.ListPeeringContainerByCloudProviderApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListPeeringContainerByCloudProviderApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListPeeringContainerByCloudProviderApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_ListPeeringContainerByCloudProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPeeringContainerByCloudProvider'
type NetworkPeeringApiMock_ListPeeringContainerByCloudProvider_Call struct {
	*mock.Call
}

// ListPeeringContainerByCloudProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *NetworkPeeringApiMock_Expecter) ListPeeringContainerByCloudProvider(ctx interface{}, groupId interface{}) *NetworkPeeringApiMock_ListPeeringContainerByCloudProvider_Call {
	return &NetworkPeeringApiMock_ListPeeringContainerByCloudProvider_Call{Call: _e.mock.On("ListPeeringContainerByCloudProvider", ctx, groupId)}
}

func (_c *NetworkPeeringApiMock_ListPeeringContainerByCloudProvider_Call) Run(run func(ctx context.Context, groupId string)) *NetworkPeeringApiMock_ListPeeringContainerByCloudProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_ListPeeringContainerByCloudProvider_Call) Return(_a0 admin.ListPeeringContainerByCloudProviderApiRequest) *NetworkPeeringApiMock_ListPeeringContainerByCloudProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_ListPeeringContainerByCloudProvider_Call) RunAndReturn(run func(context.Context, string) admin.ListPeeringContainerByCloudProviderApiRequest) *NetworkPeeringApiMock_ListPeeringContainerByCloudProvider_Call {
	_c.Call.Return(run)
	return _c
}

// ListPeeringContainerByCloudProviderExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApiMock) ListPeeringContainerByCloudProviderExecute(r admin.ListPeeringContainerByCloudProviderApiRequest) (*admin.PaginatedCloudProviderContainer, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListPeeringContainerByCloudProviderExecute")
	}

	var r0 *admin.PaginatedCloudProviderContainer
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListPeeringContainerByCloudProviderApiRequest) (*admin.PaginatedCloudProviderContainer, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListPeeringContainerByCloudProviderApiRequest) *admin.PaginatedCloudProviderContainer); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedCloudProviderContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListPeeringContainerByCloudProviderApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListPeeringContainerByCloudProviderApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApiMock_ListPeeringContainerByCloudProviderExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPeeringContainerByCloudProviderExecute'
type NetworkPeeringApiMock_ListPeeringContainerByCloudProviderExecute_Call struct {
	*mock.Call
}

// ListPeeringContainerByCloudProviderExecute is a helper method to define mock.On call
//   - r admin.ListPeeringContainerByCloudProviderApiRequest
func (_e *NetworkPeeringApiMock_Expecter) ListPeeringContainerByCloudProviderExecute(r interface{}) *NetworkPeeringApiMock_ListPeeringContainerByCloudProviderExecute_Call {
	return &NetworkPeeringApiMock_ListPeeringContainerByCloudProviderExecute_Call{Call: _e.mock.On("ListPeeringContainerByCloudProviderExecute", r)}
}

func (_c *NetworkPeeringApiMock_ListPeeringContainerByCloudProviderExecute_Call) Run(run func(r admin.ListPeeringContainerByCloudProviderApiRequest)) *NetworkPeeringApiMock_ListPeeringContainerByCloudProviderExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListPeeringContainerByCloudProviderApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_ListPeeringContainerByCloudProviderExecute_Call) Return(_a0 *admin.PaginatedCloudProviderContainer, _a1 *http.Response, _a2 error) *NetworkPeeringApiMock_ListPeeringContainerByCloudProviderExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApiMock_ListPeeringContainerByCloudProviderExecute_Call) RunAndReturn(run func(admin.ListPeeringContainerByCloudProviderApiRequest) (*admin.PaginatedCloudProviderContainer, *http.Response, error)) *NetworkPeeringApiMock_ListPeeringContainerByCloudProviderExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListPeeringContainerByCloudProviderWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApiMock) ListPeeringContainerByCloudProviderWithParams(ctx context.Context, args *admin.ListPeeringContainerByCloudProviderApiParams) admin.ListPeeringContainerByCloudProviderApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListPeeringContainerByCloudProviderWithParams")
	}

	var r0 admin.ListPeeringContainerByCloudProviderApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListPeeringContainerByCloudProviderApiParams) admin.ListPeeringContainerByCloudProviderApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListPeeringContainerByCloudProviderApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_ListPeeringContainerByCloudProviderWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPeeringContainerByCloudProviderWithParams'
type NetworkPeeringApiMock_ListPeeringContainerByCloudProviderWithParams_Call struct {
	*mock.Call
}

// ListPeeringContainerByCloudProviderWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListPeeringContainerByCloudProviderApiParams
func (_e *NetworkPeeringApiMock_Expecter) ListPeeringContainerByCloudProviderWithParams(ctx interface{}, args interface{}) *NetworkPeeringApiMock_ListPeeringContainerByCloudProviderWithParams_Call {
	return &NetworkPeeringApiMock_ListPeeringContainerByCloudProviderWithParams_Call{Call: _e.mock.On("ListPeeringContainerByCloudProviderWithParams", ctx, args)}
}

func (_c *NetworkPeeringApiMock_ListPeeringContainerByCloudProviderWithParams_Call) Run(run func(ctx context.Context, args *admin.ListPeeringContainerByCloudProviderApiParams)) *NetworkPeeringApiMock_ListPeeringContainerByCloudProviderWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListPeeringContainerByCloudProviderApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_ListPeeringContainerByCloudProviderWithParams_Call) Return(_a0 admin.ListPeeringContainerByCloudProviderApiRequest) *NetworkPeeringApiMock_ListPeeringContainerByCloudProviderWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_ListPeeringContainerByCloudProviderWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListPeeringContainerByCloudProviderApiParams) admin.ListPeeringContainerByCloudProviderApiRequest) *NetworkPeeringApiMock_ListPeeringContainerByCloudProviderWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListPeeringContainers provides a mock function with given fields: ctx, groupId
func (_m *NetworkPeeringApiMock) ListPeeringContainers(ctx context.Context, groupId string) admin.ListPeeringContainersApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for ListPeeringContainers")
	}

	var r0 admin.ListPeeringContainersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListPeeringContainersApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.ListPeeringContainersApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_ListPeeringContainers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPeeringContainers'
type NetworkPeeringApiMock_ListPeeringContainers_Call struct {
	*mock.Call
}

// ListPeeringContainers is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *NetworkPeeringApiMock_Expecter) ListPeeringContainers(ctx interface{}, groupId interface{}) *NetworkPeeringApiMock_ListPeeringContainers_Call {
	return &NetworkPeeringApiMock_ListPeeringContainers_Call{Call: _e.mock.On("ListPeeringContainers", ctx, groupId)}
}

func (_c *NetworkPeeringApiMock_ListPeeringContainers_Call) Run(run func(ctx context.Context, groupId string)) *NetworkPeeringApiMock_ListPeeringContainers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_ListPeeringContainers_Call) Return(_a0 admin.ListPeeringContainersApiRequest) *NetworkPeeringApiMock_ListPeeringContainers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_ListPeeringContainers_Call) RunAndReturn(run func(context.Context, string) admin.ListPeeringContainersApiRequest) *NetworkPeeringApiMock_ListPeeringContainers_Call {
	_c.Call.Return(run)
	return _c
}

// ListPeeringContainersExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApiMock) ListPeeringContainersExecute(r admin.ListPeeringContainersApiRequest) (*admin.PaginatedCloudProviderContainer, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListPeeringContainersExecute")
	}

	var r0 *admin.PaginatedCloudProviderContainer
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListPeeringContainersApiRequest) (*admin.PaginatedCloudProviderContainer, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListPeeringContainersApiRequest) *admin.PaginatedCloudProviderContainer); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedCloudProviderContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListPeeringContainersApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListPeeringContainersApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApiMock_ListPeeringContainersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPeeringContainersExecute'
type NetworkPeeringApiMock_ListPeeringContainersExecute_Call struct {
	*mock.Call
}

// ListPeeringContainersExecute is a helper method to define mock.On call
//   - r admin.ListPeeringContainersApiRequest
func (_e *NetworkPeeringApiMock_Expecter) ListPeeringContainersExecute(r interface{}) *NetworkPeeringApiMock_ListPeeringContainersExecute_Call {
	return &NetworkPeeringApiMock_ListPeeringContainersExecute_Call{Call: _e.mock.On("ListPeeringContainersExecute", r)}
}

func (_c *NetworkPeeringApiMock_ListPeeringContainersExecute_Call) Run(run func(r admin.ListPeeringContainersApiRequest)) *NetworkPeeringApiMock_ListPeeringContainersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListPeeringContainersApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_ListPeeringContainersExecute_Call) Return(_a0 *admin.PaginatedCloudProviderContainer, _a1 *http.Response, _a2 error) *NetworkPeeringApiMock_ListPeeringContainersExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApiMock_ListPeeringContainersExecute_Call) RunAndReturn(run func(admin.ListPeeringContainersApiRequest) (*admin.PaginatedCloudProviderContainer, *http.Response, error)) *NetworkPeeringApiMock_ListPeeringContainersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListPeeringContainersWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApiMock) ListPeeringContainersWithParams(ctx context.Context, args *admin.ListPeeringContainersApiParams) admin.ListPeeringContainersApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListPeeringContainersWithParams")
	}

	var r0 admin.ListPeeringContainersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListPeeringContainersApiParams) admin.ListPeeringContainersApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListPeeringContainersApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_ListPeeringContainersWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPeeringContainersWithParams'
type NetworkPeeringApiMock_ListPeeringContainersWithParams_Call struct {
	*mock.Call
}

// ListPeeringContainersWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListPeeringContainersApiParams
func (_e *NetworkPeeringApiMock_Expecter) ListPeeringContainersWithParams(ctx interface{}, args interface{}) *NetworkPeeringApiMock_ListPeeringContainersWithParams_Call {
	return &NetworkPeeringApiMock_ListPeeringContainersWithParams_Call{Call: _e.mock.On("ListPeeringContainersWithParams", ctx, args)}
}

func (_c *NetworkPeeringApiMock_ListPeeringContainersWithParams_Call) Run(run func(ctx context.Context, args *admin.ListPeeringContainersApiParams)) *NetworkPeeringApiMock_ListPeeringContainersWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListPeeringContainersApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_ListPeeringContainersWithParams_Call) Return(_a0 admin.ListPeeringContainersApiRequest) *NetworkPeeringApiMock_ListPeeringContainersWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_ListPeeringContainersWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListPeeringContainersApiParams) admin.ListPeeringContainersApiRequest) *NetworkPeeringApiMock_ListPeeringContainersWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePeeringConnection provides a mock function with given fields: ctx, groupId, peerId, baseNetworkPeeringConnectionSettings
func (_m *NetworkPeeringApiMock) UpdatePeeringConnection(ctx context.Context, groupId string, peerId string, baseNetworkPeeringConnectionSettings *admin.BaseNetworkPeeringConnectionSettings) admin.UpdatePeeringConnectionApiRequest {
	ret := _m.Called(ctx, groupId, peerId, baseNetworkPeeringConnectionSettings)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePeeringConnection")
	}

	var r0 admin.UpdatePeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.BaseNetworkPeeringConnectionSettings) admin.UpdatePeeringConnectionApiRequest); ok {
		r0 = rf(ctx, groupId, peerId, baseNetworkPeeringConnectionSettings)
	} else {
		r0 = ret.Get(0).(admin.UpdatePeeringConnectionApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_UpdatePeeringConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePeeringConnection'
type NetworkPeeringApiMock_UpdatePeeringConnection_Call struct {
	*mock.Call
}

// UpdatePeeringConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - peerId string
//   - baseNetworkPeeringConnectionSettings *admin.BaseNetworkPeeringConnectionSettings
func (_e *NetworkPeeringApiMock_Expecter) UpdatePeeringConnection(ctx interface{}, groupId interface{}, peerId interface{}, baseNetworkPeeringConnectionSettings interface{}) *NetworkPeeringApiMock_UpdatePeeringConnection_Call {
	return &NetworkPeeringApiMock_UpdatePeeringConnection_Call{Call: _e.mock.On("UpdatePeeringConnection", ctx, groupId, peerId, baseNetworkPeeringConnectionSettings)}
}

func (_c *NetworkPeeringApiMock_UpdatePeeringConnection_Call) Run(run func(ctx context.Context, groupId string, peerId string, baseNetworkPeeringConnectionSettings *admin.BaseNetworkPeeringConnectionSettings)) *NetworkPeeringApiMock_UpdatePeeringConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.BaseNetworkPeeringConnectionSettings))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_UpdatePeeringConnection_Call) Return(_a0 admin.UpdatePeeringConnectionApiRequest) *NetworkPeeringApiMock_UpdatePeeringConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_UpdatePeeringConnection_Call) RunAndReturn(run func(context.Context, string, string, *admin.BaseNetworkPeeringConnectionSettings) admin.UpdatePeeringConnectionApiRequest) *NetworkPeeringApiMock_UpdatePeeringConnection_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePeeringConnectionExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApiMock) UpdatePeeringConnectionExecute(r admin.UpdatePeeringConnectionApiRequest) (*admin.BaseNetworkPeeringConnectionSettings, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePeeringConnectionExecute")
	}

	var r0 *admin.BaseNetworkPeeringConnectionSettings
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdatePeeringConnectionApiRequest) (*admin.BaseNetworkPeeringConnectionSettings, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdatePeeringConnectionApiRequest) *admin.BaseNetworkPeeringConnectionSettings); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.BaseNetworkPeeringConnectionSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdatePeeringConnectionApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdatePeeringConnectionApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApiMock_UpdatePeeringConnectionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePeeringConnectionExecute'
type NetworkPeeringApiMock_UpdatePeeringConnectionExecute_Call struct {
	*mock.Call
}

// UpdatePeeringConnectionExecute is a helper method to define mock.On call
//   - r admin.UpdatePeeringConnectionApiRequest
func (_e *NetworkPeeringApiMock_Expecter) UpdatePeeringConnectionExecute(r interface{}) *NetworkPeeringApiMock_UpdatePeeringConnectionExecute_Call {
	return &NetworkPeeringApiMock_UpdatePeeringConnectionExecute_Call{Call: _e.mock.On("UpdatePeeringConnectionExecute", r)}
}

func (_c *NetworkPeeringApiMock_UpdatePeeringConnectionExecute_Call) Run(run func(r admin.UpdatePeeringConnectionApiRequest)) *NetworkPeeringApiMock_UpdatePeeringConnectionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdatePeeringConnectionApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_UpdatePeeringConnectionExecute_Call) Return(_a0 *admin.BaseNetworkPeeringConnectionSettings, _a1 *http.Response, _a2 error) *NetworkPeeringApiMock_UpdatePeeringConnectionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApiMock_UpdatePeeringConnectionExecute_Call) RunAndReturn(run func(admin.UpdatePeeringConnectionApiRequest) (*admin.BaseNetworkPeeringConnectionSettings, *http.Response, error)) *NetworkPeeringApiMock_UpdatePeeringConnectionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePeeringConnectionWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApiMock) UpdatePeeringConnectionWithParams(ctx context.Context, args *admin.UpdatePeeringConnectionApiParams) admin.UpdatePeeringConnectionApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePeeringConnectionWithParams")
	}

	var r0 admin.UpdatePeeringConnectionApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdatePeeringConnectionApiParams) admin.UpdatePeeringConnectionApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdatePeeringConnectionApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_UpdatePeeringConnectionWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePeeringConnectionWithParams'
type NetworkPeeringApiMock_UpdatePeeringConnectionWithParams_Call struct {
	*mock.Call
}

// UpdatePeeringConnectionWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdatePeeringConnectionApiParams
func (_e *NetworkPeeringApiMock_Expecter) UpdatePeeringConnectionWithParams(ctx interface{}, args interface{}) *NetworkPeeringApiMock_UpdatePeeringConnectionWithParams_Call {
	return &NetworkPeeringApiMock_UpdatePeeringConnectionWithParams_Call{Call: _e.mock.On("UpdatePeeringConnectionWithParams", ctx, args)}
}

func (_c *NetworkPeeringApiMock_UpdatePeeringConnectionWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdatePeeringConnectionApiParams)) *NetworkPeeringApiMock_UpdatePeeringConnectionWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdatePeeringConnectionApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_UpdatePeeringConnectionWithParams_Call) Return(_a0 admin.UpdatePeeringConnectionApiRequest) *NetworkPeeringApiMock_UpdatePeeringConnectionWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_UpdatePeeringConnectionWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdatePeeringConnectionApiParams) admin.UpdatePeeringConnectionApiRequest) *NetworkPeeringApiMock_UpdatePeeringConnectionWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePeeringContainer provides a mock function with given fields: ctx, groupId, containerId, cloudProviderContainer
func (_m *NetworkPeeringApiMock) UpdatePeeringContainer(ctx context.Context, groupId string, containerId string, cloudProviderContainer *admin.CloudProviderContainer) admin.UpdatePeeringContainerApiRequest {
	ret := _m.Called(ctx, groupId, containerId, cloudProviderContainer)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePeeringContainer")
	}

	var r0 admin.UpdatePeeringContainerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.CloudProviderContainer) admin.UpdatePeeringContainerApiRequest); ok {
		r0 = rf(ctx, groupId, containerId, cloudProviderContainer)
	} else {
		r0 = ret.Get(0).(admin.UpdatePeeringContainerApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_UpdatePeeringContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePeeringContainer'
type NetworkPeeringApiMock_UpdatePeeringContainer_Call struct {
	*mock.Call
}

// UpdatePeeringContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - containerId string
//   - cloudProviderContainer *admin.CloudProviderContainer
func (_e *NetworkPeeringApiMock_Expecter) UpdatePeeringContainer(ctx interface{}, groupId interface{}, containerId interface{}, cloudProviderContainer interface{}) *NetworkPeeringApiMock_UpdatePeeringContainer_Call {
	return &NetworkPeeringApiMock_UpdatePeeringContainer_Call{Call: _e.mock.On("UpdatePeeringContainer", ctx, groupId, containerId, cloudProviderContainer)}
}

func (_c *NetworkPeeringApiMock_UpdatePeeringContainer_Call) Run(run func(ctx context.Context, groupId string, containerId string, cloudProviderContainer *admin.CloudProviderContainer)) *NetworkPeeringApiMock_UpdatePeeringContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.CloudProviderContainer))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_UpdatePeeringContainer_Call) Return(_a0 admin.UpdatePeeringContainerApiRequest) *NetworkPeeringApiMock_UpdatePeeringContainer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_UpdatePeeringContainer_Call) RunAndReturn(run func(context.Context, string, string, *admin.CloudProviderContainer) admin.UpdatePeeringContainerApiRequest) *NetworkPeeringApiMock_UpdatePeeringContainer_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePeeringContainerExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApiMock) UpdatePeeringContainerExecute(r admin.UpdatePeeringContainerApiRequest) (*admin.CloudProviderContainer, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePeeringContainerExecute")
	}

	var r0 *admin.CloudProviderContainer
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdatePeeringContainerApiRequest) (*admin.CloudProviderContainer, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdatePeeringContainerApiRequest) *admin.CloudProviderContainer); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.CloudProviderContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdatePeeringContainerApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdatePeeringContainerApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApiMock_UpdatePeeringContainerExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePeeringContainerExecute'
type NetworkPeeringApiMock_UpdatePeeringContainerExecute_Call struct {
	*mock.Call
}

// UpdatePeeringContainerExecute is a helper method to define mock.On call
//   - r admin.UpdatePeeringContainerApiRequest
func (_e *NetworkPeeringApiMock_Expecter) UpdatePeeringContainerExecute(r interface{}) *NetworkPeeringApiMock_UpdatePeeringContainerExecute_Call {
	return &NetworkPeeringApiMock_UpdatePeeringContainerExecute_Call{Call: _e.mock.On("UpdatePeeringContainerExecute", r)}
}

func (_c *NetworkPeeringApiMock_UpdatePeeringContainerExecute_Call) Run(run func(r admin.UpdatePeeringContainerApiRequest)) *NetworkPeeringApiMock_UpdatePeeringContainerExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdatePeeringContainerApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_UpdatePeeringContainerExecute_Call) Return(_a0 *admin.CloudProviderContainer, _a1 *http.Response, _a2 error) *NetworkPeeringApiMock_UpdatePeeringContainerExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApiMock_UpdatePeeringContainerExecute_Call) RunAndReturn(run func(admin.UpdatePeeringContainerApiRequest) (*admin.CloudProviderContainer, *http.Response, error)) *NetworkPeeringApiMock_UpdatePeeringContainerExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePeeringContainerWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApiMock) UpdatePeeringContainerWithParams(ctx context.Context, args *admin.UpdatePeeringContainerApiParams) admin.UpdatePeeringContainerApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePeeringContainerWithParams")
	}

	var r0 admin.UpdatePeeringContainerApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdatePeeringContainerApiParams) admin.UpdatePeeringContainerApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdatePeeringContainerApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_UpdatePeeringContainerWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePeeringContainerWithParams'
type NetworkPeeringApiMock_UpdatePeeringContainerWithParams_Call struct {
	*mock.Call
}

// UpdatePeeringContainerWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdatePeeringContainerApiParams
func (_e *NetworkPeeringApiMock_Expecter) UpdatePeeringContainerWithParams(ctx interface{}, args interface{}) *NetworkPeeringApiMock_UpdatePeeringContainerWithParams_Call {
	return &NetworkPeeringApiMock_UpdatePeeringContainerWithParams_Call{Call: _e.mock.On("UpdatePeeringContainerWithParams", ctx, args)}
}

func (_c *NetworkPeeringApiMock_UpdatePeeringContainerWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdatePeeringContainerApiParams)) *NetworkPeeringApiMock_UpdatePeeringContainerWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdatePeeringContainerApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_UpdatePeeringContainerWithParams_Call) Return(_a0 admin.UpdatePeeringContainerApiRequest) *NetworkPeeringApiMock_UpdatePeeringContainerWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_UpdatePeeringContainerWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdatePeeringContainerApiParams) admin.UpdatePeeringContainerApiRequest) *NetworkPeeringApiMock_UpdatePeeringContainerWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyConnectViaPeeringOnlyModeForOneProject provides a mock function with given fields: ctx, groupId
func (_m *NetworkPeeringApiMock) VerifyConnectViaPeeringOnlyModeForOneProject(ctx context.Context, groupId string) admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest {
	ret := _m.Called(ctx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for VerifyConnectViaPeeringOnlyModeForOneProject")
	}

	var r0 admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest); ok {
		r0 = rf(ctx, groupId)
	} else {
		r0 = ret.Get(0).(admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyConnectViaPeeringOnlyModeForOneProject'
type NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProject_Call struct {
	*mock.Call
}

// VerifyConnectViaPeeringOnlyModeForOneProject is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
func (_e *NetworkPeeringApiMock_Expecter) VerifyConnectViaPeeringOnlyModeForOneProject(ctx interface{}, groupId interface{}) *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProject_Call {
	return &NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProject_Call{Call: _e.mock.On("VerifyConnectViaPeeringOnlyModeForOneProject", ctx, groupId)}
}

func (_c *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProject_Call) Run(run func(ctx context.Context, groupId string)) *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProject_Call) Return(_a0 admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest) *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProject_Call) RunAndReturn(run func(context.Context, string) admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest) *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProject_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyConnectViaPeeringOnlyModeForOneProjectExecute provides a mock function with given fields: r
func (_m *NetworkPeeringApiMock) VerifyConnectViaPeeringOnlyModeForOneProjectExecute(r admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest) (*admin.PrivateIPMode, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for VerifyConnectViaPeeringOnlyModeForOneProjectExecute")
	}

	var r0 *admin.PrivateIPMode
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest) (*admin.PrivateIPMode, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest) *admin.PrivateIPMode); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PrivateIPMode)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyConnectViaPeeringOnlyModeForOneProjectExecute'
type NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProjectExecute_Call struct {
	*mock.Call
}

// VerifyConnectViaPeeringOnlyModeForOneProjectExecute is a helper method to define mock.On call
//   - r admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest
func (_e *NetworkPeeringApiMock_Expecter) VerifyConnectViaPeeringOnlyModeForOneProjectExecute(r interface{}) *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProjectExecute_Call {
	return &NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProjectExecute_Call{Call: _e.mock.On("VerifyConnectViaPeeringOnlyModeForOneProjectExecute", r)}
}

func (_c *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProjectExecute_Call) Run(run func(r admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest)) *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProjectExecute_Call) Return(_a0 *admin.PrivateIPMode, _a1 *http.Response, _a2 error) *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProjectExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProjectExecute_Call) RunAndReturn(run func(admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest) (*admin.PrivateIPMode, *http.Response, error)) *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyConnectViaPeeringOnlyModeForOneProjectWithParams provides a mock function with given fields: ctx, args
func (_m *NetworkPeeringApiMock) VerifyConnectViaPeeringOnlyModeForOneProjectWithParams(ctx context.Context, args *admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiParams) admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for VerifyConnectViaPeeringOnlyModeForOneProjectWithParams")
	}

	var r0 admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiParams) admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest)
	}

	return r0
}

// NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProjectWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyConnectViaPeeringOnlyModeForOneProjectWithParams'
type NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProjectWithParams_Call struct {
	*mock.Call
}

// VerifyConnectViaPeeringOnlyModeForOneProjectWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiParams
func (_e *NetworkPeeringApiMock_Expecter) VerifyConnectViaPeeringOnlyModeForOneProjectWithParams(ctx interface{}, args interface{}) *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProjectWithParams_Call {
	return &NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProjectWithParams_Call{Call: _e.mock.On("VerifyConnectViaPeeringOnlyModeForOneProjectWithParams", ctx, args)}
}

func (_c *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProjectWithParams_Call) Run(run func(ctx context.Context, args *admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiParams)) *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProjectWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiParams))
	})
	return _c
}

func (_c *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProjectWithParams_Call) Return(_a0 admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest) *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProjectWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProjectWithParams_Call) RunAndReturn(run func(context.Context, *admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiParams) admin.VerifyConnectViaPeeringOnlyModeForOneProjectApiRequest) *NetworkPeeringApiMock_VerifyConnectViaPeeringOnlyModeForOneProjectWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewNetworkPeeringApiMock creates a new instance of NetworkPeeringApiMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNetworkPeeringApiMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *NetworkPeeringApiMock {
	mock := &NetworkPeeringApiMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
