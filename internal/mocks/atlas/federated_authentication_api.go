// Code generated by mockery. DO NOT EDIT.

package atlas

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20231115004/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// FederatedAuthenticationApiMock is an autogenerated mock type for the FederatedAuthenticationApi type
type FederatedAuthenticationApiMock struct {
	mock.Mock
}

type FederatedAuthenticationApiMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FederatedAuthenticationApiMock) EXPECT() *FederatedAuthenticationApiMock_Expecter {
	return &FederatedAuthenticationApiMock_Expecter{mock: &_m.Mock}
}

// CreateRoleMapping provides a mock function with given fields: ctx, federationSettingsId, orgId, authFederationRoleMapping
func (_m *FederatedAuthenticationApiMock) CreateRoleMapping(ctx context.Context, federationSettingsId string, orgId string, authFederationRoleMapping *admin.AuthFederationRoleMapping) admin.CreateRoleMappingApiRequest {
	ret := _m.Called(ctx, federationSettingsId, orgId, authFederationRoleMapping)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoleMapping")
	}

	var r0 admin.CreateRoleMappingApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.AuthFederationRoleMapping) admin.CreateRoleMappingApiRequest); ok {
		r0 = rf(ctx, federationSettingsId, orgId, authFederationRoleMapping)
	} else {
		r0 = ret.Get(0).(admin.CreateRoleMappingApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_CreateRoleMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoleMapping'
type FederatedAuthenticationApiMock_CreateRoleMapping_Call struct {
	*mock.Call
}

// CreateRoleMapping is a helper method to define mock.On call
//   - ctx context.Context
//   - federationSettingsId string
//   - orgId string
//   - authFederationRoleMapping *admin.AuthFederationRoleMapping
func (_e *FederatedAuthenticationApiMock_Expecter) CreateRoleMapping(ctx interface{}, federationSettingsId interface{}, orgId interface{}, authFederationRoleMapping interface{}) *FederatedAuthenticationApiMock_CreateRoleMapping_Call {
	return &FederatedAuthenticationApiMock_CreateRoleMapping_Call{Call: _e.mock.On("CreateRoleMapping", ctx, federationSettingsId, orgId, authFederationRoleMapping)}
}

func (_c *FederatedAuthenticationApiMock_CreateRoleMapping_Call) Run(run func(ctx context.Context, federationSettingsId string, orgId string, authFederationRoleMapping *admin.AuthFederationRoleMapping)) *FederatedAuthenticationApiMock_CreateRoleMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.AuthFederationRoleMapping))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_CreateRoleMapping_Call) Return(_a0 admin.CreateRoleMappingApiRequest) *FederatedAuthenticationApiMock_CreateRoleMapping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_CreateRoleMapping_Call) RunAndReturn(run func(context.Context, string, string, *admin.AuthFederationRoleMapping) admin.CreateRoleMappingApiRequest) *FederatedAuthenticationApiMock_CreateRoleMapping_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRoleMappingExecute provides a mock function with given fields: r
func (_m *FederatedAuthenticationApiMock) CreateRoleMappingExecute(r admin.CreateRoleMappingApiRequest) (*admin.AuthFederationRoleMapping, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoleMappingExecute")
	}

	var r0 *admin.AuthFederationRoleMapping
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateRoleMappingApiRequest) (*admin.AuthFederationRoleMapping, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateRoleMappingApiRequest) *admin.AuthFederationRoleMapping); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.AuthFederationRoleMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateRoleMappingApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateRoleMappingApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FederatedAuthenticationApiMock_CreateRoleMappingExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoleMappingExecute'
type FederatedAuthenticationApiMock_CreateRoleMappingExecute_Call struct {
	*mock.Call
}

// CreateRoleMappingExecute is a helper method to define mock.On call
//   - r admin.CreateRoleMappingApiRequest
func (_e *FederatedAuthenticationApiMock_Expecter) CreateRoleMappingExecute(r interface{}) *FederatedAuthenticationApiMock_CreateRoleMappingExecute_Call {
	return &FederatedAuthenticationApiMock_CreateRoleMappingExecute_Call{Call: _e.mock.On("CreateRoleMappingExecute", r)}
}

func (_c *FederatedAuthenticationApiMock_CreateRoleMappingExecute_Call) Run(run func(r admin.CreateRoleMappingApiRequest)) *FederatedAuthenticationApiMock_CreateRoleMappingExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateRoleMappingApiRequest))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_CreateRoleMappingExecute_Call) Return(_a0 *admin.AuthFederationRoleMapping, _a1 *http.Response, _a2 error) *FederatedAuthenticationApiMock_CreateRoleMappingExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FederatedAuthenticationApiMock_CreateRoleMappingExecute_Call) RunAndReturn(run func(admin.CreateRoleMappingApiRequest) (*admin.AuthFederationRoleMapping, *http.Response, error)) *FederatedAuthenticationApiMock_CreateRoleMappingExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRoleMappingWithParams provides a mock function with given fields: ctx, args
func (_m *FederatedAuthenticationApiMock) CreateRoleMappingWithParams(ctx context.Context, args *admin.CreateRoleMappingApiParams) admin.CreateRoleMappingApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoleMappingWithParams")
	}

	var r0 admin.CreateRoleMappingApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateRoleMappingApiParams) admin.CreateRoleMappingApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateRoleMappingApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_CreateRoleMappingWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRoleMappingWithParams'
type FederatedAuthenticationApiMock_CreateRoleMappingWithParams_Call struct {
	*mock.Call
}

// CreateRoleMappingWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateRoleMappingApiParams
func (_e *FederatedAuthenticationApiMock_Expecter) CreateRoleMappingWithParams(ctx interface{}, args interface{}) *FederatedAuthenticationApiMock_CreateRoleMappingWithParams_Call {
	return &FederatedAuthenticationApiMock_CreateRoleMappingWithParams_Call{Call: _e.mock.On("CreateRoleMappingWithParams", ctx, args)}
}

func (_c *FederatedAuthenticationApiMock_CreateRoleMappingWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateRoleMappingApiParams)) *FederatedAuthenticationApiMock_CreateRoleMappingWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateRoleMappingApiParams))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_CreateRoleMappingWithParams_Call) Return(_a0 admin.CreateRoleMappingApiRequest) *FederatedAuthenticationApiMock_CreateRoleMappingWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_CreateRoleMappingWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateRoleMappingApiParams) admin.CreateRoleMappingApiRequest) *FederatedAuthenticationApiMock_CreateRoleMappingWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFederationApp provides a mock function with given fields: ctx, federationSettingsId
func (_m *FederatedAuthenticationApiMock) DeleteFederationApp(ctx context.Context, federationSettingsId string) admin.DeleteFederationAppApiRequest {
	ret := _m.Called(ctx, federationSettingsId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFederationApp")
	}

	var r0 admin.DeleteFederationAppApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.DeleteFederationAppApiRequest); ok {
		r0 = rf(ctx, federationSettingsId)
	} else {
		r0 = ret.Get(0).(admin.DeleteFederationAppApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_DeleteFederationApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFederationApp'
type FederatedAuthenticationApiMock_DeleteFederationApp_Call struct {
	*mock.Call
}

// DeleteFederationApp is a helper method to define mock.On call
//   - ctx context.Context
//   - federationSettingsId string
func (_e *FederatedAuthenticationApiMock_Expecter) DeleteFederationApp(ctx interface{}, federationSettingsId interface{}) *FederatedAuthenticationApiMock_DeleteFederationApp_Call {
	return &FederatedAuthenticationApiMock_DeleteFederationApp_Call{Call: _e.mock.On("DeleteFederationApp", ctx, federationSettingsId)}
}

func (_c *FederatedAuthenticationApiMock_DeleteFederationApp_Call) Run(run func(ctx context.Context, federationSettingsId string)) *FederatedAuthenticationApiMock_DeleteFederationApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_DeleteFederationApp_Call) Return(_a0 admin.DeleteFederationAppApiRequest) *FederatedAuthenticationApiMock_DeleteFederationApp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_DeleteFederationApp_Call) RunAndReturn(run func(context.Context, string) admin.DeleteFederationAppApiRequest) *FederatedAuthenticationApiMock_DeleteFederationApp_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFederationAppExecute provides a mock function with given fields: r
func (_m *FederatedAuthenticationApiMock) DeleteFederationAppExecute(r admin.DeleteFederationAppApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFederationAppExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteFederationAppApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteFederationAppApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteFederationAppApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FederatedAuthenticationApiMock_DeleteFederationAppExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFederationAppExecute'
type FederatedAuthenticationApiMock_DeleteFederationAppExecute_Call struct {
	*mock.Call
}

// DeleteFederationAppExecute is a helper method to define mock.On call
//   - r admin.DeleteFederationAppApiRequest
func (_e *FederatedAuthenticationApiMock_Expecter) DeleteFederationAppExecute(r interface{}) *FederatedAuthenticationApiMock_DeleteFederationAppExecute_Call {
	return &FederatedAuthenticationApiMock_DeleteFederationAppExecute_Call{Call: _e.mock.On("DeleteFederationAppExecute", r)}
}

func (_c *FederatedAuthenticationApiMock_DeleteFederationAppExecute_Call) Run(run func(r admin.DeleteFederationAppApiRequest)) *FederatedAuthenticationApiMock_DeleteFederationAppExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteFederationAppApiRequest))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_DeleteFederationAppExecute_Call) Return(_a0 *http.Response, _a1 error) *FederatedAuthenticationApiMock_DeleteFederationAppExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FederatedAuthenticationApiMock_DeleteFederationAppExecute_Call) RunAndReturn(run func(admin.DeleteFederationAppApiRequest) (*http.Response, error)) *FederatedAuthenticationApiMock_DeleteFederationAppExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFederationAppWithParams provides a mock function with given fields: ctx, args
func (_m *FederatedAuthenticationApiMock) DeleteFederationAppWithParams(ctx context.Context, args *admin.DeleteFederationAppApiParams) admin.DeleteFederationAppApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFederationAppWithParams")
	}

	var r0 admin.DeleteFederationAppApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteFederationAppApiParams) admin.DeleteFederationAppApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteFederationAppApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_DeleteFederationAppWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFederationAppWithParams'
type FederatedAuthenticationApiMock_DeleteFederationAppWithParams_Call struct {
	*mock.Call
}

// DeleteFederationAppWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteFederationAppApiParams
func (_e *FederatedAuthenticationApiMock_Expecter) DeleteFederationAppWithParams(ctx interface{}, args interface{}) *FederatedAuthenticationApiMock_DeleteFederationAppWithParams_Call {
	return &FederatedAuthenticationApiMock_DeleteFederationAppWithParams_Call{Call: _e.mock.On("DeleteFederationAppWithParams", ctx, args)}
}

func (_c *FederatedAuthenticationApiMock_DeleteFederationAppWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteFederationAppApiParams)) *FederatedAuthenticationApiMock_DeleteFederationAppWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteFederationAppApiParams))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_DeleteFederationAppWithParams_Call) Return(_a0 admin.DeleteFederationAppApiRequest) *FederatedAuthenticationApiMock_DeleteFederationAppWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_DeleteFederationAppWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteFederationAppApiParams) admin.DeleteFederationAppApiRequest) *FederatedAuthenticationApiMock_DeleteFederationAppWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRoleMapping provides a mock function with given fields: ctx, federationSettingsId, id, orgId
func (_m *FederatedAuthenticationApiMock) DeleteRoleMapping(ctx context.Context, federationSettingsId string, id string, orgId string) admin.DeleteRoleMappingApiRequest {
	ret := _m.Called(ctx, federationSettingsId, id, orgId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoleMapping")
	}

	var r0 admin.DeleteRoleMappingApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeleteRoleMappingApiRequest); ok {
		r0 = rf(ctx, federationSettingsId, id, orgId)
	} else {
		r0 = ret.Get(0).(admin.DeleteRoleMappingApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_DeleteRoleMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRoleMapping'
type FederatedAuthenticationApiMock_DeleteRoleMapping_Call struct {
	*mock.Call
}

// DeleteRoleMapping is a helper method to define mock.On call
//   - ctx context.Context
//   - federationSettingsId string
//   - id string
//   - orgId string
func (_e *FederatedAuthenticationApiMock_Expecter) DeleteRoleMapping(ctx interface{}, federationSettingsId interface{}, id interface{}, orgId interface{}) *FederatedAuthenticationApiMock_DeleteRoleMapping_Call {
	return &FederatedAuthenticationApiMock_DeleteRoleMapping_Call{Call: _e.mock.On("DeleteRoleMapping", ctx, federationSettingsId, id, orgId)}
}

func (_c *FederatedAuthenticationApiMock_DeleteRoleMapping_Call) Run(run func(ctx context.Context, federationSettingsId string, id string, orgId string)) *FederatedAuthenticationApiMock_DeleteRoleMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_DeleteRoleMapping_Call) Return(_a0 admin.DeleteRoleMappingApiRequest) *FederatedAuthenticationApiMock_DeleteRoleMapping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_DeleteRoleMapping_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeleteRoleMappingApiRequest) *FederatedAuthenticationApiMock_DeleteRoleMapping_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRoleMappingExecute provides a mock function with given fields: r
func (_m *FederatedAuthenticationApiMock) DeleteRoleMappingExecute(r admin.DeleteRoleMappingApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoleMappingExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteRoleMappingApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteRoleMappingApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteRoleMappingApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FederatedAuthenticationApiMock_DeleteRoleMappingExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRoleMappingExecute'
type FederatedAuthenticationApiMock_DeleteRoleMappingExecute_Call struct {
	*mock.Call
}

// DeleteRoleMappingExecute is a helper method to define mock.On call
//   - r admin.DeleteRoleMappingApiRequest
func (_e *FederatedAuthenticationApiMock_Expecter) DeleteRoleMappingExecute(r interface{}) *FederatedAuthenticationApiMock_DeleteRoleMappingExecute_Call {
	return &FederatedAuthenticationApiMock_DeleteRoleMappingExecute_Call{Call: _e.mock.On("DeleteRoleMappingExecute", r)}
}

func (_c *FederatedAuthenticationApiMock_DeleteRoleMappingExecute_Call) Run(run func(r admin.DeleteRoleMappingApiRequest)) *FederatedAuthenticationApiMock_DeleteRoleMappingExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteRoleMappingApiRequest))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_DeleteRoleMappingExecute_Call) Return(_a0 *http.Response, _a1 error) *FederatedAuthenticationApiMock_DeleteRoleMappingExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FederatedAuthenticationApiMock_DeleteRoleMappingExecute_Call) RunAndReturn(run func(admin.DeleteRoleMappingApiRequest) (*http.Response, error)) *FederatedAuthenticationApiMock_DeleteRoleMappingExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRoleMappingWithParams provides a mock function with given fields: ctx, args
func (_m *FederatedAuthenticationApiMock) DeleteRoleMappingWithParams(ctx context.Context, args *admin.DeleteRoleMappingApiParams) admin.DeleteRoleMappingApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoleMappingWithParams")
	}

	var r0 admin.DeleteRoleMappingApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteRoleMappingApiParams) admin.DeleteRoleMappingApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteRoleMappingApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_DeleteRoleMappingWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRoleMappingWithParams'
type FederatedAuthenticationApiMock_DeleteRoleMappingWithParams_Call struct {
	*mock.Call
}

// DeleteRoleMappingWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteRoleMappingApiParams
func (_e *FederatedAuthenticationApiMock_Expecter) DeleteRoleMappingWithParams(ctx interface{}, args interface{}) *FederatedAuthenticationApiMock_DeleteRoleMappingWithParams_Call {
	return &FederatedAuthenticationApiMock_DeleteRoleMappingWithParams_Call{Call: _e.mock.On("DeleteRoleMappingWithParams", ctx, args)}
}

func (_c *FederatedAuthenticationApiMock_DeleteRoleMappingWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteRoleMappingApiParams)) *FederatedAuthenticationApiMock_DeleteRoleMappingWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteRoleMappingApiParams))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_DeleteRoleMappingWithParams_Call) Return(_a0 admin.DeleteRoleMappingApiRequest) *FederatedAuthenticationApiMock_DeleteRoleMappingWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_DeleteRoleMappingWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteRoleMappingApiParams) admin.DeleteRoleMappingApiRequest) *FederatedAuthenticationApiMock_DeleteRoleMappingWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectedOrgConfig provides a mock function with given fields: ctx, federationSettingsId, orgId
func (_m *FederatedAuthenticationApiMock) GetConnectedOrgConfig(ctx context.Context, federationSettingsId string, orgId string) admin.GetConnectedOrgConfigApiRequest {
	ret := _m.Called(ctx, federationSettingsId, orgId)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectedOrgConfig")
	}

	var r0 admin.GetConnectedOrgConfigApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetConnectedOrgConfigApiRequest); ok {
		r0 = rf(ctx, federationSettingsId, orgId)
	} else {
		r0 = ret.Get(0).(admin.GetConnectedOrgConfigApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_GetConnectedOrgConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectedOrgConfig'
type FederatedAuthenticationApiMock_GetConnectedOrgConfig_Call struct {
	*mock.Call
}

// GetConnectedOrgConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - federationSettingsId string
//   - orgId string
func (_e *FederatedAuthenticationApiMock_Expecter) GetConnectedOrgConfig(ctx interface{}, federationSettingsId interface{}, orgId interface{}) *FederatedAuthenticationApiMock_GetConnectedOrgConfig_Call {
	return &FederatedAuthenticationApiMock_GetConnectedOrgConfig_Call{Call: _e.mock.On("GetConnectedOrgConfig", ctx, federationSettingsId, orgId)}
}

func (_c *FederatedAuthenticationApiMock_GetConnectedOrgConfig_Call) Run(run func(ctx context.Context, federationSettingsId string, orgId string)) *FederatedAuthenticationApiMock_GetConnectedOrgConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetConnectedOrgConfig_Call) Return(_a0 admin.GetConnectedOrgConfigApiRequest) *FederatedAuthenticationApiMock_GetConnectedOrgConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetConnectedOrgConfig_Call) RunAndReturn(run func(context.Context, string, string) admin.GetConnectedOrgConfigApiRequest) *FederatedAuthenticationApiMock_GetConnectedOrgConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectedOrgConfigExecute provides a mock function with given fields: r
func (_m *FederatedAuthenticationApiMock) GetConnectedOrgConfigExecute(r admin.GetConnectedOrgConfigApiRequest) (*admin.ConnectedOrgConfig, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectedOrgConfigExecute")
	}

	var r0 *admin.ConnectedOrgConfig
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetConnectedOrgConfigApiRequest) (*admin.ConnectedOrgConfig, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetConnectedOrgConfigApiRequest) *admin.ConnectedOrgConfig); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ConnectedOrgConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetConnectedOrgConfigApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetConnectedOrgConfigApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FederatedAuthenticationApiMock_GetConnectedOrgConfigExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectedOrgConfigExecute'
type FederatedAuthenticationApiMock_GetConnectedOrgConfigExecute_Call struct {
	*mock.Call
}

// GetConnectedOrgConfigExecute is a helper method to define mock.On call
//   - r admin.GetConnectedOrgConfigApiRequest
func (_e *FederatedAuthenticationApiMock_Expecter) GetConnectedOrgConfigExecute(r interface{}) *FederatedAuthenticationApiMock_GetConnectedOrgConfigExecute_Call {
	return &FederatedAuthenticationApiMock_GetConnectedOrgConfigExecute_Call{Call: _e.mock.On("GetConnectedOrgConfigExecute", r)}
}

func (_c *FederatedAuthenticationApiMock_GetConnectedOrgConfigExecute_Call) Run(run func(r admin.GetConnectedOrgConfigApiRequest)) *FederatedAuthenticationApiMock_GetConnectedOrgConfigExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetConnectedOrgConfigApiRequest))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetConnectedOrgConfigExecute_Call) Return(_a0 *admin.ConnectedOrgConfig, _a1 *http.Response, _a2 error) *FederatedAuthenticationApiMock_GetConnectedOrgConfigExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetConnectedOrgConfigExecute_Call) RunAndReturn(run func(admin.GetConnectedOrgConfigApiRequest) (*admin.ConnectedOrgConfig, *http.Response, error)) *FederatedAuthenticationApiMock_GetConnectedOrgConfigExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnectedOrgConfigWithParams provides a mock function with given fields: ctx, args
func (_m *FederatedAuthenticationApiMock) GetConnectedOrgConfigWithParams(ctx context.Context, args *admin.GetConnectedOrgConfigApiParams) admin.GetConnectedOrgConfigApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectedOrgConfigWithParams")
	}

	var r0 admin.GetConnectedOrgConfigApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetConnectedOrgConfigApiParams) admin.GetConnectedOrgConfigApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetConnectedOrgConfigApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_GetConnectedOrgConfigWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnectedOrgConfigWithParams'
type FederatedAuthenticationApiMock_GetConnectedOrgConfigWithParams_Call struct {
	*mock.Call
}

// GetConnectedOrgConfigWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetConnectedOrgConfigApiParams
func (_e *FederatedAuthenticationApiMock_Expecter) GetConnectedOrgConfigWithParams(ctx interface{}, args interface{}) *FederatedAuthenticationApiMock_GetConnectedOrgConfigWithParams_Call {
	return &FederatedAuthenticationApiMock_GetConnectedOrgConfigWithParams_Call{Call: _e.mock.On("GetConnectedOrgConfigWithParams", ctx, args)}
}

func (_c *FederatedAuthenticationApiMock_GetConnectedOrgConfigWithParams_Call) Run(run func(ctx context.Context, args *admin.GetConnectedOrgConfigApiParams)) *FederatedAuthenticationApiMock_GetConnectedOrgConfigWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetConnectedOrgConfigApiParams))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetConnectedOrgConfigWithParams_Call) Return(_a0 admin.GetConnectedOrgConfigApiRequest) *FederatedAuthenticationApiMock_GetConnectedOrgConfigWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetConnectedOrgConfigWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetConnectedOrgConfigApiParams) admin.GetConnectedOrgConfigApiRequest) *FederatedAuthenticationApiMock_GetConnectedOrgConfigWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetFederationSettings provides a mock function with given fields: ctx, orgId
func (_m *FederatedAuthenticationApiMock) GetFederationSettings(ctx context.Context, orgId string) admin.GetFederationSettingsApiRequest {
	ret := _m.Called(ctx, orgId)

	if len(ret) == 0 {
		panic("no return value specified for GetFederationSettings")
	}

	var r0 admin.GetFederationSettingsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.GetFederationSettingsApiRequest); ok {
		r0 = rf(ctx, orgId)
	} else {
		r0 = ret.Get(0).(admin.GetFederationSettingsApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_GetFederationSettings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFederationSettings'
type FederatedAuthenticationApiMock_GetFederationSettings_Call struct {
	*mock.Call
}

// GetFederationSettings is a helper method to define mock.On call
//   - ctx context.Context
//   - orgId string
func (_e *FederatedAuthenticationApiMock_Expecter) GetFederationSettings(ctx interface{}, orgId interface{}) *FederatedAuthenticationApiMock_GetFederationSettings_Call {
	return &FederatedAuthenticationApiMock_GetFederationSettings_Call{Call: _e.mock.On("GetFederationSettings", ctx, orgId)}
}

func (_c *FederatedAuthenticationApiMock_GetFederationSettings_Call) Run(run func(ctx context.Context, orgId string)) *FederatedAuthenticationApiMock_GetFederationSettings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetFederationSettings_Call) Return(_a0 admin.GetFederationSettingsApiRequest) *FederatedAuthenticationApiMock_GetFederationSettings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetFederationSettings_Call) RunAndReturn(run func(context.Context, string) admin.GetFederationSettingsApiRequest) *FederatedAuthenticationApiMock_GetFederationSettings_Call {
	_c.Call.Return(run)
	return _c
}

// GetFederationSettingsExecute provides a mock function with given fields: r
func (_m *FederatedAuthenticationApiMock) GetFederationSettingsExecute(r admin.GetFederationSettingsApiRequest) (*admin.OrgFederationSettings, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetFederationSettingsExecute")
	}

	var r0 *admin.OrgFederationSettings
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetFederationSettingsApiRequest) (*admin.OrgFederationSettings, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetFederationSettingsApiRequest) *admin.OrgFederationSettings); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.OrgFederationSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetFederationSettingsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetFederationSettingsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FederatedAuthenticationApiMock_GetFederationSettingsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFederationSettingsExecute'
type FederatedAuthenticationApiMock_GetFederationSettingsExecute_Call struct {
	*mock.Call
}

// GetFederationSettingsExecute is a helper method to define mock.On call
//   - r admin.GetFederationSettingsApiRequest
func (_e *FederatedAuthenticationApiMock_Expecter) GetFederationSettingsExecute(r interface{}) *FederatedAuthenticationApiMock_GetFederationSettingsExecute_Call {
	return &FederatedAuthenticationApiMock_GetFederationSettingsExecute_Call{Call: _e.mock.On("GetFederationSettingsExecute", r)}
}

func (_c *FederatedAuthenticationApiMock_GetFederationSettingsExecute_Call) Run(run func(r admin.GetFederationSettingsApiRequest)) *FederatedAuthenticationApiMock_GetFederationSettingsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetFederationSettingsApiRequest))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetFederationSettingsExecute_Call) Return(_a0 *admin.OrgFederationSettings, _a1 *http.Response, _a2 error) *FederatedAuthenticationApiMock_GetFederationSettingsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetFederationSettingsExecute_Call) RunAndReturn(run func(admin.GetFederationSettingsApiRequest) (*admin.OrgFederationSettings, *http.Response, error)) *FederatedAuthenticationApiMock_GetFederationSettingsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetFederationSettingsWithParams provides a mock function with given fields: ctx, args
func (_m *FederatedAuthenticationApiMock) GetFederationSettingsWithParams(ctx context.Context, args *admin.GetFederationSettingsApiParams) admin.GetFederationSettingsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetFederationSettingsWithParams")
	}

	var r0 admin.GetFederationSettingsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetFederationSettingsApiParams) admin.GetFederationSettingsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetFederationSettingsApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_GetFederationSettingsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFederationSettingsWithParams'
type FederatedAuthenticationApiMock_GetFederationSettingsWithParams_Call struct {
	*mock.Call
}

// GetFederationSettingsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetFederationSettingsApiParams
func (_e *FederatedAuthenticationApiMock_Expecter) GetFederationSettingsWithParams(ctx interface{}, args interface{}) *FederatedAuthenticationApiMock_GetFederationSettingsWithParams_Call {
	return &FederatedAuthenticationApiMock_GetFederationSettingsWithParams_Call{Call: _e.mock.On("GetFederationSettingsWithParams", ctx, args)}
}

func (_c *FederatedAuthenticationApiMock_GetFederationSettingsWithParams_Call) Run(run func(ctx context.Context, args *admin.GetFederationSettingsApiParams)) *FederatedAuthenticationApiMock_GetFederationSettingsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetFederationSettingsApiParams))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetFederationSettingsWithParams_Call) Return(_a0 admin.GetFederationSettingsApiRequest) *FederatedAuthenticationApiMock_GetFederationSettingsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetFederationSettingsWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetFederationSettingsApiParams) admin.GetFederationSettingsApiRequest) *FederatedAuthenticationApiMock_GetFederationSettingsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetIdentityProvider provides a mock function with given fields: ctx, federationSettingsId, identityProviderId
func (_m *FederatedAuthenticationApiMock) GetIdentityProvider(ctx context.Context, federationSettingsId string, identityProviderId string) admin.GetIdentityProviderApiRequest {
	ret := _m.Called(ctx, federationSettingsId, identityProviderId)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityProvider")
	}

	var r0 admin.GetIdentityProviderApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetIdentityProviderApiRequest); ok {
		r0 = rf(ctx, federationSettingsId, identityProviderId)
	} else {
		r0 = ret.Get(0).(admin.GetIdentityProviderApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_GetIdentityProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIdentityProvider'
type FederatedAuthenticationApiMock_GetIdentityProvider_Call struct {
	*mock.Call
}

// GetIdentityProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - federationSettingsId string
//   - identityProviderId string
func (_e *FederatedAuthenticationApiMock_Expecter) GetIdentityProvider(ctx interface{}, federationSettingsId interface{}, identityProviderId interface{}) *FederatedAuthenticationApiMock_GetIdentityProvider_Call {
	return &FederatedAuthenticationApiMock_GetIdentityProvider_Call{Call: _e.mock.On("GetIdentityProvider", ctx, federationSettingsId, identityProviderId)}
}

func (_c *FederatedAuthenticationApiMock_GetIdentityProvider_Call) Run(run func(ctx context.Context, federationSettingsId string, identityProviderId string)) *FederatedAuthenticationApiMock_GetIdentityProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetIdentityProvider_Call) Return(_a0 admin.GetIdentityProviderApiRequest) *FederatedAuthenticationApiMock_GetIdentityProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetIdentityProvider_Call) RunAndReturn(run func(context.Context, string, string) admin.GetIdentityProviderApiRequest) *FederatedAuthenticationApiMock_GetIdentityProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetIdentityProviderExecute provides a mock function with given fields: r
func (_m *FederatedAuthenticationApiMock) GetIdentityProviderExecute(r admin.GetIdentityProviderApiRequest) (*admin.FederationIdentityProvider, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityProviderExecute")
	}

	var r0 *admin.FederationIdentityProvider
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetIdentityProviderApiRequest) (*admin.FederationIdentityProvider, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetIdentityProviderApiRequest) *admin.FederationIdentityProvider); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.FederationIdentityProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetIdentityProviderApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetIdentityProviderApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FederatedAuthenticationApiMock_GetIdentityProviderExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIdentityProviderExecute'
type FederatedAuthenticationApiMock_GetIdentityProviderExecute_Call struct {
	*mock.Call
}

// GetIdentityProviderExecute is a helper method to define mock.On call
//   - r admin.GetIdentityProviderApiRequest
func (_e *FederatedAuthenticationApiMock_Expecter) GetIdentityProviderExecute(r interface{}) *FederatedAuthenticationApiMock_GetIdentityProviderExecute_Call {
	return &FederatedAuthenticationApiMock_GetIdentityProviderExecute_Call{Call: _e.mock.On("GetIdentityProviderExecute", r)}
}

func (_c *FederatedAuthenticationApiMock_GetIdentityProviderExecute_Call) Run(run func(r admin.GetIdentityProviderApiRequest)) *FederatedAuthenticationApiMock_GetIdentityProviderExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetIdentityProviderApiRequest))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetIdentityProviderExecute_Call) Return(_a0 *admin.FederationIdentityProvider, _a1 *http.Response, _a2 error) *FederatedAuthenticationApiMock_GetIdentityProviderExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetIdentityProviderExecute_Call) RunAndReturn(run func(admin.GetIdentityProviderApiRequest) (*admin.FederationIdentityProvider, *http.Response, error)) *FederatedAuthenticationApiMock_GetIdentityProviderExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetIdentityProviderMetadata provides a mock function with given fields: ctx, federationSettingsId, identityProviderId
func (_m *FederatedAuthenticationApiMock) GetIdentityProviderMetadata(ctx context.Context, federationSettingsId string, identityProviderId string) admin.GetIdentityProviderMetadataApiRequest {
	ret := _m.Called(ctx, federationSettingsId, identityProviderId)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityProviderMetadata")
	}

	var r0 admin.GetIdentityProviderMetadataApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetIdentityProviderMetadataApiRequest); ok {
		r0 = rf(ctx, federationSettingsId, identityProviderId)
	} else {
		r0 = ret.Get(0).(admin.GetIdentityProviderMetadataApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_GetIdentityProviderMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIdentityProviderMetadata'
type FederatedAuthenticationApiMock_GetIdentityProviderMetadata_Call struct {
	*mock.Call
}

// GetIdentityProviderMetadata is a helper method to define mock.On call
//   - ctx context.Context
//   - federationSettingsId string
//   - identityProviderId string
func (_e *FederatedAuthenticationApiMock_Expecter) GetIdentityProviderMetadata(ctx interface{}, federationSettingsId interface{}, identityProviderId interface{}) *FederatedAuthenticationApiMock_GetIdentityProviderMetadata_Call {
	return &FederatedAuthenticationApiMock_GetIdentityProviderMetadata_Call{Call: _e.mock.On("GetIdentityProviderMetadata", ctx, federationSettingsId, identityProviderId)}
}

func (_c *FederatedAuthenticationApiMock_GetIdentityProviderMetadata_Call) Run(run func(ctx context.Context, federationSettingsId string, identityProviderId string)) *FederatedAuthenticationApiMock_GetIdentityProviderMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetIdentityProviderMetadata_Call) Return(_a0 admin.GetIdentityProviderMetadataApiRequest) *FederatedAuthenticationApiMock_GetIdentityProviderMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetIdentityProviderMetadata_Call) RunAndReturn(run func(context.Context, string, string) admin.GetIdentityProviderMetadataApiRequest) *FederatedAuthenticationApiMock_GetIdentityProviderMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetIdentityProviderMetadataExecute provides a mock function with given fields: r
func (_m *FederatedAuthenticationApiMock) GetIdentityProviderMetadataExecute(r admin.GetIdentityProviderMetadataApiRequest) (string, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityProviderMetadataExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetIdentityProviderMetadataApiRequest) (string, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetIdentityProviderMetadataApiRequest) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(admin.GetIdentityProviderMetadataApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetIdentityProviderMetadataApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FederatedAuthenticationApiMock_GetIdentityProviderMetadataExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIdentityProviderMetadataExecute'
type FederatedAuthenticationApiMock_GetIdentityProviderMetadataExecute_Call struct {
	*mock.Call
}

// GetIdentityProviderMetadataExecute is a helper method to define mock.On call
//   - r admin.GetIdentityProviderMetadataApiRequest
func (_e *FederatedAuthenticationApiMock_Expecter) GetIdentityProviderMetadataExecute(r interface{}) *FederatedAuthenticationApiMock_GetIdentityProviderMetadataExecute_Call {
	return &FederatedAuthenticationApiMock_GetIdentityProviderMetadataExecute_Call{Call: _e.mock.On("GetIdentityProviderMetadataExecute", r)}
}

func (_c *FederatedAuthenticationApiMock_GetIdentityProviderMetadataExecute_Call) Run(run func(r admin.GetIdentityProviderMetadataApiRequest)) *FederatedAuthenticationApiMock_GetIdentityProviderMetadataExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetIdentityProviderMetadataApiRequest))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetIdentityProviderMetadataExecute_Call) Return(_a0 string, _a1 *http.Response, _a2 error) *FederatedAuthenticationApiMock_GetIdentityProviderMetadataExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetIdentityProviderMetadataExecute_Call) RunAndReturn(run func(admin.GetIdentityProviderMetadataApiRequest) (string, *http.Response, error)) *FederatedAuthenticationApiMock_GetIdentityProviderMetadataExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetIdentityProviderMetadataWithParams provides a mock function with given fields: ctx, args
func (_m *FederatedAuthenticationApiMock) GetIdentityProviderMetadataWithParams(ctx context.Context, args *admin.GetIdentityProviderMetadataApiParams) admin.GetIdentityProviderMetadataApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityProviderMetadataWithParams")
	}

	var r0 admin.GetIdentityProviderMetadataApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetIdentityProviderMetadataApiParams) admin.GetIdentityProviderMetadataApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetIdentityProviderMetadataApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_GetIdentityProviderMetadataWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIdentityProviderMetadataWithParams'
type FederatedAuthenticationApiMock_GetIdentityProviderMetadataWithParams_Call struct {
	*mock.Call
}

// GetIdentityProviderMetadataWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetIdentityProviderMetadataApiParams
func (_e *FederatedAuthenticationApiMock_Expecter) GetIdentityProviderMetadataWithParams(ctx interface{}, args interface{}) *FederatedAuthenticationApiMock_GetIdentityProviderMetadataWithParams_Call {
	return &FederatedAuthenticationApiMock_GetIdentityProviderMetadataWithParams_Call{Call: _e.mock.On("GetIdentityProviderMetadataWithParams", ctx, args)}
}

func (_c *FederatedAuthenticationApiMock_GetIdentityProviderMetadataWithParams_Call) Run(run func(ctx context.Context, args *admin.GetIdentityProviderMetadataApiParams)) *FederatedAuthenticationApiMock_GetIdentityProviderMetadataWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetIdentityProviderMetadataApiParams))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetIdentityProviderMetadataWithParams_Call) Return(_a0 admin.GetIdentityProviderMetadataApiRequest) *FederatedAuthenticationApiMock_GetIdentityProviderMetadataWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetIdentityProviderMetadataWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetIdentityProviderMetadataApiParams) admin.GetIdentityProviderMetadataApiRequest) *FederatedAuthenticationApiMock_GetIdentityProviderMetadataWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetIdentityProviderWithParams provides a mock function with given fields: ctx, args
func (_m *FederatedAuthenticationApiMock) GetIdentityProviderWithParams(ctx context.Context, args *admin.GetIdentityProviderApiParams) admin.GetIdentityProviderApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityProviderWithParams")
	}

	var r0 admin.GetIdentityProviderApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetIdentityProviderApiParams) admin.GetIdentityProviderApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetIdentityProviderApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_GetIdentityProviderWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIdentityProviderWithParams'
type FederatedAuthenticationApiMock_GetIdentityProviderWithParams_Call struct {
	*mock.Call
}

// GetIdentityProviderWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetIdentityProviderApiParams
func (_e *FederatedAuthenticationApiMock_Expecter) GetIdentityProviderWithParams(ctx interface{}, args interface{}) *FederatedAuthenticationApiMock_GetIdentityProviderWithParams_Call {
	return &FederatedAuthenticationApiMock_GetIdentityProviderWithParams_Call{Call: _e.mock.On("GetIdentityProviderWithParams", ctx, args)}
}

func (_c *FederatedAuthenticationApiMock_GetIdentityProviderWithParams_Call) Run(run func(ctx context.Context, args *admin.GetIdentityProviderApiParams)) *FederatedAuthenticationApiMock_GetIdentityProviderWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetIdentityProviderApiParams))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetIdentityProviderWithParams_Call) Return(_a0 admin.GetIdentityProviderApiRequest) *FederatedAuthenticationApiMock_GetIdentityProviderWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetIdentityProviderWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetIdentityProviderApiParams) admin.GetIdentityProviderApiRequest) *FederatedAuthenticationApiMock_GetIdentityProviderWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleMapping provides a mock function with given fields: ctx, federationSettingsId, id, orgId
func (_m *FederatedAuthenticationApiMock) GetRoleMapping(ctx context.Context, federationSettingsId string, id string, orgId string) admin.GetRoleMappingApiRequest {
	ret := _m.Called(ctx, federationSettingsId, id, orgId)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleMapping")
	}

	var r0 admin.GetRoleMappingApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetRoleMappingApiRequest); ok {
		r0 = rf(ctx, federationSettingsId, id, orgId)
	} else {
		r0 = ret.Get(0).(admin.GetRoleMappingApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_GetRoleMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleMapping'
type FederatedAuthenticationApiMock_GetRoleMapping_Call struct {
	*mock.Call
}

// GetRoleMapping is a helper method to define mock.On call
//   - ctx context.Context
//   - federationSettingsId string
//   - id string
//   - orgId string
func (_e *FederatedAuthenticationApiMock_Expecter) GetRoleMapping(ctx interface{}, federationSettingsId interface{}, id interface{}, orgId interface{}) *FederatedAuthenticationApiMock_GetRoleMapping_Call {
	return &FederatedAuthenticationApiMock_GetRoleMapping_Call{Call: _e.mock.On("GetRoleMapping", ctx, federationSettingsId, id, orgId)}
}

func (_c *FederatedAuthenticationApiMock_GetRoleMapping_Call) Run(run func(ctx context.Context, federationSettingsId string, id string, orgId string)) *FederatedAuthenticationApiMock_GetRoleMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetRoleMapping_Call) Return(_a0 admin.GetRoleMappingApiRequest) *FederatedAuthenticationApiMock_GetRoleMapping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetRoleMapping_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetRoleMappingApiRequest) *FederatedAuthenticationApiMock_GetRoleMapping_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleMappingExecute provides a mock function with given fields: r
func (_m *FederatedAuthenticationApiMock) GetRoleMappingExecute(r admin.GetRoleMappingApiRequest) (*admin.AuthFederationRoleMapping, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleMappingExecute")
	}

	var r0 *admin.AuthFederationRoleMapping
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetRoleMappingApiRequest) (*admin.AuthFederationRoleMapping, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetRoleMappingApiRequest) *admin.AuthFederationRoleMapping); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.AuthFederationRoleMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetRoleMappingApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetRoleMappingApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FederatedAuthenticationApiMock_GetRoleMappingExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleMappingExecute'
type FederatedAuthenticationApiMock_GetRoleMappingExecute_Call struct {
	*mock.Call
}

// GetRoleMappingExecute is a helper method to define mock.On call
//   - r admin.GetRoleMappingApiRequest
func (_e *FederatedAuthenticationApiMock_Expecter) GetRoleMappingExecute(r interface{}) *FederatedAuthenticationApiMock_GetRoleMappingExecute_Call {
	return &FederatedAuthenticationApiMock_GetRoleMappingExecute_Call{Call: _e.mock.On("GetRoleMappingExecute", r)}
}

func (_c *FederatedAuthenticationApiMock_GetRoleMappingExecute_Call) Run(run func(r admin.GetRoleMappingApiRequest)) *FederatedAuthenticationApiMock_GetRoleMappingExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetRoleMappingApiRequest))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetRoleMappingExecute_Call) Return(_a0 *admin.AuthFederationRoleMapping, _a1 *http.Response, _a2 error) *FederatedAuthenticationApiMock_GetRoleMappingExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetRoleMappingExecute_Call) RunAndReturn(run func(admin.GetRoleMappingApiRequest) (*admin.AuthFederationRoleMapping, *http.Response, error)) *FederatedAuthenticationApiMock_GetRoleMappingExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleMappingWithParams provides a mock function with given fields: ctx, args
func (_m *FederatedAuthenticationApiMock) GetRoleMappingWithParams(ctx context.Context, args *admin.GetRoleMappingApiParams) admin.GetRoleMappingApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleMappingWithParams")
	}

	var r0 admin.GetRoleMappingApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetRoleMappingApiParams) admin.GetRoleMappingApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetRoleMappingApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_GetRoleMappingWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleMappingWithParams'
type FederatedAuthenticationApiMock_GetRoleMappingWithParams_Call struct {
	*mock.Call
}

// GetRoleMappingWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetRoleMappingApiParams
func (_e *FederatedAuthenticationApiMock_Expecter) GetRoleMappingWithParams(ctx interface{}, args interface{}) *FederatedAuthenticationApiMock_GetRoleMappingWithParams_Call {
	return &FederatedAuthenticationApiMock_GetRoleMappingWithParams_Call{Call: _e.mock.On("GetRoleMappingWithParams", ctx, args)}
}

func (_c *FederatedAuthenticationApiMock_GetRoleMappingWithParams_Call) Run(run func(ctx context.Context, args *admin.GetRoleMappingApiParams)) *FederatedAuthenticationApiMock_GetRoleMappingWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetRoleMappingApiParams))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetRoleMappingWithParams_Call) Return(_a0 admin.GetRoleMappingApiRequest) *FederatedAuthenticationApiMock_GetRoleMappingWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_GetRoleMappingWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetRoleMappingApiParams) admin.GetRoleMappingApiRequest) *FederatedAuthenticationApiMock_GetRoleMappingWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListConnectedOrgConfigs provides a mock function with given fields: ctx, federationSettingsId
func (_m *FederatedAuthenticationApiMock) ListConnectedOrgConfigs(ctx context.Context, federationSettingsId string) admin.ListConnectedOrgConfigsApiRequest {
	ret := _m.Called(ctx, federationSettingsId)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectedOrgConfigs")
	}

	var r0 admin.ListConnectedOrgConfigsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListConnectedOrgConfigsApiRequest); ok {
		r0 = rf(ctx, federationSettingsId)
	} else {
		r0 = ret.Get(0).(admin.ListConnectedOrgConfigsApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_ListConnectedOrgConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConnectedOrgConfigs'
type FederatedAuthenticationApiMock_ListConnectedOrgConfigs_Call struct {
	*mock.Call
}

// ListConnectedOrgConfigs is a helper method to define mock.On call
//   - ctx context.Context
//   - federationSettingsId string
func (_e *FederatedAuthenticationApiMock_Expecter) ListConnectedOrgConfigs(ctx interface{}, federationSettingsId interface{}) *FederatedAuthenticationApiMock_ListConnectedOrgConfigs_Call {
	return &FederatedAuthenticationApiMock_ListConnectedOrgConfigs_Call{Call: _e.mock.On("ListConnectedOrgConfigs", ctx, federationSettingsId)}
}

func (_c *FederatedAuthenticationApiMock_ListConnectedOrgConfigs_Call) Run(run func(ctx context.Context, federationSettingsId string)) *FederatedAuthenticationApiMock_ListConnectedOrgConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_ListConnectedOrgConfigs_Call) Return(_a0 admin.ListConnectedOrgConfigsApiRequest) *FederatedAuthenticationApiMock_ListConnectedOrgConfigs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_ListConnectedOrgConfigs_Call) RunAndReturn(run func(context.Context, string) admin.ListConnectedOrgConfigsApiRequest) *FederatedAuthenticationApiMock_ListConnectedOrgConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// ListConnectedOrgConfigsExecute provides a mock function with given fields: r
func (_m *FederatedAuthenticationApiMock) ListConnectedOrgConfigsExecute(r admin.ListConnectedOrgConfigsApiRequest) ([]admin.ConnectedOrgConfig, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectedOrgConfigsExecute")
	}

	var r0 []admin.ConnectedOrgConfig
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListConnectedOrgConfigsApiRequest) ([]admin.ConnectedOrgConfig, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListConnectedOrgConfigsApiRequest) []admin.ConnectedOrgConfig); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.ConnectedOrgConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListConnectedOrgConfigsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListConnectedOrgConfigsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FederatedAuthenticationApiMock_ListConnectedOrgConfigsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConnectedOrgConfigsExecute'
type FederatedAuthenticationApiMock_ListConnectedOrgConfigsExecute_Call struct {
	*mock.Call
}

// ListConnectedOrgConfigsExecute is a helper method to define mock.On call
//   - r admin.ListConnectedOrgConfigsApiRequest
func (_e *FederatedAuthenticationApiMock_Expecter) ListConnectedOrgConfigsExecute(r interface{}) *FederatedAuthenticationApiMock_ListConnectedOrgConfigsExecute_Call {
	return &FederatedAuthenticationApiMock_ListConnectedOrgConfigsExecute_Call{Call: _e.mock.On("ListConnectedOrgConfigsExecute", r)}
}

func (_c *FederatedAuthenticationApiMock_ListConnectedOrgConfigsExecute_Call) Run(run func(r admin.ListConnectedOrgConfigsApiRequest)) *FederatedAuthenticationApiMock_ListConnectedOrgConfigsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListConnectedOrgConfigsApiRequest))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_ListConnectedOrgConfigsExecute_Call) Return(_a0 []admin.ConnectedOrgConfig, _a1 *http.Response, _a2 error) *FederatedAuthenticationApiMock_ListConnectedOrgConfigsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FederatedAuthenticationApiMock_ListConnectedOrgConfigsExecute_Call) RunAndReturn(run func(admin.ListConnectedOrgConfigsApiRequest) ([]admin.ConnectedOrgConfig, *http.Response, error)) *FederatedAuthenticationApiMock_ListConnectedOrgConfigsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListConnectedOrgConfigsWithParams provides a mock function with given fields: ctx, args
func (_m *FederatedAuthenticationApiMock) ListConnectedOrgConfigsWithParams(ctx context.Context, args *admin.ListConnectedOrgConfigsApiParams) admin.ListConnectedOrgConfigsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectedOrgConfigsWithParams")
	}

	var r0 admin.ListConnectedOrgConfigsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListConnectedOrgConfigsApiParams) admin.ListConnectedOrgConfigsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListConnectedOrgConfigsApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_ListConnectedOrgConfigsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListConnectedOrgConfigsWithParams'
type FederatedAuthenticationApiMock_ListConnectedOrgConfigsWithParams_Call struct {
	*mock.Call
}

// ListConnectedOrgConfigsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListConnectedOrgConfigsApiParams
func (_e *FederatedAuthenticationApiMock_Expecter) ListConnectedOrgConfigsWithParams(ctx interface{}, args interface{}) *FederatedAuthenticationApiMock_ListConnectedOrgConfigsWithParams_Call {
	return &FederatedAuthenticationApiMock_ListConnectedOrgConfigsWithParams_Call{Call: _e.mock.On("ListConnectedOrgConfigsWithParams", ctx, args)}
}

func (_c *FederatedAuthenticationApiMock_ListConnectedOrgConfigsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListConnectedOrgConfigsApiParams)) *FederatedAuthenticationApiMock_ListConnectedOrgConfigsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListConnectedOrgConfigsApiParams))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_ListConnectedOrgConfigsWithParams_Call) Return(_a0 admin.ListConnectedOrgConfigsApiRequest) *FederatedAuthenticationApiMock_ListConnectedOrgConfigsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_ListConnectedOrgConfigsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListConnectedOrgConfigsApiParams) admin.ListConnectedOrgConfigsApiRequest) *FederatedAuthenticationApiMock_ListConnectedOrgConfigsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListIdentityProviders provides a mock function with given fields: ctx, federationSettingsId
func (_m *FederatedAuthenticationApiMock) ListIdentityProviders(ctx context.Context, federationSettingsId string) admin.ListIdentityProvidersApiRequest {
	ret := _m.Called(ctx, federationSettingsId)

	if len(ret) == 0 {
		panic("no return value specified for ListIdentityProviders")
	}

	var r0 admin.ListIdentityProvidersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) admin.ListIdentityProvidersApiRequest); ok {
		r0 = rf(ctx, federationSettingsId)
	} else {
		r0 = ret.Get(0).(admin.ListIdentityProvidersApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_ListIdentityProviders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIdentityProviders'
type FederatedAuthenticationApiMock_ListIdentityProviders_Call struct {
	*mock.Call
}

// ListIdentityProviders is a helper method to define mock.On call
//   - ctx context.Context
//   - federationSettingsId string
func (_e *FederatedAuthenticationApiMock_Expecter) ListIdentityProviders(ctx interface{}, federationSettingsId interface{}) *FederatedAuthenticationApiMock_ListIdentityProviders_Call {
	return &FederatedAuthenticationApiMock_ListIdentityProviders_Call{Call: _e.mock.On("ListIdentityProviders", ctx, federationSettingsId)}
}

func (_c *FederatedAuthenticationApiMock_ListIdentityProviders_Call) Run(run func(ctx context.Context, federationSettingsId string)) *FederatedAuthenticationApiMock_ListIdentityProviders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_ListIdentityProviders_Call) Return(_a0 admin.ListIdentityProvidersApiRequest) *FederatedAuthenticationApiMock_ListIdentityProviders_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_ListIdentityProviders_Call) RunAndReturn(run func(context.Context, string) admin.ListIdentityProvidersApiRequest) *FederatedAuthenticationApiMock_ListIdentityProviders_Call {
	_c.Call.Return(run)
	return _c
}

// ListIdentityProvidersExecute provides a mock function with given fields: r
func (_m *FederatedAuthenticationApiMock) ListIdentityProvidersExecute(r admin.ListIdentityProvidersApiRequest) (*admin.PaginatedFederationIdentityProvider, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListIdentityProvidersExecute")
	}

	var r0 *admin.PaginatedFederationIdentityProvider
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListIdentityProvidersApiRequest) (*admin.PaginatedFederationIdentityProvider, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListIdentityProvidersApiRequest) *admin.PaginatedFederationIdentityProvider); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedFederationIdentityProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListIdentityProvidersApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListIdentityProvidersApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FederatedAuthenticationApiMock_ListIdentityProvidersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIdentityProvidersExecute'
type FederatedAuthenticationApiMock_ListIdentityProvidersExecute_Call struct {
	*mock.Call
}

// ListIdentityProvidersExecute is a helper method to define mock.On call
//   - r admin.ListIdentityProvidersApiRequest
func (_e *FederatedAuthenticationApiMock_Expecter) ListIdentityProvidersExecute(r interface{}) *FederatedAuthenticationApiMock_ListIdentityProvidersExecute_Call {
	return &FederatedAuthenticationApiMock_ListIdentityProvidersExecute_Call{Call: _e.mock.On("ListIdentityProvidersExecute", r)}
}

func (_c *FederatedAuthenticationApiMock_ListIdentityProvidersExecute_Call) Run(run func(r admin.ListIdentityProvidersApiRequest)) *FederatedAuthenticationApiMock_ListIdentityProvidersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListIdentityProvidersApiRequest))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_ListIdentityProvidersExecute_Call) Return(_a0 *admin.PaginatedFederationIdentityProvider, _a1 *http.Response, _a2 error) *FederatedAuthenticationApiMock_ListIdentityProvidersExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FederatedAuthenticationApiMock_ListIdentityProvidersExecute_Call) RunAndReturn(run func(admin.ListIdentityProvidersApiRequest) (*admin.PaginatedFederationIdentityProvider, *http.Response, error)) *FederatedAuthenticationApiMock_ListIdentityProvidersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListIdentityProvidersWithParams provides a mock function with given fields: ctx, args
func (_m *FederatedAuthenticationApiMock) ListIdentityProvidersWithParams(ctx context.Context, args *admin.ListIdentityProvidersApiParams) admin.ListIdentityProvidersApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListIdentityProvidersWithParams")
	}

	var r0 admin.ListIdentityProvidersApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListIdentityProvidersApiParams) admin.ListIdentityProvidersApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListIdentityProvidersApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_ListIdentityProvidersWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIdentityProvidersWithParams'
type FederatedAuthenticationApiMock_ListIdentityProvidersWithParams_Call struct {
	*mock.Call
}

// ListIdentityProvidersWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListIdentityProvidersApiParams
func (_e *FederatedAuthenticationApiMock_Expecter) ListIdentityProvidersWithParams(ctx interface{}, args interface{}) *FederatedAuthenticationApiMock_ListIdentityProvidersWithParams_Call {
	return &FederatedAuthenticationApiMock_ListIdentityProvidersWithParams_Call{Call: _e.mock.On("ListIdentityProvidersWithParams", ctx, args)}
}

func (_c *FederatedAuthenticationApiMock_ListIdentityProvidersWithParams_Call) Run(run func(ctx context.Context, args *admin.ListIdentityProvidersApiParams)) *FederatedAuthenticationApiMock_ListIdentityProvidersWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListIdentityProvidersApiParams))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_ListIdentityProvidersWithParams_Call) Return(_a0 admin.ListIdentityProvidersApiRequest) *FederatedAuthenticationApiMock_ListIdentityProvidersWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_ListIdentityProvidersWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListIdentityProvidersApiParams) admin.ListIdentityProvidersApiRequest) *FederatedAuthenticationApiMock_ListIdentityProvidersWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoleMappings provides a mock function with given fields: ctx, federationSettingsId, orgId
func (_m *FederatedAuthenticationApiMock) ListRoleMappings(ctx context.Context, federationSettingsId string, orgId string) admin.ListRoleMappingsApiRequest {
	ret := _m.Called(ctx, federationSettingsId, orgId)

	if len(ret) == 0 {
		panic("no return value specified for ListRoleMappings")
	}

	var r0 admin.ListRoleMappingsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.ListRoleMappingsApiRequest); ok {
		r0 = rf(ctx, federationSettingsId, orgId)
	} else {
		r0 = ret.Get(0).(admin.ListRoleMappingsApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_ListRoleMappings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoleMappings'
type FederatedAuthenticationApiMock_ListRoleMappings_Call struct {
	*mock.Call
}

// ListRoleMappings is a helper method to define mock.On call
//   - ctx context.Context
//   - federationSettingsId string
//   - orgId string
func (_e *FederatedAuthenticationApiMock_Expecter) ListRoleMappings(ctx interface{}, federationSettingsId interface{}, orgId interface{}) *FederatedAuthenticationApiMock_ListRoleMappings_Call {
	return &FederatedAuthenticationApiMock_ListRoleMappings_Call{Call: _e.mock.On("ListRoleMappings", ctx, federationSettingsId, orgId)}
}

func (_c *FederatedAuthenticationApiMock_ListRoleMappings_Call) Run(run func(ctx context.Context, federationSettingsId string, orgId string)) *FederatedAuthenticationApiMock_ListRoleMappings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_ListRoleMappings_Call) Return(_a0 admin.ListRoleMappingsApiRequest) *FederatedAuthenticationApiMock_ListRoleMappings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_ListRoleMappings_Call) RunAndReturn(run func(context.Context, string, string) admin.ListRoleMappingsApiRequest) *FederatedAuthenticationApiMock_ListRoleMappings_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoleMappingsExecute provides a mock function with given fields: r
func (_m *FederatedAuthenticationApiMock) ListRoleMappingsExecute(r admin.ListRoleMappingsApiRequest) (*admin.PaginatedRoleMapping, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListRoleMappingsExecute")
	}

	var r0 *admin.PaginatedRoleMapping
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListRoleMappingsApiRequest) (*admin.PaginatedRoleMapping, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListRoleMappingsApiRequest) *admin.PaginatedRoleMapping); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.PaginatedRoleMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListRoleMappingsApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListRoleMappingsApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FederatedAuthenticationApiMock_ListRoleMappingsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoleMappingsExecute'
type FederatedAuthenticationApiMock_ListRoleMappingsExecute_Call struct {
	*mock.Call
}

// ListRoleMappingsExecute is a helper method to define mock.On call
//   - r admin.ListRoleMappingsApiRequest
func (_e *FederatedAuthenticationApiMock_Expecter) ListRoleMappingsExecute(r interface{}) *FederatedAuthenticationApiMock_ListRoleMappingsExecute_Call {
	return &FederatedAuthenticationApiMock_ListRoleMappingsExecute_Call{Call: _e.mock.On("ListRoleMappingsExecute", r)}
}

func (_c *FederatedAuthenticationApiMock_ListRoleMappingsExecute_Call) Run(run func(r admin.ListRoleMappingsApiRequest)) *FederatedAuthenticationApiMock_ListRoleMappingsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListRoleMappingsApiRequest))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_ListRoleMappingsExecute_Call) Return(_a0 *admin.PaginatedRoleMapping, _a1 *http.Response, _a2 error) *FederatedAuthenticationApiMock_ListRoleMappingsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FederatedAuthenticationApiMock_ListRoleMappingsExecute_Call) RunAndReturn(run func(admin.ListRoleMappingsApiRequest) (*admin.PaginatedRoleMapping, *http.Response, error)) *FederatedAuthenticationApiMock_ListRoleMappingsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListRoleMappingsWithParams provides a mock function with given fields: ctx, args
func (_m *FederatedAuthenticationApiMock) ListRoleMappingsWithParams(ctx context.Context, args *admin.ListRoleMappingsApiParams) admin.ListRoleMappingsApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListRoleMappingsWithParams")
	}

	var r0 admin.ListRoleMappingsApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListRoleMappingsApiParams) admin.ListRoleMappingsApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListRoleMappingsApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_ListRoleMappingsWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoleMappingsWithParams'
type FederatedAuthenticationApiMock_ListRoleMappingsWithParams_Call struct {
	*mock.Call
}

// ListRoleMappingsWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListRoleMappingsApiParams
func (_e *FederatedAuthenticationApiMock_Expecter) ListRoleMappingsWithParams(ctx interface{}, args interface{}) *FederatedAuthenticationApiMock_ListRoleMappingsWithParams_Call {
	return &FederatedAuthenticationApiMock_ListRoleMappingsWithParams_Call{Call: _e.mock.On("ListRoleMappingsWithParams", ctx, args)}
}

func (_c *FederatedAuthenticationApiMock_ListRoleMappingsWithParams_Call) Run(run func(ctx context.Context, args *admin.ListRoleMappingsApiParams)) *FederatedAuthenticationApiMock_ListRoleMappingsWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListRoleMappingsApiParams))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_ListRoleMappingsWithParams_Call) Return(_a0 admin.ListRoleMappingsApiRequest) *FederatedAuthenticationApiMock_ListRoleMappingsWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_ListRoleMappingsWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListRoleMappingsApiParams) admin.ListRoleMappingsApiRequest) *FederatedAuthenticationApiMock_ListRoleMappingsWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveConnectedOrgConfig provides a mock function with given fields: ctx, federationSettingsId, orgId
func (_m *FederatedAuthenticationApiMock) RemoveConnectedOrgConfig(ctx context.Context, federationSettingsId string, orgId string) admin.RemoveConnectedOrgConfigApiRequest {
	ret := _m.Called(ctx, federationSettingsId, orgId)

	if len(ret) == 0 {
		panic("no return value specified for RemoveConnectedOrgConfig")
	}

	var r0 admin.RemoveConnectedOrgConfigApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.RemoveConnectedOrgConfigApiRequest); ok {
		r0 = rf(ctx, federationSettingsId, orgId)
	} else {
		r0 = ret.Get(0).(admin.RemoveConnectedOrgConfigApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_RemoveConnectedOrgConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveConnectedOrgConfig'
type FederatedAuthenticationApiMock_RemoveConnectedOrgConfig_Call struct {
	*mock.Call
}

// RemoveConnectedOrgConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - federationSettingsId string
//   - orgId string
func (_e *FederatedAuthenticationApiMock_Expecter) RemoveConnectedOrgConfig(ctx interface{}, federationSettingsId interface{}, orgId interface{}) *FederatedAuthenticationApiMock_RemoveConnectedOrgConfig_Call {
	return &FederatedAuthenticationApiMock_RemoveConnectedOrgConfig_Call{Call: _e.mock.On("RemoveConnectedOrgConfig", ctx, federationSettingsId, orgId)}
}

func (_c *FederatedAuthenticationApiMock_RemoveConnectedOrgConfig_Call) Run(run func(ctx context.Context, federationSettingsId string, orgId string)) *FederatedAuthenticationApiMock_RemoveConnectedOrgConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_RemoveConnectedOrgConfig_Call) Return(_a0 admin.RemoveConnectedOrgConfigApiRequest) *FederatedAuthenticationApiMock_RemoveConnectedOrgConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_RemoveConnectedOrgConfig_Call) RunAndReturn(run func(context.Context, string, string) admin.RemoveConnectedOrgConfigApiRequest) *FederatedAuthenticationApiMock_RemoveConnectedOrgConfig_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveConnectedOrgConfigExecute provides a mock function with given fields: r
func (_m *FederatedAuthenticationApiMock) RemoveConnectedOrgConfigExecute(r admin.RemoveConnectedOrgConfigApiRequest) (map[string]interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveConnectedOrgConfigExecute")
	}

	var r0 map[string]interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.RemoveConnectedOrgConfigApiRequest) (map[string]interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.RemoveConnectedOrgConfigApiRequest) map[string]interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.RemoveConnectedOrgConfigApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.RemoveConnectedOrgConfigApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FederatedAuthenticationApiMock_RemoveConnectedOrgConfigExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveConnectedOrgConfigExecute'
type FederatedAuthenticationApiMock_RemoveConnectedOrgConfigExecute_Call struct {
	*mock.Call
}

// RemoveConnectedOrgConfigExecute is a helper method to define mock.On call
//   - r admin.RemoveConnectedOrgConfigApiRequest
func (_e *FederatedAuthenticationApiMock_Expecter) RemoveConnectedOrgConfigExecute(r interface{}) *FederatedAuthenticationApiMock_RemoveConnectedOrgConfigExecute_Call {
	return &FederatedAuthenticationApiMock_RemoveConnectedOrgConfigExecute_Call{Call: _e.mock.On("RemoveConnectedOrgConfigExecute", r)}
}

func (_c *FederatedAuthenticationApiMock_RemoveConnectedOrgConfigExecute_Call) Run(run func(r admin.RemoveConnectedOrgConfigApiRequest)) *FederatedAuthenticationApiMock_RemoveConnectedOrgConfigExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.RemoveConnectedOrgConfigApiRequest))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_RemoveConnectedOrgConfigExecute_Call) Return(_a0 map[string]interface{}, _a1 *http.Response, _a2 error) *FederatedAuthenticationApiMock_RemoveConnectedOrgConfigExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FederatedAuthenticationApiMock_RemoveConnectedOrgConfigExecute_Call) RunAndReturn(run func(admin.RemoveConnectedOrgConfigApiRequest) (map[string]interface{}, *http.Response, error)) *FederatedAuthenticationApiMock_RemoveConnectedOrgConfigExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveConnectedOrgConfigWithParams provides a mock function with given fields: ctx, args
func (_m *FederatedAuthenticationApiMock) RemoveConnectedOrgConfigWithParams(ctx context.Context, args *admin.RemoveConnectedOrgConfigApiParams) admin.RemoveConnectedOrgConfigApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for RemoveConnectedOrgConfigWithParams")
	}

	var r0 admin.RemoveConnectedOrgConfigApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.RemoveConnectedOrgConfigApiParams) admin.RemoveConnectedOrgConfigApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.RemoveConnectedOrgConfigApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_RemoveConnectedOrgConfigWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveConnectedOrgConfigWithParams'
type FederatedAuthenticationApiMock_RemoveConnectedOrgConfigWithParams_Call struct {
	*mock.Call
}

// RemoveConnectedOrgConfigWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.RemoveConnectedOrgConfigApiParams
func (_e *FederatedAuthenticationApiMock_Expecter) RemoveConnectedOrgConfigWithParams(ctx interface{}, args interface{}) *FederatedAuthenticationApiMock_RemoveConnectedOrgConfigWithParams_Call {
	return &FederatedAuthenticationApiMock_RemoveConnectedOrgConfigWithParams_Call{Call: _e.mock.On("RemoveConnectedOrgConfigWithParams", ctx, args)}
}

func (_c *FederatedAuthenticationApiMock_RemoveConnectedOrgConfigWithParams_Call) Run(run func(ctx context.Context, args *admin.RemoveConnectedOrgConfigApiParams)) *FederatedAuthenticationApiMock_RemoveConnectedOrgConfigWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.RemoveConnectedOrgConfigApiParams))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_RemoveConnectedOrgConfigWithParams_Call) Return(_a0 admin.RemoveConnectedOrgConfigApiRequest) *FederatedAuthenticationApiMock_RemoveConnectedOrgConfigWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_RemoveConnectedOrgConfigWithParams_Call) RunAndReturn(run func(context.Context, *admin.RemoveConnectedOrgConfigApiParams) admin.RemoveConnectedOrgConfigApiRequest) *FederatedAuthenticationApiMock_RemoveConnectedOrgConfigWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConnectedOrgConfig provides a mock function with given fields: ctx, federationSettingsId, orgId, connectedOrgConfig
func (_m *FederatedAuthenticationApiMock) UpdateConnectedOrgConfig(ctx context.Context, federationSettingsId string, orgId string, connectedOrgConfig *admin.ConnectedOrgConfig) admin.UpdateConnectedOrgConfigApiRequest {
	ret := _m.Called(ctx, federationSettingsId, orgId, connectedOrgConfig)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnectedOrgConfig")
	}

	var r0 admin.UpdateConnectedOrgConfigApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.ConnectedOrgConfig) admin.UpdateConnectedOrgConfigApiRequest); ok {
		r0 = rf(ctx, federationSettingsId, orgId, connectedOrgConfig)
	} else {
		r0 = ret.Get(0).(admin.UpdateConnectedOrgConfigApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_UpdateConnectedOrgConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConnectedOrgConfig'
type FederatedAuthenticationApiMock_UpdateConnectedOrgConfig_Call struct {
	*mock.Call
}

// UpdateConnectedOrgConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - federationSettingsId string
//   - orgId string
//   - connectedOrgConfig *admin.ConnectedOrgConfig
func (_e *FederatedAuthenticationApiMock_Expecter) UpdateConnectedOrgConfig(ctx interface{}, federationSettingsId interface{}, orgId interface{}, connectedOrgConfig interface{}) *FederatedAuthenticationApiMock_UpdateConnectedOrgConfig_Call {
	return &FederatedAuthenticationApiMock_UpdateConnectedOrgConfig_Call{Call: _e.mock.On("UpdateConnectedOrgConfig", ctx, federationSettingsId, orgId, connectedOrgConfig)}
}

func (_c *FederatedAuthenticationApiMock_UpdateConnectedOrgConfig_Call) Run(run func(ctx context.Context, federationSettingsId string, orgId string, connectedOrgConfig *admin.ConnectedOrgConfig)) *FederatedAuthenticationApiMock_UpdateConnectedOrgConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.ConnectedOrgConfig))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_UpdateConnectedOrgConfig_Call) Return(_a0 admin.UpdateConnectedOrgConfigApiRequest) *FederatedAuthenticationApiMock_UpdateConnectedOrgConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_UpdateConnectedOrgConfig_Call) RunAndReturn(run func(context.Context, string, string, *admin.ConnectedOrgConfig) admin.UpdateConnectedOrgConfigApiRequest) *FederatedAuthenticationApiMock_UpdateConnectedOrgConfig_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConnectedOrgConfigExecute provides a mock function with given fields: r
func (_m *FederatedAuthenticationApiMock) UpdateConnectedOrgConfigExecute(r admin.UpdateConnectedOrgConfigApiRequest) (*admin.ConnectedOrgConfig, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnectedOrgConfigExecute")
	}

	var r0 *admin.ConnectedOrgConfig
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateConnectedOrgConfigApiRequest) (*admin.ConnectedOrgConfig, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateConnectedOrgConfigApiRequest) *admin.ConnectedOrgConfig); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ConnectedOrgConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateConnectedOrgConfigApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateConnectedOrgConfigApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FederatedAuthenticationApiMock_UpdateConnectedOrgConfigExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConnectedOrgConfigExecute'
type FederatedAuthenticationApiMock_UpdateConnectedOrgConfigExecute_Call struct {
	*mock.Call
}

// UpdateConnectedOrgConfigExecute is a helper method to define mock.On call
//   - r admin.UpdateConnectedOrgConfigApiRequest
func (_e *FederatedAuthenticationApiMock_Expecter) UpdateConnectedOrgConfigExecute(r interface{}) *FederatedAuthenticationApiMock_UpdateConnectedOrgConfigExecute_Call {
	return &FederatedAuthenticationApiMock_UpdateConnectedOrgConfigExecute_Call{Call: _e.mock.On("UpdateConnectedOrgConfigExecute", r)}
}

func (_c *FederatedAuthenticationApiMock_UpdateConnectedOrgConfigExecute_Call) Run(run func(r admin.UpdateConnectedOrgConfigApiRequest)) *FederatedAuthenticationApiMock_UpdateConnectedOrgConfigExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateConnectedOrgConfigApiRequest))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_UpdateConnectedOrgConfigExecute_Call) Return(_a0 *admin.ConnectedOrgConfig, _a1 *http.Response, _a2 error) *FederatedAuthenticationApiMock_UpdateConnectedOrgConfigExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FederatedAuthenticationApiMock_UpdateConnectedOrgConfigExecute_Call) RunAndReturn(run func(admin.UpdateConnectedOrgConfigApiRequest) (*admin.ConnectedOrgConfig, *http.Response, error)) *FederatedAuthenticationApiMock_UpdateConnectedOrgConfigExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConnectedOrgConfigWithParams provides a mock function with given fields: ctx, args
func (_m *FederatedAuthenticationApiMock) UpdateConnectedOrgConfigWithParams(ctx context.Context, args *admin.UpdateConnectedOrgConfigApiParams) admin.UpdateConnectedOrgConfigApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnectedOrgConfigWithParams")
	}

	var r0 admin.UpdateConnectedOrgConfigApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateConnectedOrgConfigApiParams) admin.UpdateConnectedOrgConfigApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateConnectedOrgConfigApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_UpdateConnectedOrgConfigWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConnectedOrgConfigWithParams'
type FederatedAuthenticationApiMock_UpdateConnectedOrgConfigWithParams_Call struct {
	*mock.Call
}

// UpdateConnectedOrgConfigWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateConnectedOrgConfigApiParams
func (_e *FederatedAuthenticationApiMock_Expecter) UpdateConnectedOrgConfigWithParams(ctx interface{}, args interface{}) *FederatedAuthenticationApiMock_UpdateConnectedOrgConfigWithParams_Call {
	return &FederatedAuthenticationApiMock_UpdateConnectedOrgConfigWithParams_Call{Call: _e.mock.On("UpdateConnectedOrgConfigWithParams", ctx, args)}
}

func (_c *FederatedAuthenticationApiMock_UpdateConnectedOrgConfigWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateConnectedOrgConfigApiParams)) *FederatedAuthenticationApiMock_UpdateConnectedOrgConfigWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateConnectedOrgConfigApiParams))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_UpdateConnectedOrgConfigWithParams_Call) Return(_a0 admin.UpdateConnectedOrgConfigApiRequest) *FederatedAuthenticationApiMock_UpdateConnectedOrgConfigWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_UpdateConnectedOrgConfigWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateConnectedOrgConfigApiParams) admin.UpdateConnectedOrgConfigApiRequest) *FederatedAuthenticationApiMock_UpdateConnectedOrgConfigWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIdentityProvider provides a mock function with given fields: ctx, federationSettingsId, identityProviderId, identityProviderUpdate
func (_m *FederatedAuthenticationApiMock) UpdateIdentityProvider(ctx context.Context, federationSettingsId string, identityProviderId string, identityProviderUpdate *admin.IdentityProviderUpdate) admin.UpdateIdentityProviderApiRequest {
	ret := _m.Called(ctx, federationSettingsId, identityProviderId, identityProviderUpdate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIdentityProvider")
	}

	var r0 admin.UpdateIdentityProviderApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.IdentityProviderUpdate) admin.UpdateIdentityProviderApiRequest); ok {
		r0 = rf(ctx, federationSettingsId, identityProviderId, identityProviderUpdate)
	} else {
		r0 = ret.Get(0).(admin.UpdateIdentityProviderApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_UpdateIdentityProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIdentityProvider'
type FederatedAuthenticationApiMock_UpdateIdentityProvider_Call struct {
	*mock.Call
}

// UpdateIdentityProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - federationSettingsId string
//   - identityProviderId string
//   - identityProviderUpdate *admin.IdentityProviderUpdate
func (_e *FederatedAuthenticationApiMock_Expecter) UpdateIdentityProvider(ctx interface{}, federationSettingsId interface{}, identityProviderId interface{}, identityProviderUpdate interface{}) *FederatedAuthenticationApiMock_UpdateIdentityProvider_Call {
	return &FederatedAuthenticationApiMock_UpdateIdentityProvider_Call{Call: _e.mock.On("UpdateIdentityProvider", ctx, federationSettingsId, identityProviderId, identityProviderUpdate)}
}

func (_c *FederatedAuthenticationApiMock_UpdateIdentityProvider_Call) Run(run func(ctx context.Context, federationSettingsId string, identityProviderId string, identityProviderUpdate *admin.IdentityProviderUpdate)) *FederatedAuthenticationApiMock_UpdateIdentityProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.IdentityProviderUpdate))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_UpdateIdentityProvider_Call) Return(_a0 admin.UpdateIdentityProviderApiRequest) *FederatedAuthenticationApiMock_UpdateIdentityProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_UpdateIdentityProvider_Call) RunAndReturn(run func(context.Context, string, string, *admin.IdentityProviderUpdate) admin.UpdateIdentityProviderApiRequest) *FederatedAuthenticationApiMock_UpdateIdentityProvider_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIdentityProviderExecute provides a mock function with given fields: r
func (_m *FederatedAuthenticationApiMock) UpdateIdentityProviderExecute(r admin.UpdateIdentityProviderApiRequest) (*admin.FederationIdentityProvider, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIdentityProviderExecute")
	}

	var r0 *admin.FederationIdentityProvider
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateIdentityProviderApiRequest) (*admin.FederationIdentityProvider, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateIdentityProviderApiRequest) *admin.FederationIdentityProvider); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.FederationIdentityProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateIdentityProviderApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateIdentityProviderApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FederatedAuthenticationApiMock_UpdateIdentityProviderExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIdentityProviderExecute'
type FederatedAuthenticationApiMock_UpdateIdentityProviderExecute_Call struct {
	*mock.Call
}

// UpdateIdentityProviderExecute is a helper method to define mock.On call
//   - r admin.UpdateIdentityProviderApiRequest
func (_e *FederatedAuthenticationApiMock_Expecter) UpdateIdentityProviderExecute(r interface{}) *FederatedAuthenticationApiMock_UpdateIdentityProviderExecute_Call {
	return &FederatedAuthenticationApiMock_UpdateIdentityProviderExecute_Call{Call: _e.mock.On("UpdateIdentityProviderExecute", r)}
}

func (_c *FederatedAuthenticationApiMock_UpdateIdentityProviderExecute_Call) Run(run func(r admin.UpdateIdentityProviderApiRequest)) *FederatedAuthenticationApiMock_UpdateIdentityProviderExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateIdentityProviderApiRequest))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_UpdateIdentityProviderExecute_Call) Return(_a0 *admin.FederationIdentityProvider, _a1 *http.Response, _a2 error) *FederatedAuthenticationApiMock_UpdateIdentityProviderExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FederatedAuthenticationApiMock_UpdateIdentityProviderExecute_Call) RunAndReturn(run func(admin.UpdateIdentityProviderApiRequest) (*admin.FederationIdentityProvider, *http.Response, error)) *FederatedAuthenticationApiMock_UpdateIdentityProviderExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateIdentityProviderWithParams provides a mock function with given fields: ctx, args
func (_m *FederatedAuthenticationApiMock) UpdateIdentityProviderWithParams(ctx context.Context, args *admin.UpdateIdentityProviderApiParams) admin.UpdateIdentityProviderApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIdentityProviderWithParams")
	}

	var r0 admin.UpdateIdentityProviderApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateIdentityProviderApiParams) admin.UpdateIdentityProviderApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateIdentityProviderApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_UpdateIdentityProviderWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateIdentityProviderWithParams'
type FederatedAuthenticationApiMock_UpdateIdentityProviderWithParams_Call struct {
	*mock.Call
}

// UpdateIdentityProviderWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateIdentityProviderApiParams
func (_e *FederatedAuthenticationApiMock_Expecter) UpdateIdentityProviderWithParams(ctx interface{}, args interface{}) *FederatedAuthenticationApiMock_UpdateIdentityProviderWithParams_Call {
	return &FederatedAuthenticationApiMock_UpdateIdentityProviderWithParams_Call{Call: _e.mock.On("UpdateIdentityProviderWithParams", ctx, args)}
}

func (_c *FederatedAuthenticationApiMock_UpdateIdentityProviderWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateIdentityProviderApiParams)) *FederatedAuthenticationApiMock_UpdateIdentityProviderWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateIdentityProviderApiParams))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_UpdateIdentityProviderWithParams_Call) Return(_a0 admin.UpdateIdentityProviderApiRequest) *FederatedAuthenticationApiMock_UpdateIdentityProviderWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_UpdateIdentityProviderWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateIdentityProviderApiParams) admin.UpdateIdentityProviderApiRequest) *FederatedAuthenticationApiMock_UpdateIdentityProviderWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRoleMapping provides a mock function with given fields: ctx, federationSettingsId, id, orgId, authFederationRoleMapping
func (_m *FederatedAuthenticationApiMock) UpdateRoleMapping(ctx context.Context, federationSettingsId string, id string, orgId string, authFederationRoleMapping *admin.AuthFederationRoleMapping) admin.UpdateRoleMappingApiRequest {
	ret := _m.Called(ctx, federationSettingsId, id, orgId, authFederationRoleMapping)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoleMapping")
	}

	var r0 admin.UpdateRoleMappingApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *admin.AuthFederationRoleMapping) admin.UpdateRoleMappingApiRequest); ok {
		r0 = rf(ctx, federationSettingsId, id, orgId, authFederationRoleMapping)
	} else {
		r0 = ret.Get(0).(admin.UpdateRoleMappingApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_UpdateRoleMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRoleMapping'
type FederatedAuthenticationApiMock_UpdateRoleMapping_Call struct {
	*mock.Call
}

// UpdateRoleMapping is a helper method to define mock.On call
//   - ctx context.Context
//   - federationSettingsId string
//   - id string
//   - orgId string
//   - authFederationRoleMapping *admin.AuthFederationRoleMapping
func (_e *FederatedAuthenticationApiMock_Expecter) UpdateRoleMapping(ctx interface{}, federationSettingsId interface{}, id interface{}, orgId interface{}, authFederationRoleMapping interface{}) *FederatedAuthenticationApiMock_UpdateRoleMapping_Call {
	return &FederatedAuthenticationApiMock_UpdateRoleMapping_Call{Call: _e.mock.On("UpdateRoleMapping", ctx, federationSettingsId, id, orgId, authFederationRoleMapping)}
}

func (_c *FederatedAuthenticationApiMock_UpdateRoleMapping_Call) Run(run func(ctx context.Context, federationSettingsId string, id string, orgId string, authFederationRoleMapping *admin.AuthFederationRoleMapping)) *FederatedAuthenticationApiMock_UpdateRoleMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*admin.AuthFederationRoleMapping))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_UpdateRoleMapping_Call) Return(_a0 admin.UpdateRoleMappingApiRequest) *FederatedAuthenticationApiMock_UpdateRoleMapping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_UpdateRoleMapping_Call) RunAndReturn(run func(context.Context, string, string, string, *admin.AuthFederationRoleMapping) admin.UpdateRoleMappingApiRequest) *FederatedAuthenticationApiMock_UpdateRoleMapping_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRoleMappingExecute provides a mock function with given fields: r
func (_m *FederatedAuthenticationApiMock) UpdateRoleMappingExecute(r admin.UpdateRoleMappingApiRequest) (*admin.AuthFederationRoleMapping, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoleMappingExecute")
	}

	var r0 *admin.AuthFederationRoleMapping
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateRoleMappingApiRequest) (*admin.AuthFederationRoleMapping, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateRoleMappingApiRequest) *admin.AuthFederationRoleMapping); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.AuthFederationRoleMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateRoleMappingApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateRoleMappingApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FederatedAuthenticationApiMock_UpdateRoleMappingExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRoleMappingExecute'
type FederatedAuthenticationApiMock_UpdateRoleMappingExecute_Call struct {
	*mock.Call
}

// UpdateRoleMappingExecute is a helper method to define mock.On call
//   - r admin.UpdateRoleMappingApiRequest
func (_e *FederatedAuthenticationApiMock_Expecter) UpdateRoleMappingExecute(r interface{}) *FederatedAuthenticationApiMock_UpdateRoleMappingExecute_Call {
	return &FederatedAuthenticationApiMock_UpdateRoleMappingExecute_Call{Call: _e.mock.On("UpdateRoleMappingExecute", r)}
}

func (_c *FederatedAuthenticationApiMock_UpdateRoleMappingExecute_Call) Run(run func(r admin.UpdateRoleMappingApiRequest)) *FederatedAuthenticationApiMock_UpdateRoleMappingExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateRoleMappingApiRequest))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_UpdateRoleMappingExecute_Call) Return(_a0 *admin.AuthFederationRoleMapping, _a1 *http.Response, _a2 error) *FederatedAuthenticationApiMock_UpdateRoleMappingExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *FederatedAuthenticationApiMock_UpdateRoleMappingExecute_Call) RunAndReturn(run func(admin.UpdateRoleMappingApiRequest) (*admin.AuthFederationRoleMapping, *http.Response, error)) *FederatedAuthenticationApiMock_UpdateRoleMappingExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRoleMappingWithParams provides a mock function with given fields: ctx, args
func (_m *FederatedAuthenticationApiMock) UpdateRoleMappingWithParams(ctx context.Context, args *admin.UpdateRoleMappingApiParams) admin.UpdateRoleMappingApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoleMappingWithParams")
	}

	var r0 admin.UpdateRoleMappingApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateRoleMappingApiParams) admin.UpdateRoleMappingApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateRoleMappingApiRequest)
	}

	return r0
}

// FederatedAuthenticationApiMock_UpdateRoleMappingWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRoleMappingWithParams'
type FederatedAuthenticationApiMock_UpdateRoleMappingWithParams_Call struct {
	*mock.Call
}

// UpdateRoleMappingWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateRoleMappingApiParams
func (_e *FederatedAuthenticationApiMock_Expecter) UpdateRoleMappingWithParams(ctx interface{}, args interface{}) *FederatedAuthenticationApiMock_UpdateRoleMappingWithParams_Call {
	return &FederatedAuthenticationApiMock_UpdateRoleMappingWithParams_Call{Call: _e.mock.On("UpdateRoleMappingWithParams", ctx, args)}
}

func (_c *FederatedAuthenticationApiMock_UpdateRoleMappingWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateRoleMappingApiParams)) *FederatedAuthenticationApiMock_UpdateRoleMappingWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateRoleMappingApiParams))
	})
	return _c
}

func (_c *FederatedAuthenticationApiMock_UpdateRoleMappingWithParams_Call) Return(_a0 admin.UpdateRoleMappingApiRequest) *FederatedAuthenticationApiMock_UpdateRoleMappingWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FederatedAuthenticationApiMock_UpdateRoleMappingWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateRoleMappingApiParams) admin.UpdateRoleMappingApiRequest) *FederatedAuthenticationApiMock_UpdateRoleMappingWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewFederatedAuthenticationApiMock creates a new instance of FederatedAuthenticationApiMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFederatedAuthenticationApiMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FederatedAuthenticationApiMock {
	mock := &FederatedAuthenticationApiMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
