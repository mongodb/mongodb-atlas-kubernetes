// Code generated by mockery. DO NOT EDIT.

package atlas

import (
	context "context"

	admin "go.mongodb.org/atlas-sdk/v20231115004/admin"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// AtlasSearchApiMock is an autogenerated mock type for the AtlasSearchApi type
type AtlasSearchApiMock struct {
	mock.Mock
}

type AtlasSearchApiMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AtlasSearchApiMock) EXPECT() *AtlasSearchApiMock_Expecter {
	return &AtlasSearchApiMock_Expecter{mock: &_m.Mock}
}

// CreateAtlasSearchDeployment provides a mock function with given fields: ctx, groupId, clusterName, apiSearchDeploymentRequest
func (_m *AtlasSearchApiMock) CreateAtlasSearchDeployment(ctx context.Context, groupId string, clusterName string, apiSearchDeploymentRequest *admin.ApiSearchDeploymentRequest) admin.CreateAtlasSearchDeploymentApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, apiSearchDeploymentRequest)

	if len(ret) == 0 {
		panic("no return value specified for CreateAtlasSearchDeployment")
	}

	var r0 admin.CreateAtlasSearchDeploymentApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.ApiSearchDeploymentRequest) admin.CreateAtlasSearchDeploymentApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, apiSearchDeploymentRequest)
	} else {
		r0 = ret.Get(0).(admin.CreateAtlasSearchDeploymentApiRequest)
	}

	return r0
}

// AtlasSearchApiMock_CreateAtlasSearchDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAtlasSearchDeployment'
type AtlasSearchApiMock_CreateAtlasSearchDeployment_Call struct {
	*mock.Call
}

// CreateAtlasSearchDeployment is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - apiSearchDeploymentRequest *admin.ApiSearchDeploymentRequest
func (_e *AtlasSearchApiMock_Expecter) CreateAtlasSearchDeployment(ctx interface{}, groupId interface{}, clusterName interface{}, apiSearchDeploymentRequest interface{}) *AtlasSearchApiMock_CreateAtlasSearchDeployment_Call {
	return &AtlasSearchApiMock_CreateAtlasSearchDeployment_Call{Call: _e.mock.On("CreateAtlasSearchDeployment", ctx, groupId, clusterName, apiSearchDeploymentRequest)}
}

func (_c *AtlasSearchApiMock_CreateAtlasSearchDeployment_Call) Run(run func(ctx context.Context, groupId string, clusterName string, apiSearchDeploymentRequest *admin.ApiSearchDeploymentRequest)) *AtlasSearchApiMock_CreateAtlasSearchDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.ApiSearchDeploymentRequest))
	})
	return _c
}

func (_c *AtlasSearchApiMock_CreateAtlasSearchDeployment_Call) Return(_a0 admin.CreateAtlasSearchDeploymentApiRequest) *AtlasSearchApiMock_CreateAtlasSearchDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApiMock_CreateAtlasSearchDeployment_Call) RunAndReturn(run func(context.Context, string, string, *admin.ApiSearchDeploymentRequest) admin.CreateAtlasSearchDeploymentApiRequest) *AtlasSearchApiMock_CreateAtlasSearchDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAtlasSearchDeploymentExecute provides a mock function with given fields: r
func (_m *AtlasSearchApiMock) CreateAtlasSearchDeploymentExecute(r admin.CreateAtlasSearchDeploymentApiRequest) (*admin.ApiSearchDeploymentResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateAtlasSearchDeploymentExecute")
	}

	var r0 *admin.ApiSearchDeploymentResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateAtlasSearchDeploymentApiRequest) (*admin.ApiSearchDeploymentResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateAtlasSearchDeploymentApiRequest) *admin.ApiSearchDeploymentResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiSearchDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateAtlasSearchDeploymentApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateAtlasSearchDeploymentApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApiMock_CreateAtlasSearchDeploymentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAtlasSearchDeploymentExecute'
type AtlasSearchApiMock_CreateAtlasSearchDeploymentExecute_Call struct {
	*mock.Call
}

// CreateAtlasSearchDeploymentExecute is a helper method to define mock.On call
//   - r admin.CreateAtlasSearchDeploymentApiRequest
func (_e *AtlasSearchApiMock_Expecter) CreateAtlasSearchDeploymentExecute(r interface{}) *AtlasSearchApiMock_CreateAtlasSearchDeploymentExecute_Call {
	return &AtlasSearchApiMock_CreateAtlasSearchDeploymentExecute_Call{Call: _e.mock.On("CreateAtlasSearchDeploymentExecute", r)}
}

func (_c *AtlasSearchApiMock_CreateAtlasSearchDeploymentExecute_Call) Run(run func(r admin.CreateAtlasSearchDeploymentApiRequest)) *AtlasSearchApiMock_CreateAtlasSearchDeploymentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateAtlasSearchDeploymentApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApiMock_CreateAtlasSearchDeploymentExecute_Call) Return(_a0 *admin.ApiSearchDeploymentResponse, _a1 *http.Response, _a2 error) *AtlasSearchApiMock_CreateAtlasSearchDeploymentExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApiMock_CreateAtlasSearchDeploymentExecute_Call) RunAndReturn(run func(admin.CreateAtlasSearchDeploymentApiRequest) (*admin.ApiSearchDeploymentResponse, *http.Response, error)) *AtlasSearchApiMock_CreateAtlasSearchDeploymentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAtlasSearchDeploymentWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApiMock) CreateAtlasSearchDeploymentWithParams(ctx context.Context, args *admin.CreateAtlasSearchDeploymentApiParams) admin.CreateAtlasSearchDeploymentApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateAtlasSearchDeploymentWithParams")
	}

	var r0 admin.CreateAtlasSearchDeploymentApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateAtlasSearchDeploymentApiParams) admin.CreateAtlasSearchDeploymentApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateAtlasSearchDeploymentApiRequest)
	}

	return r0
}

// AtlasSearchApiMock_CreateAtlasSearchDeploymentWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAtlasSearchDeploymentWithParams'
type AtlasSearchApiMock_CreateAtlasSearchDeploymentWithParams_Call struct {
	*mock.Call
}

// CreateAtlasSearchDeploymentWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateAtlasSearchDeploymentApiParams
func (_e *AtlasSearchApiMock_Expecter) CreateAtlasSearchDeploymentWithParams(ctx interface{}, args interface{}) *AtlasSearchApiMock_CreateAtlasSearchDeploymentWithParams_Call {
	return &AtlasSearchApiMock_CreateAtlasSearchDeploymentWithParams_Call{Call: _e.mock.On("CreateAtlasSearchDeploymentWithParams", ctx, args)}
}

func (_c *AtlasSearchApiMock_CreateAtlasSearchDeploymentWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateAtlasSearchDeploymentApiParams)) *AtlasSearchApiMock_CreateAtlasSearchDeploymentWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateAtlasSearchDeploymentApiParams))
	})
	return _c
}

func (_c *AtlasSearchApiMock_CreateAtlasSearchDeploymentWithParams_Call) Return(_a0 admin.CreateAtlasSearchDeploymentApiRequest) *AtlasSearchApiMock_CreateAtlasSearchDeploymentWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApiMock_CreateAtlasSearchDeploymentWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateAtlasSearchDeploymentApiParams) admin.CreateAtlasSearchDeploymentApiRequest) *AtlasSearchApiMock_CreateAtlasSearchDeploymentWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAtlasSearchIndex provides a mock function with given fields: ctx, groupId, clusterName, clusterSearchIndex
func (_m *AtlasSearchApiMock) CreateAtlasSearchIndex(ctx context.Context, groupId string, clusterName string, clusterSearchIndex *admin.ClusterSearchIndex) admin.CreateAtlasSearchIndexApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, clusterSearchIndex)

	if len(ret) == 0 {
		panic("no return value specified for CreateAtlasSearchIndex")
	}

	var r0 admin.CreateAtlasSearchIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.ClusterSearchIndex) admin.CreateAtlasSearchIndexApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, clusterSearchIndex)
	} else {
		r0 = ret.Get(0).(admin.CreateAtlasSearchIndexApiRequest)
	}

	return r0
}

// AtlasSearchApiMock_CreateAtlasSearchIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAtlasSearchIndex'
type AtlasSearchApiMock_CreateAtlasSearchIndex_Call struct {
	*mock.Call
}

// CreateAtlasSearchIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - clusterSearchIndex *admin.ClusterSearchIndex
func (_e *AtlasSearchApiMock_Expecter) CreateAtlasSearchIndex(ctx interface{}, groupId interface{}, clusterName interface{}, clusterSearchIndex interface{}) *AtlasSearchApiMock_CreateAtlasSearchIndex_Call {
	return &AtlasSearchApiMock_CreateAtlasSearchIndex_Call{Call: _e.mock.On("CreateAtlasSearchIndex", ctx, groupId, clusterName, clusterSearchIndex)}
}

func (_c *AtlasSearchApiMock_CreateAtlasSearchIndex_Call) Run(run func(ctx context.Context, groupId string, clusterName string, clusterSearchIndex *admin.ClusterSearchIndex)) *AtlasSearchApiMock_CreateAtlasSearchIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.ClusterSearchIndex))
	})
	return _c
}

func (_c *AtlasSearchApiMock_CreateAtlasSearchIndex_Call) Return(_a0 admin.CreateAtlasSearchIndexApiRequest) *AtlasSearchApiMock_CreateAtlasSearchIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApiMock_CreateAtlasSearchIndex_Call) RunAndReturn(run func(context.Context, string, string, *admin.ClusterSearchIndex) admin.CreateAtlasSearchIndexApiRequest) *AtlasSearchApiMock_CreateAtlasSearchIndex_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAtlasSearchIndexExecute provides a mock function with given fields: r
func (_m *AtlasSearchApiMock) CreateAtlasSearchIndexExecute(r admin.CreateAtlasSearchIndexApiRequest) (*admin.ClusterSearchIndex, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateAtlasSearchIndexExecute")
	}

	var r0 *admin.ClusterSearchIndex
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.CreateAtlasSearchIndexApiRequest) (*admin.ClusterSearchIndex, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.CreateAtlasSearchIndexApiRequest) *admin.ClusterSearchIndex); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ClusterSearchIndex)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.CreateAtlasSearchIndexApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.CreateAtlasSearchIndexApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApiMock_CreateAtlasSearchIndexExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAtlasSearchIndexExecute'
type AtlasSearchApiMock_CreateAtlasSearchIndexExecute_Call struct {
	*mock.Call
}

// CreateAtlasSearchIndexExecute is a helper method to define mock.On call
//   - r admin.CreateAtlasSearchIndexApiRequest
func (_e *AtlasSearchApiMock_Expecter) CreateAtlasSearchIndexExecute(r interface{}) *AtlasSearchApiMock_CreateAtlasSearchIndexExecute_Call {
	return &AtlasSearchApiMock_CreateAtlasSearchIndexExecute_Call{Call: _e.mock.On("CreateAtlasSearchIndexExecute", r)}
}

func (_c *AtlasSearchApiMock_CreateAtlasSearchIndexExecute_Call) Run(run func(r admin.CreateAtlasSearchIndexApiRequest)) *AtlasSearchApiMock_CreateAtlasSearchIndexExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.CreateAtlasSearchIndexApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApiMock_CreateAtlasSearchIndexExecute_Call) Return(_a0 *admin.ClusterSearchIndex, _a1 *http.Response, _a2 error) *AtlasSearchApiMock_CreateAtlasSearchIndexExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApiMock_CreateAtlasSearchIndexExecute_Call) RunAndReturn(run func(admin.CreateAtlasSearchIndexApiRequest) (*admin.ClusterSearchIndex, *http.Response, error)) *AtlasSearchApiMock_CreateAtlasSearchIndexExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAtlasSearchIndexWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApiMock) CreateAtlasSearchIndexWithParams(ctx context.Context, args *admin.CreateAtlasSearchIndexApiParams) admin.CreateAtlasSearchIndexApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for CreateAtlasSearchIndexWithParams")
	}

	var r0 admin.CreateAtlasSearchIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.CreateAtlasSearchIndexApiParams) admin.CreateAtlasSearchIndexApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.CreateAtlasSearchIndexApiRequest)
	}

	return r0
}

// AtlasSearchApiMock_CreateAtlasSearchIndexWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAtlasSearchIndexWithParams'
type AtlasSearchApiMock_CreateAtlasSearchIndexWithParams_Call struct {
	*mock.Call
}

// CreateAtlasSearchIndexWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.CreateAtlasSearchIndexApiParams
func (_e *AtlasSearchApiMock_Expecter) CreateAtlasSearchIndexWithParams(ctx interface{}, args interface{}) *AtlasSearchApiMock_CreateAtlasSearchIndexWithParams_Call {
	return &AtlasSearchApiMock_CreateAtlasSearchIndexWithParams_Call{Call: _e.mock.On("CreateAtlasSearchIndexWithParams", ctx, args)}
}

func (_c *AtlasSearchApiMock_CreateAtlasSearchIndexWithParams_Call) Run(run func(ctx context.Context, args *admin.CreateAtlasSearchIndexApiParams)) *AtlasSearchApiMock_CreateAtlasSearchIndexWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.CreateAtlasSearchIndexApiParams))
	})
	return _c
}

func (_c *AtlasSearchApiMock_CreateAtlasSearchIndexWithParams_Call) Return(_a0 admin.CreateAtlasSearchIndexApiRequest) *AtlasSearchApiMock_CreateAtlasSearchIndexWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApiMock_CreateAtlasSearchIndexWithParams_Call) RunAndReturn(run func(context.Context, *admin.CreateAtlasSearchIndexApiParams) admin.CreateAtlasSearchIndexApiRequest) *AtlasSearchApiMock_CreateAtlasSearchIndexWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAtlasSearchDeployment provides a mock function with given fields: ctx, groupId, clusterName
func (_m *AtlasSearchApiMock) DeleteAtlasSearchDeployment(ctx context.Context, groupId string, clusterName string) admin.DeleteAtlasSearchDeploymentApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAtlasSearchDeployment")
	}

	var r0 admin.DeleteAtlasSearchDeploymentApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.DeleteAtlasSearchDeploymentApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.DeleteAtlasSearchDeploymentApiRequest)
	}

	return r0
}

// AtlasSearchApiMock_DeleteAtlasSearchDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAtlasSearchDeployment'
type AtlasSearchApiMock_DeleteAtlasSearchDeployment_Call struct {
	*mock.Call
}

// DeleteAtlasSearchDeployment is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *AtlasSearchApiMock_Expecter) DeleteAtlasSearchDeployment(ctx interface{}, groupId interface{}, clusterName interface{}) *AtlasSearchApiMock_DeleteAtlasSearchDeployment_Call {
	return &AtlasSearchApiMock_DeleteAtlasSearchDeployment_Call{Call: _e.mock.On("DeleteAtlasSearchDeployment", ctx, groupId, clusterName)}
}

func (_c *AtlasSearchApiMock_DeleteAtlasSearchDeployment_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *AtlasSearchApiMock_DeleteAtlasSearchDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AtlasSearchApiMock_DeleteAtlasSearchDeployment_Call) Return(_a0 admin.DeleteAtlasSearchDeploymentApiRequest) *AtlasSearchApiMock_DeleteAtlasSearchDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApiMock_DeleteAtlasSearchDeployment_Call) RunAndReturn(run func(context.Context, string, string) admin.DeleteAtlasSearchDeploymentApiRequest) *AtlasSearchApiMock_DeleteAtlasSearchDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAtlasSearchDeploymentExecute provides a mock function with given fields: r
func (_m *AtlasSearchApiMock) DeleteAtlasSearchDeploymentExecute(r admin.DeleteAtlasSearchDeploymentApiRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAtlasSearchDeploymentExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(admin.DeleteAtlasSearchDeploymentApiRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteAtlasSearchDeploymentApiRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteAtlasSearchDeploymentApiRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AtlasSearchApiMock_DeleteAtlasSearchDeploymentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAtlasSearchDeploymentExecute'
type AtlasSearchApiMock_DeleteAtlasSearchDeploymentExecute_Call struct {
	*mock.Call
}

// DeleteAtlasSearchDeploymentExecute is a helper method to define mock.On call
//   - r admin.DeleteAtlasSearchDeploymentApiRequest
func (_e *AtlasSearchApiMock_Expecter) DeleteAtlasSearchDeploymentExecute(r interface{}) *AtlasSearchApiMock_DeleteAtlasSearchDeploymentExecute_Call {
	return &AtlasSearchApiMock_DeleteAtlasSearchDeploymentExecute_Call{Call: _e.mock.On("DeleteAtlasSearchDeploymentExecute", r)}
}

func (_c *AtlasSearchApiMock_DeleteAtlasSearchDeploymentExecute_Call) Run(run func(r admin.DeleteAtlasSearchDeploymentApiRequest)) *AtlasSearchApiMock_DeleteAtlasSearchDeploymentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteAtlasSearchDeploymentApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApiMock_DeleteAtlasSearchDeploymentExecute_Call) Return(_a0 *http.Response, _a1 error) *AtlasSearchApiMock_DeleteAtlasSearchDeploymentExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AtlasSearchApiMock_DeleteAtlasSearchDeploymentExecute_Call) RunAndReturn(run func(admin.DeleteAtlasSearchDeploymentApiRequest) (*http.Response, error)) *AtlasSearchApiMock_DeleteAtlasSearchDeploymentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAtlasSearchDeploymentWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApiMock) DeleteAtlasSearchDeploymentWithParams(ctx context.Context, args *admin.DeleteAtlasSearchDeploymentApiParams) admin.DeleteAtlasSearchDeploymentApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAtlasSearchDeploymentWithParams")
	}

	var r0 admin.DeleteAtlasSearchDeploymentApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteAtlasSearchDeploymentApiParams) admin.DeleteAtlasSearchDeploymentApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteAtlasSearchDeploymentApiRequest)
	}

	return r0
}

// AtlasSearchApiMock_DeleteAtlasSearchDeploymentWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAtlasSearchDeploymentWithParams'
type AtlasSearchApiMock_DeleteAtlasSearchDeploymentWithParams_Call struct {
	*mock.Call
}

// DeleteAtlasSearchDeploymentWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteAtlasSearchDeploymentApiParams
func (_e *AtlasSearchApiMock_Expecter) DeleteAtlasSearchDeploymentWithParams(ctx interface{}, args interface{}) *AtlasSearchApiMock_DeleteAtlasSearchDeploymentWithParams_Call {
	return &AtlasSearchApiMock_DeleteAtlasSearchDeploymentWithParams_Call{Call: _e.mock.On("DeleteAtlasSearchDeploymentWithParams", ctx, args)}
}

func (_c *AtlasSearchApiMock_DeleteAtlasSearchDeploymentWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteAtlasSearchDeploymentApiParams)) *AtlasSearchApiMock_DeleteAtlasSearchDeploymentWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteAtlasSearchDeploymentApiParams))
	})
	return _c
}

func (_c *AtlasSearchApiMock_DeleteAtlasSearchDeploymentWithParams_Call) Return(_a0 admin.DeleteAtlasSearchDeploymentApiRequest) *AtlasSearchApiMock_DeleteAtlasSearchDeploymentWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApiMock_DeleteAtlasSearchDeploymentWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteAtlasSearchDeploymentApiParams) admin.DeleteAtlasSearchDeploymentApiRequest) *AtlasSearchApiMock_DeleteAtlasSearchDeploymentWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAtlasSearchIndex provides a mock function with given fields: ctx, groupId, clusterName, indexId
func (_m *AtlasSearchApiMock) DeleteAtlasSearchIndex(ctx context.Context, groupId string, clusterName string, indexId string) admin.DeleteAtlasSearchIndexApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, indexId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAtlasSearchIndex")
	}

	var r0 admin.DeleteAtlasSearchIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.DeleteAtlasSearchIndexApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, indexId)
	} else {
		r0 = ret.Get(0).(admin.DeleteAtlasSearchIndexApiRequest)
	}

	return r0
}

// AtlasSearchApiMock_DeleteAtlasSearchIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAtlasSearchIndex'
type AtlasSearchApiMock_DeleteAtlasSearchIndex_Call struct {
	*mock.Call
}

// DeleteAtlasSearchIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - indexId string
func (_e *AtlasSearchApiMock_Expecter) DeleteAtlasSearchIndex(ctx interface{}, groupId interface{}, clusterName interface{}, indexId interface{}) *AtlasSearchApiMock_DeleteAtlasSearchIndex_Call {
	return &AtlasSearchApiMock_DeleteAtlasSearchIndex_Call{Call: _e.mock.On("DeleteAtlasSearchIndex", ctx, groupId, clusterName, indexId)}
}

func (_c *AtlasSearchApiMock_DeleteAtlasSearchIndex_Call) Run(run func(ctx context.Context, groupId string, clusterName string, indexId string)) *AtlasSearchApiMock_DeleteAtlasSearchIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AtlasSearchApiMock_DeleteAtlasSearchIndex_Call) Return(_a0 admin.DeleteAtlasSearchIndexApiRequest) *AtlasSearchApiMock_DeleteAtlasSearchIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApiMock_DeleteAtlasSearchIndex_Call) RunAndReturn(run func(context.Context, string, string, string) admin.DeleteAtlasSearchIndexApiRequest) *AtlasSearchApiMock_DeleteAtlasSearchIndex_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAtlasSearchIndexExecute provides a mock function with given fields: r
func (_m *AtlasSearchApiMock) DeleteAtlasSearchIndexExecute(r admin.DeleteAtlasSearchIndexApiRequest) (map[string]interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAtlasSearchIndexExecute")
	}

	var r0 map[string]interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.DeleteAtlasSearchIndexApiRequest) (map[string]interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.DeleteAtlasSearchIndexApiRequest) map[string]interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(admin.DeleteAtlasSearchIndexApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.DeleteAtlasSearchIndexApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApiMock_DeleteAtlasSearchIndexExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAtlasSearchIndexExecute'
type AtlasSearchApiMock_DeleteAtlasSearchIndexExecute_Call struct {
	*mock.Call
}

// DeleteAtlasSearchIndexExecute is a helper method to define mock.On call
//   - r admin.DeleteAtlasSearchIndexApiRequest
func (_e *AtlasSearchApiMock_Expecter) DeleteAtlasSearchIndexExecute(r interface{}) *AtlasSearchApiMock_DeleteAtlasSearchIndexExecute_Call {
	return &AtlasSearchApiMock_DeleteAtlasSearchIndexExecute_Call{Call: _e.mock.On("DeleteAtlasSearchIndexExecute", r)}
}

func (_c *AtlasSearchApiMock_DeleteAtlasSearchIndexExecute_Call) Run(run func(r admin.DeleteAtlasSearchIndexApiRequest)) *AtlasSearchApiMock_DeleteAtlasSearchIndexExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.DeleteAtlasSearchIndexApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApiMock_DeleteAtlasSearchIndexExecute_Call) Return(_a0 map[string]interface{}, _a1 *http.Response, _a2 error) *AtlasSearchApiMock_DeleteAtlasSearchIndexExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApiMock_DeleteAtlasSearchIndexExecute_Call) RunAndReturn(run func(admin.DeleteAtlasSearchIndexApiRequest) (map[string]interface{}, *http.Response, error)) *AtlasSearchApiMock_DeleteAtlasSearchIndexExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAtlasSearchIndexWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApiMock) DeleteAtlasSearchIndexWithParams(ctx context.Context, args *admin.DeleteAtlasSearchIndexApiParams) admin.DeleteAtlasSearchIndexApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAtlasSearchIndexWithParams")
	}

	var r0 admin.DeleteAtlasSearchIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.DeleteAtlasSearchIndexApiParams) admin.DeleteAtlasSearchIndexApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.DeleteAtlasSearchIndexApiRequest)
	}

	return r0
}

// AtlasSearchApiMock_DeleteAtlasSearchIndexWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAtlasSearchIndexWithParams'
type AtlasSearchApiMock_DeleteAtlasSearchIndexWithParams_Call struct {
	*mock.Call
}

// DeleteAtlasSearchIndexWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.DeleteAtlasSearchIndexApiParams
func (_e *AtlasSearchApiMock_Expecter) DeleteAtlasSearchIndexWithParams(ctx interface{}, args interface{}) *AtlasSearchApiMock_DeleteAtlasSearchIndexWithParams_Call {
	return &AtlasSearchApiMock_DeleteAtlasSearchIndexWithParams_Call{Call: _e.mock.On("DeleteAtlasSearchIndexWithParams", ctx, args)}
}

func (_c *AtlasSearchApiMock_DeleteAtlasSearchIndexWithParams_Call) Run(run func(ctx context.Context, args *admin.DeleteAtlasSearchIndexApiParams)) *AtlasSearchApiMock_DeleteAtlasSearchIndexWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.DeleteAtlasSearchIndexApiParams))
	})
	return _c
}

func (_c *AtlasSearchApiMock_DeleteAtlasSearchIndexWithParams_Call) Return(_a0 admin.DeleteAtlasSearchIndexApiRequest) *AtlasSearchApiMock_DeleteAtlasSearchIndexWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApiMock_DeleteAtlasSearchIndexWithParams_Call) RunAndReturn(run func(context.Context, *admin.DeleteAtlasSearchIndexApiParams) admin.DeleteAtlasSearchIndexApiRequest) *AtlasSearchApiMock_DeleteAtlasSearchIndexWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetAtlasSearchDeployment provides a mock function with given fields: ctx, groupId, clusterName
func (_m *AtlasSearchApiMock) GetAtlasSearchDeployment(ctx context.Context, groupId string, clusterName string) admin.GetAtlasSearchDeploymentApiRequest {
	ret := _m.Called(ctx, groupId, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for GetAtlasSearchDeployment")
	}

	var r0 admin.GetAtlasSearchDeploymentApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) admin.GetAtlasSearchDeploymentApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName)
	} else {
		r0 = ret.Get(0).(admin.GetAtlasSearchDeploymentApiRequest)
	}

	return r0
}

// AtlasSearchApiMock_GetAtlasSearchDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAtlasSearchDeployment'
type AtlasSearchApiMock_GetAtlasSearchDeployment_Call struct {
	*mock.Call
}

// GetAtlasSearchDeployment is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
func (_e *AtlasSearchApiMock_Expecter) GetAtlasSearchDeployment(ctx interface{}, groupId interface{}, clusterName interface{}) *AtlasSearchApiMock_GetAtlasSearchDeployment_Call {
	return &AtlasSearchApiMock_GetAtlasSearchDeployment_Call{Call: _e.mock.On("GetAtlasSearchDeployment", ctx, groupId, clusterName)}
}

func (_c *AtlasSearchApiMock_GetAtlasSearchDeployment_Call) Run(run func(ctx context.Context, groupId string, clusterName string)) *AtlasSearchApiMock_GetAtlasSearchDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AtlasSearchApiMock_GetAtlasSearchDeployment_Call) Return(_a0 admin.GetAtlasSearchDeploymentApiRequest) *AtlasSearchApiMock_GetAtlasSearchDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApiMock_GetAtlasSearchDeployment_Call) RunAndReturn(run func(context.Context, string, string) admin.GetAtlasSearchDeploymentApiRequest) *AtlasSearchApiMock_GetAtlasSearchDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// GetAtlasSearchDeploymentExecute provides a mock function with given fields: r
func (_m *AtlasSearchApiMock) GetAtlasSearchDeploymentExecute(r admin.GetAtlasSearchDeploymentApiRequest) (*admin.ApiSearchDeploymentResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAtlasSearchDeploymentExecute")
	}

	var r0 *admin.ApiSearchDeploymentResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetAtlasSearchDeploymentApiRequest) (*admin.ApiSearchDeploymentResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetAtlasSearchDeploymentApiRequest) *admin.ApiSearchDeploymentResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiSearchDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetAtlasSearchDeploymentApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetAtlasSearchDeploymentApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApiMock_GetAtlasSearchDeploymentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAtlasSearchDeploymentExecute'
type AtlasSearchApiMock_GetAtlasSearchDeploymentExecute_Call struct {
	*mock.Call
}

// GetAtlasSearchDeploymentExecute is a helper method to define mock.On call
//   - r admin.GetAtlasSearchDeploymentApiRequest
func (_e *AtlasSearchApiMock_Expecter) GetAtlasSearchDeploymentExecute(r interface{}) *AtlasSearchApiMock_GetAtlasSearchDeploymentExecute_Call {
	return &AtlasSearchApiMock_GetAtlasSearchDeploymentExecute_Call{Call: _e.mock.On("GetAtlasSearchDeploymentExecute", r)}
}

func (_c *AtlasSearchApiMock_GetAtlasSearchDeploymentExecute_Call) Run(run func(r admin.GetAtlasSearchDeploymentApiRequest)) *AtlasSearchApiMock_GetAtlasSearchDeploymentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetAtlasSearchDeploymentApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApiMock_GetAtlasSearchDeploymentExecute_Call) Return(_a0 *admin.ApiSearchDeploymentResponse, _a1 *http.Response, _a2 error) *AtlasSearchApiMock_GetAtlasSearchDeploymentExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApiMock_GetAtlasSearchDeploymentExecute_Call) RunAndReturn(run func(admin.GetAtlasSearchDeploymentApiRequest) (*admin.ApiSearchDeploymentResponse, *http.Response, error)) *AtlasSearchApiMock_GetAtlasSearchDeploymentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAtlasSearchDeploymentWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApiMock) GetAtlasSearchDeploymentWithParams(ctx context.Context, args *admin.GetAtlasSearchDeploymentApiParams) admin.GetAtlasSearchDeploymentApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetAtlasSearchDeploymentWithParams")
	}

	var r0 admin.GetAtlasSearchDeploymentApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetAtlasSearchDeploymentApiParams) admin.GetAtlasSearchDeploymentApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetAtlasSearchDeploymentApiRequest)
	}

	return r0
}

// AtlasSearchApiMock_GetAtlasSearchDeploymentWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAtlasSearchDeploymentWithParams'
type AtlasSearchApiMock_GetAtlasSearchDeploymentWithParams_Call struct {
	*mock.Call
}

// GetAtlasSearchDeploymentWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetAtlasSearchDeploymentApiParams
func (_e *AtlasSearchApiMock_Expecter) GetAtlasSearchDeploymentWithParams(ctx interface{}, args interface{}) *AtlasSearchApiMock_GetAtlasSearchDeploymentWithParams_Call {
	return &AtlasSearchApiMock_GetAtlasSearchDeploymentWithParams_Call{Call: _e.mock.On("GetAtlasSearchDeploymentWithParams", ctx, args)}
}

func (_c *AtlasSearchApiMock_GetAtlasSearchDeploymentWithParams_Call) Run(run func(ctx context.Context, args *admin.GetAtlasSearchDeploymentApiParams)) *AtlasSearchApiMock_GetAtlasSearchDeploymentWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetAtlasSearchDeploymentApiParams))
	})
	return _c
}

func (_c *AtlasSearchApiMock_GetAtlasSearchDeploymentWithParams_Call) Return(_a0 admin.GetAtlasSearchDeploymentApiRequest) *AtlasSearchApiMock_GetAtlasSearchDeploymentWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApiMock_GetAtlasSearchDeploymentWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetAtlasSearchDeploymentApiParams) admin.GetAtlasSearchDeploymentApiRequest) *AtlasSearchApiMock_GetAtlasSearchDeploymentWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetAtlasSearchIndex provides a mock function with given fields: ctx, groupId, clusterName, indexId
func (_m *AtlasSearchApiMock) GetAtlasSearchIndex(ctx context.Context, groupId string, clusterName string, indexId string) admin.GetAtlasSearchIndexApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, indexId)

	if len(ret) == 0 {
		panic("no return value specified for GetAtlasSearchIndex")
	}

	var r0 admin.GetAtlasSearchIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) admin.GetAtlasSearchIndexApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, indexId)
	} else {
		r0 = ret.Get(0).(admin.GetAtlasSearchIndexApiRequest)
	}

	return r0
}

// AtlasSearchApiMock_GetAtlasSearchIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAtlasSearchIndex'
type AtlasSearchApiMock_GetAtlasSearchIndex_Call struct {
	*mock.Call
}

// GetAtlasSearchIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - indexId string
func (_e *AtlasSearchApiMock_Expecter) GetAtlasSearchIndex(ctx interface{}, groupId interface{}, clusterName interface{}, indexId interface{}) *AtlasSearchApiMock_GetAtlasSearchIndex_Call {
	return &AtlasSearchApiMock_GetAtlasSearchIndex_Call{Call: _e.mock.On("GetAtlasSearchIndex", ctx, groupId, clusterName, indexId)}
}

func (_c *AtlasSearchApiMock_GetAtlasSearchIndex_Call) Run(run func(ctx context.Context, groupId string, clusterName string, indexId string)) *AtlasSearchApiMock_GetAtlasSearchIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AtlasSearchApiMock_GetAtlasSearchIndex_Call) Return(_a0 admin.GetAtlasSearchIndexApiRequest) *AtlasSearchApiMock_GetAtlasSearchIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApiMock_GetAtlasSearchIndex_Call) RunAndReturn(run func(context.Context, string, string, string) admin.GetAtlasSearchIndexApiRequest) *AtlasSearchApiMock_GetAtlasSearchIndex_Call {
	_c.Call.Return(run)
	return _c
}

// GetAtlasSearchIndexExecute provides a mock function with given fields: r
func (_m *AtlasSearchApiMock) GetAtlasSearchIndexExecute(r admin.GetAtlasSearchIndexApiRequest) (*admin.ClusterSearchIndex, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAtlasSearchIndexExecute")
	}

	var r0 *admin.ClusterSearchIndex
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.GetAtlasSearchIndexApiRequest) (*admin.ClusterSearchIndex, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.GetAtlasSearchIndexApiRequest) *admin.ClusterSearchIndex); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ClusterSearchIndex)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.GetAtlasSearchIndexApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.GetAtlasSearchIndexApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApiMock_GetAtlasSearchIndexExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAtlasSearchIndexExecute'
type AtlasSearchApiMock_GetAtlasSearchIndexExecute_Call struct {
	*mock.Call
}

// GetAtlasSearchIndexExecute is a helper method to define mock.On call
//   - r admin.GetAtlasSearchIndexApiRequest
func (_e *AtlasSearchApiMock_Expecter) GetAtlasSearchIndexExecute(r interface{}) *AtlasSearchApiMock_GetAtlasSearchIndexExecute_Call {
	return &AtlasSearchApiMock_GetAtlasSearchIndexExecute_Call{Call: _e.mock.On("GetAtlasSearchIndexExecute", r)}
}

func (_c *AtlasSearchApiMock_GetAtlasSearchIndexExecute_Call) Run(run func(r admin.GetAtlasSearchIndexApiRequest)) *AtlasSearchApiMock_GetAtlasSearchIndexExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.GetAtlasSearchIndexApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApiMock_GetAtlasSearchIndexExecute_Call) Return(_a0 *admin.ClusterSearchIndex, _a1 *http.Response, _a2 error) *AtlasSearchApiMock_GetAtlasSearchIndexExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApiMock_GetAtlasSearchIndexExecute_Call) RunAndReturn(run func(admin.GetAtlasSearchIndexApiRequest) (*admin.ClusterSearchIndex, *http.Response, error)) *AtlasSearchApiMock_GetAtlasSearchIndexExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAtlasSearchIndexWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApiMock) GetAtlasSearchIndexWithParams(ctx context.Context, args *admin.GetAtlasSearchIndexApiParams) admin.GetAtlasSearchIndexApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for GetAtlasSearchIndexWithParams")
	}

	var r0 admin.GetAtlasSearchIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.GetAtlasSearchIndexApiParams) admin.GetAtlasSearchIndexApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.GetAtlasSearchIndexApiRequest)
	}

	return r0
}

// AtlasSearchApiMock_GetAtlasSearchIndexWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAtlasSearchIndexWithParams'
type AtlasSearchApiMock_GetAtlasSearchIndexWithParams_Call struct {
	*mock.Call
}

// GetAtlasSearchIndexWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.GetAtlasSearchIndexApiParams
func (_e *AtlasSearchApiMock_Expecter) GetAtlasSearchIndexWithParams(ctx interface{}, args interface{}) *AtlasSearchApiMock_GetAtlasSearchIndexWithParams_Call {
	return &AtlasSearchApiMock_GetAtlasSearchIndexWithParams_Call{Call: _e.mock.On("GetAtlasSearchIndexWithParams", ctx, args)}
}

func (_c *AtlasSearchApiMock_GetAtlasSearchIndexWithParams_Call) Run(run func(ctx context.Context, args *admin.GetAtlasSearchIndexApiParams)) *AtlasSearchApiMock_GetAtlasSearchIndexWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.GetAtlasSearchIndexApiParams))
	})
	return _c
}

func (_c *AtlasSearchApiMock_GetAtlasSearchIndexWithParams_Call) Return(_a0 admin.GetAtlasSearchIndexApiRequest) *AtlasSearchApiMock_GetAtlasSearchIndexWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApiMock_GetAtlasSearchIndexWithParams_Call) RunAndReturn(run func(context.Context, *admin.GetAtlasSearchIndexApiParams) admin.GetAtlasSearchIndexApiRequest) *AtlasSearchApiMock_GetAtlasSearchIndexWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// ListAtlasSearchIndexes provides a mock function with given fields: ctx, groupId, clusterName, collectionName, databaseName
func (_m *AtlasSearchApiMock) ListAtlasSearchIndexes(ctx context.Context, groupId string, clusterName string, collectionName string, databaseName string) admin.ListAtlasSearchIndexesApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, collectionName, databaseName)

	if len(ret) == 0 {
		panic("no return value specified for ListAtlasSearchIndexes")
	}

	var r0 admin.ListAtlasSearchIndexesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) admin.ListAtlasSearchIndexesApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, collectionName, databaseName)
	} else {
		r0 = ret.Get(0).(admin.ListAtlasSearchIndexesApiRequest)
	}

	return r0
}

// AtlasSearchApiMock_ListAtlasSearchIndexes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAtlasSearchIndexes'
type AtlasSearchApiMock_ListAtlasSearchIndexes_Call struct {
	*mock.Call
}

// ListAtlasSearchIndexes is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - collectionName string
//   - databaseName string
func (_e *AtlasSearchApiMock_Expecter) ListAtlasSearchIndexes(ctx interface{}, groupId interface{}, clusterName interface{}, collectionName interface{}, databaseName interface{}) *AtlasSearchApiMock_ListAtlasSearchIndexes_Call {
	return &AtlasSearchApiMock_ListAtlasSearchIndexes_Call{Call: _e.mock.On("ListAtlasSearchIndexes", ctx, groupId, clusterName, collectionName, databaseName)}
}

func (_c *AtlasSearchApiMock_ListAtlasSearchIndexes_Call) Run(run func(ctx context.Context, groupId string, clusterName string, collectionName string, databaseName string)) *AtlasSearchApiMock_ListAtlasSearchIndexes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *AtlasSearchApiMock_ListAtlasSearchIndexes_Call) Return(_a0 admin.ListAtlasSearchIndexesApiRequest) *AtlasSearchApiMock_ListAtlasSearchIndexes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApiMock_ListAtlasSearchIndexes_Call) RunAndReturn(run func(context.Context, string, string, string, string) admin.ListAtlasSearchIndexesApiRequest) *AtlasSearchApiMock_ListAtlasSearchIndexes_Call {
	_c.Call.Return(run)
	return _c
}

// ListAtlasSearchIndexesExecute provides a mock function with given fields: r
func (_m *AtlasSearchApiMock) ListAtlasSearchIndexesExecute(r admin.ListAtlasSearchIndexesApiRequest) ([]admin.ClusterSearchIndex, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListAtlasSearchIndexesExecute")
	}

	var r0 []admin.ClusterSearchIndex
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.ListAtlasSearchIndexesApiRequest) ([]admin.ClusterSearchIndex, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.ListAtlasSearchIndexesApiRequest) []admin.ClusterSearchIndex); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]admin.ClusterSearchIndex)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.ListAtlasSearchIndexesApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.ListAtlasSearchIndexesApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApiMock_ListAtlasSearchIndexesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAtlasSearchIndexesExecute'
type AtlasSearchApiMock_ListAtlasSearchIndexesExecute_Call struct {
	*mock.Call
}

// ListAtlasSearchIndexesExecute is a helper method to define mock.On call
//   - r admin.ListAtlasSearchIndexesApiRequest
func (_e *AtlasSearchApiMock_Expecter) ListAtlasSearchIndexesExecute(r interface{}) *AtlasSearchApiMock_ListAtlasSearchIndexesExecute_Call {
	return &AtlasSearchApiMock_ListAtlasSearchIndexesExecute_Call{Call: _e.mock.On("ListAtlasSearchIndexesExecute", r)}
}

func (_c *AtlasSearchApiMock_ListAtlasSearchIndexesExecute_Call) Run(run func(r admin.ListAtlasSearchIndexesApiRequest)) *AtlasSearchApiMock_ListAtlasSearchIndexesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.ListAtlasSearchIndexesApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApiMock_ListAtlasSearchIndexesExecute_Call) Return(_a0 []admin.ClusterSearchIndex, _a1 *http.Response, _a2 error) *AtlasSearchApiMock_ListAtlasSearchIndexesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApiMock_ListAtlasSearchIndexesExecute_Call) RunAndReturn(run func(admin.ListAtlasSearchIndexesApiRequest) ([]admin.ClusterSearchIndex, *http.Response, error)) *AtlasSearchApiMock_ListAtlasSearchIndexesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListAtlasSearchIndexesWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApiMock) ListAtlasSearchIndexesWithParams(ctx context.Context, args *admin.ListAtlasSearchIndexesApiParams) admin.ListAtlasSearchIndexesApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for ListAtlasSearchIndexesWithParams")
	}

	var r0 admin.ListAtlasSearchIndexesApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.ListAtlasSearchIndexesApiParams) admin.ListAtlasSearchIndexesApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.ListAtlasSearchIndexesApiRequest)
	}

	return r0
}

// AtlasSearchApiMock_ListAtlasSearchIndexesWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAtlasSearchIndexesWithParams'
type AtlasSearchApiMock_ListAtlasSearchIndexesWithParams_Call struct {
	*mock.Call
}

// ListAtlasSearchIndexesWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.ListAtlasSearchIndexesApiParams
func (_e *AtlasSearchApiMock_Expecter) ListAtlasSearchIndexesWithParams(ctx interface{}, args interface{}) *AtlasSearchApiMock_ListAtlasSearchIndexesWithParams_Call {
	return &AtlasSearchApiMock_ListAtlasSearchIndexesWithParams_Call{Call: _e.mock.On("ListAtlasSearchIndexesWithParams", ctx, args)}
}

func (_c *AtlasSearchApiMock_ListAtlasSearchIndexesWithParams_Call) Run(run func(ctx context.Context, args *admin.ListAtlasSearchIndexesApiParams)) *AtlasSearchApiMock_ListAtlasSearchIndexesWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.ListAtlasSearchIndexesApiParams))
	})
	return _c
}

func (_c *AtlasSearchApiMock_ListAtlasSearchIndexesWithParams_Call) Return(_a0 admin.ListAtlasSearchIndexesApiRequest) *AtlasSearchApiMock_ListAtlasSearchIndexesWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApiMock_ListAtlasSearchIndexesWithParams_Call) RunAndReturn(run func(context.Context, *admin.ListAtlasSearchIndexesApiParams) admin.ListAtlasSearchIndexesApiRequest) *AtlasSearchApiMock_ListAtlasSearchIndexesWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAtlasSearchDeployment provides a mock function with given fields: ctx, groupId, clusterName, apiSearchDeploymentRequest
func (_m *AtlasSearchApiMock) UpdateAtlasSearchDeployment(ctx context.Context, groupId string, clusterName string, apiSearchDeploymentRequest *admin.ApiSearchDeploymentRequest) admin.UpdateAtlasSearchDeploymentApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, apiSearchDeploymentRequest)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAtlasSearchDeployment")
	}

	var r0 admin.UpdateAtlasSearchDeploymentApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *admin.ApiSearchDeploymentRequest) admin.UpdateAtlasSearchDeploymentApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, apiSearchDeploymentRequest)
	} else {
		r0 = ret.Get(0).(admin.UpdateAtlasSearchDeploymentApiRequest)
	}

	return r0
}

// AtlasSearchApiMock_UpdateAtlasSearchDeployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAtlasSearchDeployment'
type AtlasSearchApiMock_UpdateAtlasSearchDeployment_Call struct {
	*mock.Call
}

// UpdateAtlasSearchDeployment is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - apiSearchDeploymentRequest *admin.ApiSearchDeploymentRequest
func (_e *AtlasSearchApiMock_Expecter) UpdateAtlasSearchDeployment(ctx interface{}, groupId interface{}, clusterName interface{}, apiSearchDeploymentRequest interface{}) *AtlasSearchApiMock_UpdateAtlasSearchDeployment_Call {
	return &AtlasSearchApiMock_UpdateAtlasSearchDeployment_Call{Call: _e.mock.On("UpdateAtlasSearchDeployment", ctx, groupId, clusterName, apiSearchDeploymentRequest)}
}

func (_c *AtlasSearchApiMock_UpdateAtlasSearchDeployment_Call) Run(run func(ctx context.Context, groupId string, clusterName string, apiSearchDeploymentRequest *admin.ApiSearchDeploymentRequest)) *AtlasSearchApiMock_UpdateAtlasSearchDeployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*admin.ApiSearchDeploymentRequest))
	})
	return _c
}

func (_c *AtlasSearchApiMock_UpdateAtlasSearchDeployment_Call) Return(_a0 admin.UpdateAtlasSearchDeploymentApiRequest) *AtlasSearchApiMock_UpdateAtlasSearchDeployment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApiMock_UpdateAtlasSearchDeployment_Call) RunAndReturn(run func(context.Context, string, string, *admin.ApiSearchDeploymentRequest) admin.UpdateAtlasSearchDeploymentApiRequest) *AtlasSearchApiMock_UpdateAtlasSearchDeployment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAtlasSearchDeploymentExecute provides a mock function with given fields: r
func (_m *AtlasSearchApiMock) UpdateAtlasSearchDeploymentExecute(r admin.UpdateAtlasSearchDeploymentApiRequest) (*admin.ApiSearchDeploymentResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAtlasSearchDeploymentExecute")
	}

	var r0 *admin.ApiSearchDeploymentResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateAtlasSearchDeploymentApiRequest) (*admin.ApiSearchDeploymentResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateAtlasSearchDeploymentApiRequest) *admin.ApiSearchDeploymentResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ApiSearchDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateAtlasSearchDeploymentApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateAtlasSearchDeploymentApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApiMock_UpdateAtlasSearchDeploymentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAtlasSearchDeploymentExecute'
type AtlasSearchApiMock_UpdateAtlasSearchDeploymentExecute_Call struct {
	*mock.Call
}

// UpdateAtlasSearchDeploymentExecute is a helper method to define mock.On call
//   - r admin.UpdateAtlasSearchDeploymentApiRequest
func (_e *AtlasSearchApiMock_Expecter) UpdateAtlasSearchDeploymentExecute(r interface{}) *AtlasSearchApiMock_UpdateAtlasSearchDeploymentExecute_Call {
	return &AtlasSearchApiMock_UpdateAtlasSearchDeploymentExecute_Call{Call: _e.mock.On("UpdateAtlasSearchDeploymentExecute", r)}
}

func (_c *AtlasSearchApiMock_UpdateAtlasSearchDeploymentExecute_Call) Run(run func(r admin.UpdateAtlasSearchDeploymentApiRequest)) *AtlasSearchApiMock_UpdateAtlasSearchDeploymentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateAtlasSearchDeploymentApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApiMock_UpdateAtlasSearchDeploymentExecute_Call) Return(_a0 *admin.ApiSearchDeploymentResponse, _a1 *http.Response, _a2 error) *AtlasSearchApiMock_UpdateAtlasSearchDeploymentExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApiMock_UpdateAtlasSearchDeploymentExecute_Call) RunAndReturn(run func(admin.UpdateAtlasSearchDeploymentApiRequest) (*admin.ApiSearchDeploymentResponse, *http.Response, error)) *AtlasSearchApiMock_UpdateAtlasSearchDeploymentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAtlasSearchDeploymentWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApiMock) UpdateAtlasSearchDeploymentWithParams(ctx context.Context, args *admin.UpdateAtlasSearchDeploymentApiParams) admin.UpdateAtlasSearchDeploymentApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAtlasSearchDeploymentWithParams")
	}

	var r0 admin.UpdateAtlasSearchDeploymentApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateAtlasSearchDeploymentApiParams) admin.UpdateAtlasSearchDeploymentApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateAtlasSearchDeploymentApiRequest)
	}

	return r0
}

// AtlasSearchApiMock_UpdateAtlasSearchDeploymentWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAtlasSearchDeploymentWithParams'
type AtlasSearchApiMock_UpdateAtlasSearchDeploymentWithParams_Call struct {
	*mock.Call
}

// UpdateAtlasSearchDeploymentWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateAtlasSearchDeploymentApiParams
func (_e *AtlasSearchApiMock_Expecter) UpdateAtlasSearchDeploymentWithParams(ctx interface{}, args interface{}) *AtlasSearchApiMock_UpdateAtlasSearchDeploymentWithParams_Call {
	return &AtlasSearchApiMock_UpdateAtlasSearchDeploymentWithParams_Call{Call: _e.mock.On("UpdateAtlasSearchDeploymentWithParams", ctx, args)}
}

func (_c *AtlasSearchApiMock_UpdateAtlasSearchDeploymentWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateAtlasSearchDeploymentApiParams)) *AtlasSearchApiMock_UpdateAtlasSearchDeploymentWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateAtlasSearchDeploymentApiParams))
	})
	return _c
}

func (_c *AtlasSearchApiMock_UpdateAtlasSearchDeploymentWithParams_Call) Return(_a0 admin.UpdateAtlasSearchDeploymentApiRequest) *AtlasSearchApiMock_UpdateAtlasSearchDeploymentWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApiMock_UpdateAtlasSearchDeploymentWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateAtlasSearchDeploymentApiParams) admin.UpdateAtlasSearchDeploymentApiRequest) *AtlasSearchApiMock_UpdateAtlasSearchDeploymentWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAtlasSearchIndex provides a mock function with given fields: ctx, groupId, clusterName, indexId, clusterSearchIndex
func (_m *AtlasSearchApiMock) UpdateAtlasSearchIndex(ctx context.Context, groupId string, clusterName string, indexId string, clusterSearchIndex *admin.ClusterSearchIndex) admin.UpdateAtlasSearchIndexApiRequest {
	ret := _m.Called(ctx, groupId, clusterName, indexId, clusterSearchIndex)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAtlasSearchIndex")
	}

	var r0 admin.UpdateAtlasSearchIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *admin.ClusterSearchIndex) admin.UpdateAtlasSearchIndexApiRequest); ok {
		r0 = rf(ctx, groupId, clusterName, indexId, clusterSearchIndex)
	} else {
		r0 = ret.Get(0).(admin.UpdateAtlasSearchIndexApiRequest)
	}

	return r0
}

// AtlasSearchApiMock_UpdateAtlasSearchIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAtlasSearchIndex'
type AtlasSearchApiMock_UpdateAtlasSearchIndex_Call struct {
	*mock.Call
}

// UpdateAtlasSearchIndex is a helper method to define mock.On call
//   - ctx context.Context
//   - groupId string
//   - clusterName string
//   - indexId string
//   - clusterSearchIndex *admin.ClusterSearchIndex
func (_e *AtlasSearchApiMock_Expecter) UpdateAtlasSearchIndex(ctx interface{}, groupId interface{}, clusterName interface{}, indexId interface{}, clusterSearchIndex interface{}) *AtlasSearchApiMock_UpdateAtlasSearchIndex_Call {
	return &AtlasSearchApiMock_UpdateAtlasSearchIndex_Call{Call: _e.mock.On("UpdateAtlasSearchIndex", ctx, groupId, clusterName, indexId, clusterSearchIndex)}
}

func (_c *AtlasSearchApiMock_UpdateAtlasSearchIndex_Call) Run(run func(ctx context.Context, groupId string, clusterName string, indexId string, clusterSearchIndex *admin.ClusterSearchIndex)) *AtlasSearchApiMock_UpdateAtlasSearchIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*admin.ClusterSearchIndex))
	})
	return _c
}

func (_c *AtlasSearchApiMock_UpdateAtlasSearchIndex_Call) Return(_a0 admin.UpdateAtlasSearchIndexApiRequest) *AtlasSearchApiMock_UpdateAtlasSearchIndex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApiMock_UpdateAtlasSearchIndex_Call) RunAndReturn(run func(context.Context, string, string, string, *admin.ClusterSearchIndex) admin.UpdateAtlasSearchIndexApiRequest) *AtlasSearchApiMock_UpdateAtlasSearchIndex_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAtlasSearchIndexExecute provides a mock function with given fields: r
func (_m *AtlasSearchApiMock) UpdateAtlasSearchIndexExecute(r admin.UpdateAtlasSearchIndexApiRequest) (*admin.ClusterSearchIndex, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAtlasSearchIndexExecute")
	}

	var r0 *admin.ClusterSearchIndex
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(admin.UpdateAtlasSearchIndexApiRequest) (*admin.ClusterSearchIndex, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(admin.UpdateAtlasSearchIndexApiRequest) *admin.ClusterSearchIndex); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*admin.ClusterSearchIndex)
		}
	}

	if rf, ok := ret.Get(1).(func(admin.UpdateAtlasSearchIndexApiRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(admin.UpdateAtlasSearchIndexApiRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AtlasSearchApiMock_UpdateAtlasSearchIndexExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAtlasSearchIndexExecute'
type AtlasSearchApiMock_UpdateAtlasSearchIndexExecute_Call struct {
	*mock.Call
}

// UpdateAtlasSearchIndexExecute is a helper method to define mock.On call
//   - r admin.UpdateAtlasSearchIndexApiRequest
func (_e *AtlasSearchApiMock_Expecter) UpdateAtlasSearchIndexExecute(r interface{}) *AtlasSearchApiMock_UpdateAtlasSearchIndexExecute_Call {
	return &AtlasSearchApiMock_UpdateAtlasSearchIndexExecute_Call{Call: _e.mock.On("UpdateAtlasSearchIndexExecute", r)}
}

func (_c *AtlasSearchApiMock_UpdateAtlasSearchIndexExecute_Call) Run(run func(r admin.UpdateAtlasSearchIndexApiRequest)) *AtlasSearchApiMock_UpdateAtlasSearchIndexExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(admin.UpdateAtlasSearchIndexApiRequest))
	})
	return _c
}

func (_c *AtlasSearchApiMock_UpdateAtlasSearchIndexExecute_Call) Return(_a0 *admin.ClusterSearchIndex, _a1 *http.Response, _a2 error) *AtlasSearchApiMock_UpdateAtlasSearchIndexExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AtlasSearchApiMock_UpdateAtlasSearchIndexExecute_Call) RunAndReturn(run func(admin.UpdateAtlasSearchIndexApiRequest) (*admin.ClusterSearchIndex, *http.Response, error)) *AtlasSearchApiMock_UpdateAtlasSearchIndexExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAtlasSearchIndexWithParams provides a mock function with given fields: ctx, args
func (_m *AtlasSearchApiMock) UpdateAtlasSearchIndexWithParams(ctx context.Context, args *admin.UpdateAtlasSearchIndexApiParams) admin.UpdateAtlasSearchIndexApiRequest {
	ret := _m.Called(ctx, args)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAtlasSearchIndexWithParams")
	}

	var r0 admin.UpdateAtlasSearchIndexApiRequest
	if rf, ok := ret.Get(0).(func(context.Context, *admin.UpdateAtlasSearchIndexApiParams) admin.UpdateAtlasSearchIndexApiRequest); ok {
		r0 = rf(ctx, args)
	} else {
		r0 = ret.Get(0).(admin.UpdateAtlasSearchIndexApiRequest)
	}

	return r0
}

// AtlasSearchApiMock_UpdateAtlasSearchIndexWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAtlasSearchIndexWithParams'
type AtlasSearchApiMock_UpdateAtlasSearchIndexWithParams_Call struct {
	*mock.Call
}

// UpdateAtlasSearchIndexWithParams is a helper method to define mock.On call
//   - ctx context.Context
//   - args *admin.UpdateAtlasSearchIndexApiParams
func (_e *AtlasSearchApiMock_Expecter) UpdateAtlasSearchIndexWithParams(ctx interface{}, args interface{}) *AtlasSearchApiMock_UpdateAtlasSearchIndexWithParams_Call {
	return &AtlasSearchApiMock_UpdateAtlasSearchIndexWithParams_Call{Call: _e.mock.On("UpdateAtlasSearchIndexWithParams", ctx, args)}
}

func (_c *AtlasSearchApiMock_UpdateAtlasSearchIndexWithParams_Call) Run(run func(ctx context.Context, args *admin.UpdateAtlasSearchIndexApiParams)) *AtlasSearchApiMock_UpdateAtlasSearchIndexWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*admin.UpdateAtlasSearchIndexApiParams))
	})
	return _c
}

func (_c *AtlasSearchApiMock_UpdateAtlasSearchIndexWithParams_Call) Return(_a0 admin.UpdateAtlasSearchIndexApiRequest) *AtlasSearchApiMock_UpdateAtlasSearchIndexWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasSearchApiMock_UpdateAtlasSearchIndexWithParams_Call) RunAndReturn(run func(context.Context, *admin.UpdateAtlasSearchIndexApiParams) admin.UpdateAtlasSearchIndexApiRequest) *AtlasSearchApiMock_UpdateAtlasSearchIndexWithParams_Call {
	_c.Call.Return(run)
	return _c
}

// NewAtlasSearchApiMock creates a new instance of AtlasSearchApiMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAtlasSearchApiMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AtlasSearchApiMock {
	mock := &AtlasSearchApiMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
