// Code generated by mockery. DO NOT EDIT.

package translation

import mock "github.com/stretchr/testify/mock"

// EndpointInterfaceMock is an autogenerated mock type for the EndpointInterface type
type EndpointInterfaceMock struct {
	mock.Mock
}

type EndpointInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *EndpointInterfaceMock) EXPECT() *EndpointInterfaceMock_Expecter {
	return &EndpointInterfaceMock_Expecter{mock: &_m.Mock}
}

// ErrorMessage provides a mock function with given fields:
func (_m *EndpointInterfaceMock) ErrorMessage() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ErrorMessage")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EndpointInterfaceMock_ErrorMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ErrorMessage'
type EndpointInterfaceMock_ErrorMessage_Call struct {
	*mock.Call
}

// ErrorMessage is a helper method to define mock.On call
func (_e *EndpointInterfaceMock_Expecter) ErrorMessage() *EndpointInterfaceMock_ErrorMessage_Call {
	return &EndpointInterfaceMock_ErrorMessage_Call{Call: _e.mock.On("ErrorMessage")}
}

func (_c *EndpointInterfaceMock_ErrorMessage_Call) Run(run func()) *EndpointInterfaceMock_ErrorMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EndpointInterfaceMock_ErrorMessage_Call) Return(_a0 string) *EndpointInterfaceMock_ErrorMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EndpointInterfaceMock_ErrorMessage_Call) RunAndReturn(run func() string) *EndpointInterfaceMock_ErrorMessage_Call {
	_c.Call.Return(run)
	return _c
}

// InterfaceID provides a mock function with given fields:
func (_m *EndpointInterfaceMock) InterfaceID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InterfaceID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EndpointInterfaceMock_InterfaceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InterfaceID'
type EndpointInterfaceMock_InterfaceID_Call struct {
	*mock.Call
}

// InterfaceID is a helper method to define mock.On call
func (_e *EndpointInterfaceMock_Expecter) InterfaceID() *EndpointInterfaceMock_InterfaceID_Call {
	return &EndpointInterfaceMock_InterfaceID_Call{Call: _e.mock.On("InterfaceID")}
}

func (_c *EndpointInterfaceMock_InterfaceID_Call) Run(run func()) *EndpointInterfaceMock_InterfaceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EndpointInterfaceMock_InterfaceID_Call) Return(_a0 string) *EndpointInterfaceMock_InterfaceID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EndpointInterfaceMock_InterfaceID_Call) RunAndReturn(run func() string) *EndpointInterfaceMock_InterfaceID_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields:
func (_m *EndpointInterfaceMock) Status() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EndpointInterfaceMock_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type EndpointInterfaceMock_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *EndpointInterfaceMock_Expecter) Status() *EndpointInterfaceMock_Status_Call {
	return &EndpointInterfaceMock_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *EndpointInterfaceMock_Status_Call) Run(run func()) *EndpointInterfaceMock_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EndpointInterfaceMock_Status_Call) Return(_a0 string) *EndpointInterfaceMock_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EndpointInterfaceMock_Status_Call) RunAndReturn(run func() string) *EndpointInterfaceMock_Status_Call {
	_c.Call.Return(run)
	return _c
}

// NewEndpointInterfaceMock creates a new instance of EndpointInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEndpointInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EndpointInterfaceMock {
	mock := &EndpointInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
