// Code generated by mockery. DO NOT EDIT.
package translation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	atlasorgsettings "github.com/mongodb/mongodb-atlas-kubernetes/v2/internal/translation/atlasorgsettings"
)

// AtlasOrgSettingsServiceMock is an autogenerated mock type for the AtlasOrgSettingsService type
type AtlasOrgSettingsServiceMock struct {
	mock.Mock
}

type AtlasOrgSettingsServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AtlasOrgSettingsServiceMock) EXPECT() *AtlasOrgSettingsServiceMock_Expecter {
	return &AtlasOrgSettingsServiceMock_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, orgID
func (_m *AtlasOrgSettingsServiceMock) Get(ctx context.Context, orgID string) (*atlasorgsettings.AtlasOrgSettings, error) {
	ret := _m.Called(ctx, orgID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *atlasorgsettings.AtlasOrgSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*atlasorgsettings.AtlasOrgSettings, error)); ok {
		return rf(ctx, orgID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *atlasorgsettings.AtlasOrgSettings); ok {
		r0 = rf(ctx, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*atlasorgsettings.AtlasOrgSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AtlasOrgSettingsServiceMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type AtlasOrgSettingsServiceMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
func (_e *AtlasOrgSettingsServiceMock_Expecter) Get(ctx interface{}, orgID interface{}) *AtlasOrgSettingsServiceMock_Get_Call {
	return &AtlasOrgSettingsServiceMock_Get_Call{Call: _e.mock.On("Get", ctx, orgID)}
}

func (_c *AtlasOrgSettingsServiceMock_Get_Call) Run(run func(ctx context.Context, orgID string)) *AtlasOrgSettingsServiceMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AtlasOrgSettingsServiceMock_Get_Call) Return(_a0 *atlasorgsettings.AtlasOrgSettings, _a1 error) *AtlasOrgSettingsServiceMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AtlasOrgSettingsServiceMock_Get_Call) RunAndReturn(run func(context.Context, string) (*atlasorgsettings.AtlasOrgSettings, error)) *AtlasOrgSettingsServiceMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, orgID, aos
func (_m *AtlasOrgSettingsServiceMock) Update(ctx context.Context, orgID string, aos *atlasorgsettings.AtlasOrgSettings) (*atlasorgsettings.AtlasOrgSettings, error) {
	ret := _m.Called(ctx, orgID, aos)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *atlasorgsettings.AtlasOrgSettings
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *atlasorgsettings.AtlasOrgSettings) (*atlasorgsettings.AtlasOrgSettings, error)); ok {
		return rf(ctx, orgID, aos)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *atlasorgsettings.AtlasOrgSettings) *atlasorgsettings.AtlasOrgSettings); ok {
		r0 = rf(ctx, orgID, aos)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*atlasorgsettings.AtlasOrgSettings)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *atlasorgsettings.AtlasOrgSettings) error); ok {
		r1 = rf(ctx, orgID, aos)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AtlasOrgSettingsServiceMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type AtlasOrgSettingsServiceMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - aos *atlasorgsettings.AtlasOrgSettings
func (_e *AtlasOrgSettingsServiceMock_Expecter) Update(ctx interface{}, orgID interface{}, aos interface{}) *AtlasOrgSettingsServiceMock_Update_Call {
	return &AtlasOrgSettingsServiceMock_Update_Call{Call: _e.mock.On("Update", ctx, orgID, aos)}
}

func (_c *AtlasOrgSettingsServiceMock_Update_Call) Run(run func(ctx context.Context, orgID string, aos *atlasorgsettings.AtlasOrgSettings)) *AtlasOrgSettingsServiceMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*atlasorgsettings.AtlasOrgSettings))
	})
	return _c
}

func (_c *AtlasOrgSettingsServiceMock_Update_Call) Return(_a0 *atlasorgsettings.AtlasOrgSettings, _a1 error) *AtlasOrgSettingsServiceMock_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AtlasOrgSettingsServiceMock_Update_Call) RunAndReturn(run func(context.Context, string, *atlasorgsettings.AtlasOrgSettings) (*atlasorgsettings.AtlasOrgSettings, error)) *AtlasOrgSettingsServiceMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewAtlasOrgSettingsServiceMock creates a new instance of AtlasOrgSettingsServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAtlasOrgSettingsServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AtlasOrgSettingsServiceMock {
	mock := &AtlasOrgSettingsServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
