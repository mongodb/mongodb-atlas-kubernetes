// Code generated by mockery. DO NOT EDIT.

package translation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	thirdpartyintegration "github.com/mongodb/mongodb-atlas-kubernetes/v2/internal/translation/thirdpartyintegration"
)

// ThirdPartyIntegrationServiceMock is an autogenerated mock type for the ThirdPartyIntegrationService type
type ThirdPartyIntegrationServiceMock struct {
	mock.Mock
}

type ThirdPartyIntegrationServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ThirdPartyIntegrationServiceMock) EXPECT() *ThirdPartyIntegrationServiceMock_Expecter {
	return &ThirdPartyIntegrationServiceMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, projectID, integration
func (_m *ThirdPartyIntegrationServiceMock) Create(ctx context.Context, projectID string, integration *thirdpartyintegration.ThirdPartyIntegration) (*thirdpartyintegration.ThirdPartyIntegration, error) {
	ret := _m.Called(ctx, projectID, integration)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *thirdpartyintegration.ThirdPartyIntegration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *thirdpartyintegration.ThirdPartyIntegration) (*thirdpartyintegration.ThirdPartyIntegration, error)); ok {
		return rf(ctx, projectID, integration)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *thirdpartyintegration.ThirdPartyIntegration) *thirdpartyintegration.ThirdPartyIntegration); ok {
		r0 = rf(ctx, projectID, integration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*thirdpartyintegration.ThirdPartyIntegration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *thirdpartyintegration.ThirdPartyIntegration) error); ok {
		r1 = rf(ctx, projectID, integration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ThirdPartyIntegrationServiceMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ThirdPartyIntegrationServiceMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - integration *thirdpartyintegration.ThirdPartyIntegration
func (_e *ThirdPartyIntegrationServiceMock_Expecter) Create(ctx interface{}, projectID interface{}, integration interface{}) *ThirdPartyIntegrationServiceMock_Create_Call {
	return &ThirdPartyIntegrationServiceMock_Create_Call{Call: _e.mock.On("Create", ctx, projectID, integration)}
}

func (_c *ThirdPartyIntegrationServiceMock_Create_Call) Run(run func(ctx context.Context, projectID string, integration *thirdpartyintegration.ThirdPartyIntegration)) *ThirdPartyIntegrationServiceMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*thirdpartyintegration.ThirdPartyIntegration))
	})
	return _c
}

func (_c *ThirdPartyIntegrationServiceMock_Create_Call) Return(_a0 *thirdpartyintegration.ThirdPartyIntegration, _a1 error) *ThirdPartyIntegrationServiceMock_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ThirdPartyIntegrationServiceMock_Create_Call) RunAndReturn(run func(context.Context, string, *thirdpartyintegration.ThirdPartyIntegration) (*thirdpartyintegration.ThirdPartyIntegration, error)) *ThirdPartyIntegrationServiceMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, projectID, integrationType
func (_m *ThirdPartyIntegrationServiceMock) Delete(ctx context.Context, projectID string, integrationType string) error {
	ret := _m.Called(ctx, projectID, integrationType)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, integrationType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ThirdPartyIntegrationServiceMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ThirdPartyIntegrationServiceMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - integrationType string
func (_e *ThirdPartyIntegrationServiceMock_Expecter) Delete(ctx interface{}, projectID interface{}, integrationType interface{}) *ThirdPartyIntegrationServiceMock_Delete_Call {
	return &ThirdPartyIntegrationServiceMock_Delete_Call{Call: _e.mock.On("Delete", ctx, projectID, integrationType)}
}

func (_c *ThirdPartyIntegrationServiceMock_Delete_Call) Run(run func(ctx context.Context, projectID string, integrationType string)) *ThirdPartyIntegrationServiceMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ThirdPartyIntegrationServiceMock_Delete_Call) Return(_a0 error) *ThirdPartyIntegrationServiceMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ThirdPartyIntegrationServiceMock_Delete_Call) RunAndReturn(run func(context.Context, string, string) error) *ThirdPartyIntegrationServiceMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, projectID, integrationType
func (_m *ThirdPartyIntegrationServiceMock) Get(ctx context.Context, projectID string, integrationType string) (*thirdpartyintegration.ThirdPartyIntegration, error) {
	ret := _m.Called(ctx, projectID, integrationType)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *thirdpartyintegration.ThirdPartyIntegration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*thirdpartyintegration.ThirdPartyIntegration, error)); ok {
		return rf(ctx, projectID, integrationType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *thirdpartyintegration.ThirdPartyIntegration); ok {
		r0 = rf(ctx, projectID, integrationType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*thirdpartyintegration.ThirdPartyIntegration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, integrationType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ThirdPartyIntegrationServiceMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type ThirdPartyIntegrationServiceMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - integrationType string
func (_e *ThirdPartyIntegrationServiceMock_Expecter) Get(ctx interface{}, projectID interface{}, integrationType interface{}) *ThirdPartyIntegrationServiceMock_Get_Call {
	return &ThirdPartyIntegrationServiceMock_Get_Call{Call: _e.mock.On("Get", ctx, projectID, integrationType)}
}

func (_c *ThirdPartyIntegrationServiceMock_Get_Call) Run(run func(ctx context.Context, projectID string, integrationType string)) *ThirdPartyIntegrationServiceMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ThirdPartyIntegrationServiceMock_Get_Call) Return(_a0 *thirdpartyintegration.ThirdPartyIntegration, _a1 error) *ThirdPartyIntegrationServiceMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ThirdPartyIntegrationServiceMock_Get_Call) RunAndReturn(run func(context.Context, string, string) (*thirdpartyintegration.ThirdPartyIntegration, error)) *ThirdPartyIntegrationServiceMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, projectID, integration
func (_m *ThirdPartyIntegrationServiceMock) Update(ctx context.Context, projectID string, integration *thirdpartyintegration.ThirdPartyIntegration) (*thirdpartyintegration.ThirdPartyIntegration, error) {
	ret := _m.Called(ctx, projectID, integration)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *thirdpartyintegration.ThirdPartyIntegration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *thirdpartyintegration.ThirdPartyIntegration) (*thirdpartyintegration.ThirdPartyIntegration, error)); ok {
		return rf(ctx, projectID, integration)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *thirdpartyintegration.ThirdPartyIntegration) *thirdpartyintegration.ThirdPartyIntegration); ok {
		r0 = rf(ctx, projectID, integration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*thirdpartyintegration.ThirdPartyIntegration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *thirdpartyintegration.ThirdPartyIntegration) error); ok {
		r1 = rf(ctx, projectID, integration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ThirdPartyIntegrationServiceMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ThirdPartyIntegrationServiceMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - integration *thirdpartyintegration.ThirdPartyIntegration
func (_e *ThirdPartyIntegrationServiceMock_Expecter) Update(ctx interface{}, projectID interface{}, integration interface{}) *ThirdPartyIntegrationServiceMock_Update_Call {
	return &ThirdPartyIntegrationServiceMock_Update_Call{Call: _e.mock.On("Update", ctx, projectID, integration)}
}

func (_c *ThirdPartyIntegrationServiceMock_Update_Call) Run(run func(ctx context.Context, projectID string, integration *thirdpartyintegration.ThirdPartyIntegration)) *ThirdPartyIntegrationServiceMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*thirdpartyintegration.ThirdPartyIntegration))
	})
	return _c
}

func (_c *ThirdPartyIntegrationServiceMock_Update_Call) Return(_a0 *thirdpartyintegration.ThirdPartyIntegration, _a1 error) *ThirdPartyIntegrationServiceMock_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ThirdPartyIntegrationServiceMock_Update_Call) RunAndReturn(run func(context.Context, string, *thirdpartyintegration.ThirdPartyIntegration) (*thirdpartyintegration.ThirdPartyIntegration, error)) *ThirdPartyIntegrationServiceMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewThirdPartyIntegrationServiceMock creates a new instance of ThirdPartyIntegrationServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewThirdPartyIntegrationServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ThirdPartyIntegrationServiceMock {
	mock := &ThirdPartyIntegrationServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
