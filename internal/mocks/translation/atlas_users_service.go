// Code generated by mockery. DO NOT EDIT.

package translation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	dbuser "github.com/mongodb/mongodb-atlas-kubernetes/v2/internal/translation/dbuser"
)

// AtlasUsersServiceMock is an autogenerated mock type for the AtlasUsersService type
type AtlasUsersServiceMock struct {
	mock.Mock
}

type AtlasUsersServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AtlasUsersServiceMock) EXPECT() *AtlasUsersServiceMock_Expecter {
	return &AtlasUsersServiceMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, au
func (_m *AtlasUsersServiceMock) Create(ctx context.Context, au *dbuser.User) error {
	ret := _m.Called(ctx, au)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dbuser.User) error); ok {
		r0 = rf(ctx, au)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AtlasUsersServiceMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AtlasUsersServiceMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - au *dbuser.User
func (_e *AtlasUsersServiceMock_Expecter) Create(ctx interface{}, au interface{}) *AtlasUsersServiceMock_Create_Call {
	return &AtlasUsersServiceMock_Create_Call{Call: _e.mock.On("Create", ctx, au)}
}

func (_c *AtlasUsersServiceMock_Create_Call) Run(run func(ctx context.Context, au *dbuser.User)) *AtlasUsersServiceMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dbuser.User))
	})
	return _c
}

func (_c *AtlasUsersServiceMock_Create_Call) Return(_a0 error) *AtlasUsersServiceMock_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasUsersServiceMock_Create_Call) RunAndReturn(run func(context.Context, *dbuser.User) error) *AtlasUsersServiceMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, db, projectID, username
func (_m *AtlasUsersServiceMock) Delete(ctx context.Context, db string, projectID string, username string) error {
	ret := _m.Called(ctx, db, projectID, username)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, db, projectID, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AtlasUsersServiceMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type AtlasUsersServiceMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - db string
//   - projectID string
//   - username string
func (_e *AtlasUsersServiceMock_Expecter) Delete(ctx interface{}, db interface{}, projectID interface{}, username interface{}) *AtlasUsersServiceMock_Delete_Call {
	return &AtlasUsersServiceMock_Delete_Call{Call: _e.mock.On("Delete", ctx, db, projectID, username)}
}

func (_c *AtlasUsersServiceMock_Delete_Call) Run(run func(ctx context.Context, db string, projectID string, username string)) *AtlasUsersServiceMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AtlasUsersServiceMock_Delete_Call) Return(_a0 error) *AtlasUsersServiceMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasUsersServiceMock_Delete_Call) RunAndReturn(run func(context.Context, string, string, string) error) *AtlasUsersServiceMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, db, projectID, username
func (_m *AtlasUsersServiceMock) Get(ctx context.Context, db string, projectID string, username string) (*dbuser.User, error) {
	ret := _m.Called(ctx, db, projectID, username)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *dbuser.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*dbuser.User, error)); ok {
		return rf(ctx, db, projectID, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *dbuser.User); ok {
		r0 = rf(ctx, db, projectID, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbuser.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, db, projectID, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AtlasUsersServiceMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type AtlasUsersServiceMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - db string
//   - projectID string
//   - username string
func (_e *AtlasUsersServiceMock_Expecter) Get(ctx interface{}, db interface{}, projectID interface{}, username interface{}) *AtlasUsersServiceMock_Get_Call {
	return &AtlasUsersServiceMock_Get_Call{Call: _e.mock.On("Get", ctx, db, projectID, username)}
}

func (_c *AtlasUsersServiceMock_Get_Call) Run(run func(ctx context.Context, db string, projectID string, username string)) *AtlasUsersServiceMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *AtlasUsersServiceMock_Get_Call) Return(_a0 *dbuser.User, _a1 error) *AtlasUsersServiceMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AtlasUsersServiceMock_Get_Call) RunAndReturn(run func(context.Context, string, string, string) (*dbuser.User, error)) *AtlasUsersServiceMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, au
func (_m *AtlasUsersServiceMock) Update(ctx context.Context, au *dbuser.User) error {
	ret := _m.Called(ctx, au)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dbuser.User) error); ok {
		r0 = rf(ctx, au)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AtlasUsersServiceMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type AtlasUsersServiceMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - au *dbuser.User
func (_e *AtlasUsersServiceMock_Expecter) Update(ctx interface{}, au interface{}) *AtlasUsersServiceMock_Update_Call {
	return &AtlasUsersServiceMock_Update_Call{Call: _e.mock.On("Update", ctx, au)}
}

func (_c *AtlasUsersServiceMock_Update_Call) Run(run func(ctx context.Context, au *dbuser.User)) *AtlasUsersServiceMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*dbuser.User))
	})
	return _c
}

func (_c *AtlasUsersServiceMock_Update_Call) Return(_a0 error) *AtlasUsersServiceMock_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasUsersServiceMock_Update_Call) RunAndReturn(run func(context.Context, *dbuser.User) error) *AtlasUsersServiceMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewAtlasUsersServiceMock creates a new instance of AtlasUsersServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAtlasUsersServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AtlasUsersServiceMock {
	mock := &AtlasUsersServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
