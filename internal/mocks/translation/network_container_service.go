// Code generated by mockery. DO NOT EDIT.

package translation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	networkcontainer "github.com/mongodb/mongodb-atlas-kubernetes/v2/internal/translation/networkcontainer"
)

// NetworkContainerServiceMock is an autogenerated mock type for the NetworkContainerService type
type NetworkContainerServiceMock struct {
	mock.Mock
}

type NetworkContainerServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *NetworkContainerServiceMock) EXPECT() *NetworkContainerServiceMock_Expecter {
	return &NetworkContainerServiceMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, projectID, cfg
func (_m *NetworkContainerServiceMock) Create(ctx context.Context, projectID string, cfg *networkcontainer.NetworkContainerConfig) (*networkcontainer.NetworkContainer, error) {
	ret := _m.Called(ctx, projectID, cfg)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *networkcontainer.NetworkContainer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *networkcontainer.NetworkContainerConfig) (*networkcontainer.NetworkContainer, error)); ok {
		return rf(ctx, projectID, cfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *networkcontainer.NetworkContainerConfig) *networkcontainer.NetworkContainer); ok {
		r0 = rf(ctx, projectID, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkcontainer.NetworkContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *networkcontainer.NetworkContainerConfig) error); ok {
		r1 = rf(ctx, projectID, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkContainerServiceMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type NetworkContainerServiceMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - cfg *networkcontainer.NetworkContainerConfig
func (_e *NetworkContainerServiceMock_Expecter) Create(ctx interface{}, projectID interface{}, cfg interface{}) *NetworkContainerServiceMock_Create_Call {
	return &NetworkContainerServiceMock_Create_Call{Call: _e.mock.On("Create", ctx, projectID, cfg)}
}

func (_c *NetworkContainerServiceMock_Create_Call) Run(run func(ctx context.Context, projectID string, cfg *networkcontainer.NetworkContainerConfig)) *NetworkContainerServiceMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*networkcontainer.NetworkContainerConfig))
	})
	return _c
}

func (_c *NetworkContainerServiceMock_Create_Call) Return(_a0 *networkcontainer.NetworkContainer, _a1 error) *NetworkContainerServiceMock_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NetworkContainerServiceMock_Create_Call) RunAndReturn(run func(context.Context, string, *networkcontainer.NetworkContainerConfig) (*networkcontainer.NetworkContainer, error)) *NetworkContainerServiceMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, projectID, containerID
func (_m *NetworkContainerServiceMock) Delete(ctx context.Context, projectID string, containerID string) error {
	ret := _m.Called(ctx, projectID, containerID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, containerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NetworkContainerServiceMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type NetworkContainerServiceMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - containerID string
func (_e *NetworkContainerServiceMock_Expecter) Delete(ctx interface{}, projectID interface{}, containerID interface{}) *NetworkContainerServiceMock_Delete_Call {
	return &NetworkContainerServiceMock_Delete_Call{Call: _e.mock.On("Delete", ctx, projectID, containerID)}
}

func (_c *NetworkContainerServiceMock_Delete_Call) Run(run func(ctx context.Context, projectID string, containerID string)) *NetworkContainerServiceMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *NetworkContainerServiceMock_Delete_Call) Return(_a0 error) *NetworkContainerServiceMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkContainerServiceMock_Delete_Call) RunAndReturn(run func(context.Context, string, string) error) *NetworkContainerServiceMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: ctx, projectID, cfg
func (_m *NetworkContainerServiceMock) Find(ctx context.Context, projectID string, cfg *networkcontainer.NetworkContainerConfig) (*networkcontainer.NetworkContainer, error) {
	ret := _m.Called(ctx, projectID, cfg)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *networkcontainer.NetworkContainer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *networkcontainer.NetworkContainerConfig) (*networkcontainer.NetworkContainer, error)); ok {
		return rf(ctx, projectID, cfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *networkcontainer.NetworkContainerConfig) *networkcontainer.NetworkContainer); ok {
		r0 = rf(ctx, projectID, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkcontainer.NetworkContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *networkcontainer.NetworkContainerConfig) error); ok {
		r1 = rf(ctx, projectID, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkContainerServiceMock_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type NetworkContainerServiceMock_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - cfg *networkcontainer.NetworkContainerConfig
func (_e *NetworkContainerServiceMock_Expecter) Find(ctx interface{}, projectID interface{}, cfg interface{}) *NetworkContainerServiceMock_Find_Call {
	return &NetworkContainerServiceMock_Find_Call{Call: _e.mock.On("Find", ctx, projectID, cfg)}
}

func (_c *NetworkContainerServiceMock_Find_Call) Run(run func(ctx context.Context, projectID string, cfg *networkcontainer.NetworkContainerConfig)) *NetworkContainerServiceMock_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*networkcontainer.NetworkContainerConfig))
	})
	return _c
}

func (_c *NetworkContainerServiceMock_Find_Call) Return(_a0 *networkcontainer.NetworkContainer, _a1 error) *NetworkContainerServiceMock_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NetworkContainerServiceMock_Find_Call) RunAndReturn(run func(context.Context, string, *networkcontainer.NetworkContainerConfig) (*networkcontainer.NetworkContainer, error)) *NetworkContainerServiceMock_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, projectID, containerID
func (_m *NetworkContainerServiceMock) Get(ctx context.Context, projectID string, containerID string) (*networkcontainer.NetworkContainer, error) {
	ret := _m.Called(ctx, projectID, containerID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *networkcontainer.NetworkContainer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*networkcontainer.NetworkContainer, error)); ok {
		return rf(ctx, projectID, containerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *networkcontainer.NetworkContainer); ok {
		r0 = rf(ctx, projectID, containerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkcontainer.NetworkContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, containerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkContainerServiceMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type NetworkContainerServiceMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - containerID string
func (_e *NetworkContainerServiceMock_Expecter) Get(ctx interface{}, projectID interface{}, containerID interface{}) *NetworkContainerServiceMock_Get_Call {
	return &NetworkContainerServiceMock_Get_Call{Call: _e.mock.On("Get", ctx, projectID, containerID)}
}

func (_c *NetworkContainerServiceMock_Get_Call) Run(run func(ctx context.Context, projectID string, containerID string)) *NetworkContainerServiceMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *NetworkContainerServiceMock_Get_Call) Return(_a0 *networkcontainer.NetworkContainer, _a1 error) *NetworkContainerServiceMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NetworkContainerServiceMock_Get_Call) RunAndReturn(run func(context.Context, string, string) (*networkcontainer.NetworkContainer, error)) *NetworkContainerServiceMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, projectID, containerID, cfg
func (_m *NetworkContainerServiceMock) Update(ctx context.Context, projectID string, containerID string, cfg *networkcontainer.NetworkContainerConfig) (*networkcontainer.NetworkContainer, error) {
	ret := _m.Called(ctx, projectID, containerID, cfg)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *networkcontainer.NetworkContainer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *networkcontainer.NetworkContainerConfig) (*networkcontainer.NetworkContainer, error)); ok {
		return rf(ctx, projectID, containerID, cfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *networkcontainer.NetworkContainerConfig) *networkcontainer.NetworkContainer); ok {
		r0 = rf(ctx, projectID, containerID, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkcontainer.NetworkContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *networkcontainer.NetworkContainerConfig) error); ok {
		r1 = rf(ctx, projectID, containerID, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkContainerServiceMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type NetworkContainerServiceMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - containerID string
//   - cfg *networkcontainer.NetworkContainerConfig
func (_e *NetworkContainerServiceMock_Expecter) Update(ctx interface{}, projectID interface{}, containerID interface{}, cfg interface{}) *NetworkContainerServiceMock_Update_Call {
	return &NetworkContainerServiceMock_Update_Call{Call: _e.mock.On("Update", ctx, projectID, containerID, cfg)}
}

func (_c *NetworkContainerServiceMock_Update_Call) Run(run func(ctx context.Context, projectID string, containerID string, cfg *networkcontainer.NetworkContainerConfig)) *NetworkContainerServiceMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*networkcontainer.NetworkContainerConfig))
	})
	return _c
}

func (_c *NetworkContainerServiceMock_Update_Call) Return(_a0 *networkcontainer.NetworkContainer, _a1 error) *NetworkContainerServiceMock_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NetworkContainerServiceMock_Update_Call) RunAndReturn(run func(context.Context, string, string, *networkcontainer.NetworkContainerConfig) (*networkcontainer.NetworkContainer, error)) *NetworkContainerServiceMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewNetworkContainerServiceMock creates a new instance of NetworkContainerServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNetworkContainerServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *NetworkContainerServiceMock {
	mock := &NetworkContainerServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
