// Code generated by mockery. DO NOT EDIT.

package translation

import (
	mock "github.com/stretchr/testify/mock"

	privateendpoint "github.com/mongodb/mongodb-atlas-kubernetes/v2/internal/translation/privateendpoint"
)

// EndpointServiceMock is an autogenerated mock type for the EndpointService type
type EndpointServiceMock struct {
	mock.Mock
}

type EndpointServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *EndpointServiceMock) EXPECT() *EndpointServiceMock_Expecter {
	return &EndpointServiceMock_Expecter{mock: &_m.Mock}
}

// EndpointInterfaces provides a mock function with given fields:
func (_m *EndpointServiceMock) EndpointInterfaces() privateendpoint.EndpointInterfaces {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for EndpointInterfaces")
	}

	var r0 privateendpoint.EndpointInterfaces
	if rf, ok := ret.Get(0).(func() privateendpoint.EndpointInterfaces); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(privateendpoint.EndpointInterfaces)
		}
	}

	return r0
}

// EndpointServiceMock_EndpointInterfaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndpointInterfaces'
type EndpointServiceMock_EndpointInterfaces_Call struct {
	*mock.Call
}

// EndpointInterfaces is a helper method to define mock.On call
func (_e *EndpointServiceMock_Expecter) EndpointInterfaces() *EndpointServiceMock_EndpointInterfaces_Call {
	return &EndpointServiceMock_EndpointInterfaces_Call{Call: _e.mock.On("EndpointInterfaces")}
}

func (_c *EndpointServiceMock_EndpointInterfaces_Call) Run(run func()) *EndpointServiceMock_EndpointInterfaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EndpointServiceMock_EndpointInterfaces_Call) Return(_a0 privateendpoint.EndpointInterfaces) *EndpointServiceMock_EndpointInterfaces_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EndpointServiceMock_EndpointInterfaces_Call) RunAndReturn(run func() privateendpoint.EndpointInterfaces) *EndpointServiceMock_EndpointInterfaces_Call {
	_c.Call.Return(run)
	return _c
}

// ErrorMessage provides a mock function with given fields:
func (_m *EndpointServiceMock) ErrorMessage() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ErrorMessage")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EndpointServiceMock_ErrorMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ErrorMessage'
type EndpointServiceMock_ErrorMessage_Call struct {
	*mock.Call
}

// ErrorMessage is a helper method to define mock.On call
func (_e *EndpointServiceMock_Expecter) ErrorMessage() *EndpointServiceMock_ErrorMessage_Call {
	return &EndpointServiceMock_ErrorMessage_Call{Call: _e.mock.On("ErrorMessage")}
}

func (_c *EndpointServiceMock_ErrorMessage_Call) Run(run func()) *EndpointServiceMock_ErrorMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EndpointServiceMock_ErrorMessage_Call) Return(_a0 string) *EndpointServiceMock_ErrorMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EndpointServiceMock_ErrorMessage_Call) RunAndReturn(run func() string) *EndpointServiceMock_ErrorMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Provider provides a mock function with given fields:
func (_m *EndpointServiceMock) Provider() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Provider")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EndpointServiceMock_Provider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Provider'
type EndpointServiceMock_Provider_Call struct {
	*mock.Call
}

// Provider is a helper method to define mock.On call
func (_e *EndpointServiceMock_Expecter) Provider() *EndpointServiceMock_Provider_Call {
	return &EndpointServiceMock_Provider_Call{Call: _e.mock.On("Provider")}
}

func (_c *EndpointServiceMock_Provider_Call) Run(run func()) *EndpointServiceMock_Provider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EndpointServiceMock_Provider_Call) Return(_a0 string) *EndpointServiceMock_Provider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EndpointServiceMock_Provider_Call) RunAndReturn(run func() string) *EndpointServiceMock_Provider_Call {
	_c.Call.Return(run)
	return _c
}

// Region provides a mock function with given fields:
func (_m *EndpointServiceMock) Region() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Region")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EndpointServiceMock_Region_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Region'
type EndpointServiceMock_Region_Call struct {
	*mock.Call
}

// Region is a helper method to define mock.On call
func (_e *EndpointServiceMock_Expecter) Region() *EndpointServiceMock_Region_Call {
	return &EndpointServiceMock_Region_Call{Call: _e.mock.On("Region")}
}

func (_c *EndpointServiceMock_Region_Call) Run(run func()) *EndpointServiceMock_Region_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EndpointServiceMock_Region_Call) Return(_a0 string) *EndpointServiceMock_Region_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EndpointServiceMock_Region_Call) RunAndReturn(run func() string) *EndpointServiceMock_Region_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceID provides a mock function with given fields:
func (_m *EndpointServiceMock) ServiceID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EndpointServiceMock_ServiceID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceID'
type EndpointServiceMock_ServiceID_Call struct {
	*mock.Call
}

// ServiceID is a helper method to define mock.On call
func (_e *EndpointServiceMock_Expecter) ServiceID() *EndpointServiceMock_ServiceID_Call {
	return &EndpointServiceMock_ServiceID_Call{Call: _e.mock.On("ServiceID")}
}

func (_c *EndpointServiceMock_ServiceID_Call) Run(run func()) *EndpointServiceMock_ServiceID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EndpointServiceMock_ServiceID_Call) Return(_a0 string) *EndpointServiceMock_ServiceID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EndpointServiceMock_ServiceID_Call) RunAndReturn(run func() string) *EndpointServiceMock_ServiceID_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with given fields:
func (_m *EndpointServiceMock) Status() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EndpointServiceMock_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type EndpointServiceMock_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *EndpointServiceMock_Expecter) Status() *EndpointServiceMock_Status_Call {
	return &EndpointServiceMock_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *EndpointServiceMock_Status_Call) Run(run func()) *EndpointServiceMock_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EndpointServiceMock_Status_Call) Return(_a0 string) *EndpointServiceMock_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EndpointServiceMock_Status_Call) RunAndReturn(run func() string) *EndpointServiceMock_Status_Call {
	_c.Call.Return(run)
	return _c
}

// NewEndpointServiceMock creates a new instance of EndpointServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEndpointServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EndpointServiceMock {
	mock := &EndpointServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
