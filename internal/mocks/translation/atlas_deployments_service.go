// Code generated by mockery. DO NOT EDIT.

package translation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	deployment "github.com/mongodb/mongodb-atlas-kubernetes/v2/internal/translation/deployment"
)

// AtlasDeploymentsServiceMock is an autogenerated mock type for the AtlasDeploymentsService type
type AtlasDeploymentsServiceMock struct {
	mock.Mock
}

type AtlasDeploymentsServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AtlasDeploymentsServiceMock) EXPECT() *AtlasDeploymentsServiceMock_Expecter {
	return &AtlasDeploymentsServiceMock_Expecter{mock: &_m.Mock}
}

// ClusterExists provides a mock function with given fields: ctx, projectID, clusterName
func (_m *AtlasDeploymentsServiceMock) ClusterExists(ctx context.Context, projectID string, clusterName string) (bool, error) {
	ret := _m.Called(ctx, projectID, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for ClusterExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, projectID, clusterName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, projectID, clusterName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, clusterName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AtlasDeploymentsServiceMock_ClusterExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterExists'
type AtlasDeploymentsServiceMock_ClusterExists_Call struct {
	*mock.Call
}

// ClusterExists is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - clusterName string
func (_e *AtlasDeploymentsServiceMock_Expecter) ClusterExists(ctx interface{}, projectID interface{}, clusterName interface{}) *AtlasDeploymentsServiceMock_ClusterExists_Call {
	return &AtlasDeploymentsServiceMock_ClusterExists_Call{Call: _e.mock.On("ClusterExists", ctx, projectID, clusterName)}
}

func (_c *AtlasDeploymentsServiceMock_ClusterExists_Call) Run(run func(ctx context.Context, projectID string, clusterName string)) *AtlasDeploymentsServiceMock_ClusterExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AtlasDeploymentsServiceMock_ClusterExists_Call) Return(_a0 bool, _a1 error) *AtlasDeploymentsServiceMock_ClusterExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AtlasDeploymentsServiceMock_ClusterExists_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *AtlasDeploymentsServiceMock_ClusterExists_Call {
	_c.Call.Return(run)
	return _c
}

// DeploymentIsReady provides a mock function with given fields: ctx, projectID, deploymentName
func (_m *AtlasDeploymentsServiceMock) DeploymentIsReady(ctx context.Context, projectID string, deploymentName string) (bool, error) {
	ret := _m.Called(ctx, projectID, deploymentName)

	if len(ret) == 0 {
		panic("no return value specified for DeploymentIsReady")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, projectID, deploymentName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, projectID, deploymentName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, deploymentName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AtlasDeploymentsServiceMock_DeploymentIsReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeploymentIsReady'
type AtlasDeploymentsServiceMock_DeploymentIsReady_Call struct {
	*mock.Call
}

// DeploymentIsReady is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - deploymentName string
func (_e *AtlasDeploymentsServiceMock_Expecter) DeploymentIsReady(ctx interface{}, projectID interface{}, deploymentName interface{}) *AtlasDeploymentsServiceMock_DeploymentIsReady_Call {
	return &AtlasDeploymentsServiceMock_DeploymentIsReady_Call{Call: _e.mock.On("DeploymentIsReady", ctx, projectID, deploymentName)}
}

func (_c *AtlasDeploymentsServiceMock_DeploymentIsReady_Call) Run(run func(ctx context.Context, projectID string, deploymentName string)) *AtlasDeploymentsServiceMock_DeploymentIsReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AtlasDeploymentsServiceMock_DeploymentIsReady_Call) Return(_a0 bool, _a1 error) *AtlasDeploymentsServiceMock_DeploymentIsReady_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AtlasDeploymentsServiceMock_DeploymentIsReady_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *AtlasDeploymentsServiceMock_DeploymentIsReady_Call {
	_c.Call.Return(run)
	return _c
}

// ListClusterNames provides a mock function with given fields: ctx, projectID
func (_m *AtlasDeploymentsServiceMock) ListClusterNames(ctx context.Context, projectID string) ([]string, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterNames")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AtlasDeploymentsServiceMock_ListClusterNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListClusterNames'
type AtlasDeploymentsServiceMock_ListClusterNames_Call struct {
	*mock.Call
}

// ListClusterNames is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *AtlasDeploymentsServiceMock_Expecter) ListClusterNames(ctx interface{}, projectID interface{}) *AtlasDeploymentsServiceMock_ListClusterNames_Call {
	return &AtlasDeploymentsServiceMock_ListClusterNames_Call{Call: _e.mock.On("ListClusterNames", ctx, projectID)}
}

func (_c *AtlasDeploymentsServiceMock_ListClusterNames_Call) Run(run func(ctx context.Context, projectID string)) *AtlasDeploymentsServiceMock_ListClusterNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AtlasDeploymentsServiceMock_ListClusterNames_Call) Return(_a0 []string, _a1 error) *AtlasDeploymentsServiceMock_ListClusterNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AtlasDeploymentsServiceMock_ListClusterNames_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *AtlasDeploymentsServiceMock_ListClusterNames_Call {
	_c.Call.Return(run)
	return _c
}

// ListDeploymentConnections provides a mock function with given fields: ctx, projectID
func (_m *AtlasDeploymentsServiceMock) ListDeploymentConnections(ctx context.Context, projectID string) ([]deployment.Connection, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ListDeploymentConnections")
	}

	var r0 []deployment.Connection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]deployment.Connection, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []deployment.Connection); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]deployment.Connection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AtlasDeploymentsServiceMock_ListDeploymentConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDeploymentConnections'
type AtlasDeploymentsServiceMock_ListDeploymentConnections_Call struct {
	*mock.Call
}

// ListDeploymentConnections is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *AtlasDeploymentsServiceMock_Expecter) ListDeploymentConnections(ctx interface{}, projectID interface{}) *AtlasDeploymentsServiceMock_ListDeploymentConnections_Call {
	return &AtlasDeploymentsServiceMock_ListDeploymentConnections_Call{Call: _e.mock.On("ListDeploymentConnections", ctx, projectID)}
}

func (_c *AtlasDeploymentsServiceMock_ListDeploymentConnections_Call) Run(run func(ctx context.Context, projectID string)) *AtlasDeploymentsServiceMock_ListDeploymentConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AtlasDeploymentsServiceMock_ListDeploymentConnections_Call) Return(_a0 []deployment.Connection, _a1 error) *AtlasDeploymentsServiceMock_ListDeploymentConnections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AtlasDeploymentsServiceMock_ListDeploymentConnections_Call) RunAndReturn(run func(context.Context, string) ([]deployment.Connection, error)) *AtlasDeploymentsServiceMock_ListDeploymentConnections_Call {
	_c.Call.Return(run)
	return _c
}

// NewAtlasDeploymentsServiceMock creates a new instance of AtlasDeploymentsServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAtlasDeploymentsServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AtlasDeploymentsServiceMock {
	mock := &AtlasDeploymentsServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
