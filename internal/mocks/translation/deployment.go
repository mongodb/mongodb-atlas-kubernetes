// Code generated by mockery. DO NOT EDIT.

package translation

import (
	mock "github.com/stretchr/testify/mock"

	v1 "github.com/mongodb/mongodb-atlas-kubernetes/v2/api/v1"
	status "github.com/mongodb/mongodb-atlas-kubernetes/v2/api/v1/status"
)

// DeploymentMock is an autogenerated mock type for the Deployment type
type DeploymentMock struct {
	mock.Mock
}

type DeploymentMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DeploymentMock) EXPECT() *DeploymentMock_Expecter {
	return &DeploymentMock_Expecter{mock: &_m.Mock}
}

// GetConnection provides a mock function with no fields
func (_m *DeploymentMock) GetConnection() *status.ConnectionStrings {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConnection")
	}

	var r0 *status.ConnectionStrings
	if rf, ok := ret.Get(0).(func() *status.ConnectionStrings); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*status.ConnectionStrings)
		}
	}

	return r0
}

// DeploymentMock_GetConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnection'
type DeploymentMock_GetConnection_Call struct {
	*mock.Call
}

// GetConnection is a helper method to define mock.On call
func (_e *DeploymentMock_Expecter) GetConnection() *DeploymentMock_GetConnection_Call {
	return &DeploymentMock_GetConnection_Call{Call: _e.mock.On("GetConnection")}
}

func (_c *DeploymentMock_GetConnection_Call) Run(run func()) *DeploymentMock_GetConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeploymentMock_GetConnection_Call) Return(_a0 *status.ConnectionStrings) *DeploymentMock_GetConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeploymentMock_GetConnection_Call) RunAndReturn(run func() *status.ConnectionStrings) *DeploymentMock_GetConnection_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomResource provides a mock function with no fields
func (_m *DeploymentMock) GetCustomResource() *v1.AtlasDeployment {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCustomResource")
	}

	var r0 *v1.AtlasDeployment
	if rf, ok := ret.Get(0).(func() *v1.AtlasDeployment); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.AtlasDeployment)
		}
	}

	return r0
}

// DeploymentMock_GetCustomResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomResource'
type DeploymentMock_GetCustomResource_Call struct {
	*mock.Call
}

// GetCustomResource is a helper method to define mock.On call
func (_e *DeploymentMock_Expecter) GetCustomResource() *DeploymentMock_GetCustomResource_Call {
	return &DeploymentMock_GetCustomResource_Call{Call: _e.mock.On("GetCustomResource")}
}

func (_c *DeploymentMock_GetCustomResource_Call) Run(run func()) *DeploymentMock_GetCustomResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeploymentMock_GetCustomResource_Call) Return(_a0 *v1.AtlasDeployment) *DeploymentMock_GetCustomResource_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeploymentMock_GetCustomResource_Call) RunAndReturn(run func() *v1.AtlasDeployment) *DeploymentMock_GetCustomResource_Call {
	_c.Call.Return(run)
	return _c
}

// GetMongoDBVersion provides a mock function with no fields
func (_m *DeploymentMock) GetMongoDBVersion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMongoDBVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DeploymentMock_GetMongoDBVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMongoDBVersion'
type DeploymentMock_GetMongoDBVersion_Call struct {
	*mock.Call
}

// GetMongoDBVersion is a helper method to define mock.On call
func (_e *DeploymentMock_Expecter) GetMongoDBVersion() *DeploymentMock_GetMongoDBVersion_Call {
	return &DeploymentMock_GetMongoDBVersion_Call{Call: _e.mock.On("GetMongoDBVersion")}
}

func (_c *DeploymentMock_GetMongoDBVersion_Call) Run(run func()) *DeploymentMock_GetMongoDBVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeploymentMock_GetMongoDBVersion_Call) Return(_a0 string) *DeploymentMock_GetMongoDBVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeploymentMock_GetMongoDBVersion_Call) RunAndReturn(run func() string) *DeploymentMock_GetMongoDBVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with no fields
func (_m *DeploymentMock) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DeploymentMock_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type DeploymentMock_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *DeploymentMock_Expecter) GetName() *DeploymentMock_GetName_Call {
	return &DeploymentMock_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *DeploymentMock_GetName_Call) Run(run func()) *DeploymentMock_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeploymentMock_GetName_Call) Return(_a0 string) *DeploymentMock_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeploymentMock_GetName_Call) RunAndReturn(run func() string) *DeploymentMock_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectID provides a mock function with no fields
func (_m *DeploymentMock) GetProjectID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetProjectID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DeploymentMock_GetProjectID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectID'
type DeploymentMock_GetProjectID_Call struct {
	*mock.Call
}

// GetProjectID is a helper method to define mock.On call
func (_e *DeploymentMock_Expecter) GetProjectID() *DeploymentMock_GetProjectID_Call {
	return &DeploymentMock_GetProjectID_Call{Call: _e.mock.On("GetProjectID")}
}

func (_c *DeploymentMock_GetProjectID_Call) Run(run func()) *DeploymentMock_GetProjectID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeploymentMock_GetProjectID_Call) Return(_a0 string) *DeploymentMock_GetProjectID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeploymentMock_GetProjectID_Call) RunAndReturn(run func() string) *DeploymentMock_GetProjectID_Call {
	_c.Call.Return(run)
	return _c
}

// GetReplicaSet provides a mock function with no fields
func (_m *DeploymentMock) GetReplicaSet() []status.ReplicaSet {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReplicaSet")
	}

	var r0 []status.ReplicaSet
	if rf, ok := ret.Get(0).(func() []status.ReplicaSet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]status.ReplicaSet)
		}
	}

	return r0
}

// DeploymentMock_GetReplicaSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReplicaSet'
type DeploymentMock_GetReplicaSet_Call struct {
	*mock.Call
}

// GetReplicaSet is a helper method to define mock.On call
func (_e *DeploymentMock_Expecter) GetReplicaSet() *DeploymentMock_GetReplicaSet_Call {
	return &DeploymentMock_GetReplicaSet_Call{Call: _e.mock.On("GetReplicaSet")}
}

func (_c *DeploymentMock_GetReplicaSet_Call) Run(run func()) *DeploymentMock_GetReplicaSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeploymentMock_GetReplicaSet_Call) Return(_a0 []status.ReplicaSet) *DeploymentMock_GetReplicaSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeploymentMock_GetReplicaSet_Call) RunAndReturn(run func() []status.ReplicaSet) *DeploymentMock_GetReplicaSet_Call {
	_c.Call.Return(run)
	return _c
}

// GetState provides a mock function with no fields
func (_m *DeploymentMock) GetState() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// DeploymentMock_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type DeploymentMock_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
func (_e *DeploymentMock_Expecter) GetState() *DeploymentMock_GetState_Call {
	return &DeploymentMock_GetState_Call{Call: _e.mock.On("GetState")}
}

func (_c *DeploymentMock_GetState_Call) Run(run func()) *DeploymentMock_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeploymentMock_GetState_Call) Return(_a0 string) *DeploymentMock_GetState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeploymentMock_GetState_Call) RunAndReturn(run func() string) *DeploymentMock_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// IsDedicated provides a mock function with no fields
func (_m *DeploymentMock) IsDedicated() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsDedicated")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeploymentMock_IsDedicated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDedicated'
type DeploymentMock_IsDedicated_Call struct {
	*mock.Call
}

// IsDedicated is a helper method to define mock.On call
func (_e *DeploymentMock_Expecter) IsDedicated() *DeploymentMock_IsDedicated_Call {
	return &DeploymentMock_IsDedicated_Call{Call: _e.mock.On("IsDedicated")}
}

func (_c *DeploymentMock_IsDedicated_Call) Run(run func()) *DeploymentMock_IsDedicated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeploymentMock_IsDedicated_Call) Return(_a0 bool) *DeploymentMock_IsDedicated_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeploymentMock_IsDedicated_Call) RunAndReturn(run func() bool) *DeploymentMock_IsDedicated_Call {
	_c.Call.Return(run)
	return _c
}

// IsFlex provides a mock function with no fields
func (_m *DeploymentMock) IsFlex() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsFlex")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeploymentMock_IsFlex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFlex'
type DeploymentMock_IsFlex_Call struct {
	*mock.Call
}

// IsFlex is a helper method to define mock.On call
func (_e *DeploymentMock_Expecter) IsFlex() *DeploymentMock_IsFlex_Call {
	return &DeploymentMock_IsFlex_Call{Call: _e.mock.On("IsFlex")}
}

func (_c *DeploymentMock_IsFlex_Call) Run(run func()) *DeploymentMock_IsFlex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeploymentMock_IsFlex_Call) Return(_a0 bool) *DeploymentMock_IsFlex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeploymentMock_IsFlex_Call) RunAndReturn(run func() bool) *DeploymentMock_IsFlex_Call {
	_c.Call.Return(run)
	return _c
}

// IsServerless provides a mock function with no fields
func (_m *DeploymentMock) IsServerless() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsServerless")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeploymentMock_IsServerless_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsServerless'
type DeploymentMock_IsServerless_Call struct {
	*mock.Call
}

// IsServerless is a helper method to define mock.On call
func (_e *DeploymentMock_Expecter) IsServerless() *DeploymentMock_IsServerless_Call {
	return &DeploymentMock_IsServerless_Call{Call: _e.mock.On("IsServerless")}
}

func (_c *DeploymentMock_IsServerless_Call) Run(run func()) *DeploymentMock_IsServerless_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeploymentMock_IsServerless_Call) Return(_a0 bool) *DeploymentMock_IsServerless_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeploymentMock_IsServerless_Call) RunAndReturn(run func() bool) *DeploymentMock_IsServerless_Call {
	_c.Call.Return(run)
	return _c
}

// IsTenant provides a mock function with no fields
func (_m *DeploymentMock) IsTenant() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsTenant")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeploymentMock_IsTenant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTenant'
type DeploymentMock_IsTenant_Call struct {
	*mock.Call
}

// IsTenant is a helper method to define mock.On call
func (_e *DeploymentMock_Expecter) IsTenant() *DeploymentMock_IsTenant_Call {
	return &DeploymentMock_IsTenant_Call{Call: _e.mock.On("IsTenant")}
}

func (_c *DeploymentMock_IsTenant_Call) Run(run func()) *DeploymentMock_IsTenant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeploymentMock_IsTenant_Call) Return(_a0 bool) *DeploymentMock_IsTenant_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DeploymentMock_IsTenant_Call) RunAndReturn(run func() bool) *DeploymentMock_IsTenant_Call {
	_c.Call.Return(run)
	return _c
}

// Notifications provides a mock function with no fields
func (_m *DeploymentMock) Notifications() (bool, string, string) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Notifications")
	}

	var r0 bool
	var r1 string
	var r2 string
	if rf, ok := ret.Get(0).(func() (bool, string, string)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func() string); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(string)
	}

	return r0, r1, r2
}

// DeploymentMock_Notifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notifications'
type DeploymentMock_Notifications_Call struct {
	*mock.Call
}

// Notifications is a helper method to define mock.On call
func (_e *DeploymentMock_Expecter) Notifications() *DeploymentMock_Notifications_Call {
	return &DeploymentMock_Notifications_Call{Call: _e.mock.On("Notifications")}
}

func (_c *DeploymentMock_Notifications_Call) Run(run func()) *DeploymentMock_Notifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DeploymentMock_Notifications_Call) Return(_a0 bool, _a1 string, _a2 string) *DeploymentMock_Notifications_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *DeploymentMock_Notifications_Call) RunAndReturn(run func() (bool, string, string)) *DeploymentMock_Notifications_Call {
	_c.Call.Return(run)
	return _c
}

// NewDeploymentMock creates a new instance of DeploymentMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeploymentMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DeploymentMock {
	mock := &DeploymentMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
