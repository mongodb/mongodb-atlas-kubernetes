// Code generated by mockery. DO NOT EDIT.

package translation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	networkpeering "github.com/mongodb/mongodb-atlas-kubernetes/v2/internal/translation/networkpeering"
)

// PeerConnectionsServiceMock is an autogenerated mock type for the PeerConnectionsService type
type PeerConnectionsServiceMock struct {
	mock.Mock
}

type PeerConnectionsServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PeerConnectionsServiceMock) EXPECT() *PeerConnectionsServiceMock_Expecter {
	return &PeerConnectionsServiceMock_Expecter{mock: &_m.Mock}
}

// CreatePeer provides a mock function with given fields: ctx, projectID, conn
func (_m *PeerConnectionsServiceMock) CreatePeer(ctx context.Context, projectID string, conn *networkpeering.NetworkPeer) (*networkpeering.NetworkPeer, error) {
	ret := _m.Called(ctx, projectID, conn)

	if len(ret) == 0 {
		panic("no return value specified for CreatePeer")
	}

	var r0 *networkpeering.NetworkPeer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *networkpeering.NetworkPeer) (*networkpeering.NetworkPeer, error)); ok {
		return rf(ctx, projectID, conn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *networkpeering.NetworkPeer) *networkpeering.NetworkPeer); ok {
		r0 = rf(ctx, projectID, conn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkpeering.NetworkPeer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *networkpeering.NetworkPeer) error); ok {
		r1 = rf(ctx, projectID, conn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeerConnectionsServiceMock_CreatePeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePeer'
type PeerConnectionsServiceMock_CreatePeer_Call struct {
	*mock.Call
}

// CreatePeer is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - conn *networkpeering.NetworkPeer
func (_e *PeerConnectionsServiceMock_Expecter) CreatePeer(ctx interface{}, projectID interface{}, conn interface{}) *PeerConnectionsServiceMock_CreatePeer_Call {
	return &PeerConnectionsServiceMock_CreatePeer_Call{Call: _e.mock.On("CreatePeer", ctx, projectID, conn)}
}

func (_c *PeerConnectionsServiceMock_CreatePeer_Call) Run(run func(ctx context.Context, projectID string, conn *networkpeering.NetworkPeer)) *PeerConnectionsServiceMock_CreatePeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*networkpeering.NetworkPeer))
	})
	return _c
}

func (_c *PeerConnectionsServiceMock_CreatePeer_Call) Return(_a0 *networkpeering.NetworkPeer, _a1 error) *PeerConnectionsServiceMock_CreatePeer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PeerConnectionsServiceMock_CreatePeer_Call) RunAndReturn(run func(context.Context, string, *networkpeering.NetworkPeer) (*networkpeering.NetworkPeer, error)) *PeerConnectionsServiceMock_CreatePeer_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePeer provides a mock function with given fields: ctx, projectID, containerID
func (_m *PeerConnectionsServiceMock) DeletePeer(ctx context.Context, projectID string, containerID string) error {
	ret := _m.Called(ctx, projectID, containerID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePeer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, containerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PeerConnectionsServiceMock_DeletePeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePeer'
type PeerConnectionsServiceMock_DeletePeer_Call struct {
	*mock.Call
}

// DeletePeer is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - containerID string
func (_e *PeerConnectionsServiceMock_Expecter) DeletePeer(ctx interface{}, projectID interface{}, containerID interface{}) *PeerConnectionsServiceMock_DeletePeer_Call {
	return &PeerConnectionsServiceMock_DeletePeer_Call{Call: _e.mock.On("DeletePeer", ctx, projectID, containerID)}
}

func (_c *PeerConnectionsServiceMock_DeletePeer_Call) Run(run func(ctx context.Context, projectID string, containerID string)) *PeerConnectionsServiceMock_DeletePeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PeerConnectionsServiceMock_DeletePeer_Call) Return(_a0 error) *PeerConnectionsServiceMock_DeletePeer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PeerConnectionsServiceMock_DeletePeer_Call) RunAndReturn(run func(context.Context, string, string) error) *PeerConnectionsServiceMock_DeletePeer_Call {
	_c.Call.Return(run)
	return _c
}

// GetPeer provides a mock function with given fields: ctx, projectID, containerID
func (_m *PeerConnectionsServiceMock) GetPeer(ctx context.Context, projectID string, containerID string) (*networkpeering.NetworkPeer, error) {
	ret := _m.Called(ctx, projectID, containerID)

	if len(ret) == 0 {
		panic("no return value specified for GetPeer")
	}

	var r0 *networkpeering.NetworkPeer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*networkpeering.NetworkPeer, error)); ok {
		return rf(ctx, projectID, containerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *networkpeering.NetworkPeer); ok {
		r0 = rf(ctx, projectID, containerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkpeering.NetworkPeer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, containerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeerConnectionsServiceMock_GetPeer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPeer'
type PeerConnectionsServiceMock_GetPeer_Call struct {
	*mock.Call
}

// GetPeer is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - containerID string
func (_e *PeerConnectionsServiceMock_Expecter) GetPeer(ctx interface{}, projectID interface{}, containerID interface{}) *PeerConnectionsServiceMock_GetPeer_Call {
	return &PeerConnectionsServiceMock_GetPeer_Call{Call: _e.mock.On("GetPeer", ctx, projectID, containerID)}
}

func (_c *PeerConnectionsServiceMock_GetPeer_Call) Run(run func(ctx context.Context, projectID string, containerID string)) *PeerConnectionsServiceMock_GetPeer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PeerConnectionsServiceMock_GetPeer_Call) Return(_a0 *networkpeering.NetworkPeer, _a1 error) *PeerConnectionsServiceMock_GetPeer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PeerConnectionsServiceMock_GetPeer_Call) RunAndReturn(run func(context.Context, string, string) (*networkpeering.NetworkPeer, error)) *PeerConnectionsServiceMock_GetPeer_Call {
	_c.Call.Return(run)
	return _c
}

// NewPeerConnectionsServiceMock creates a new instance of PeerConnectionsServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPeerConnectionsServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PeerConnectionsServiceMock {
	mock := &PeerConnectionsServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
