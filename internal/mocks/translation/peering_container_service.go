// Code generated by mockery. DO NOT EDIT.

package translation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	networkpeering "github.com/mongodb/mongodb-atlas-kubernetes/v2/internal/translation/networkpeering"
)

// PeeringContainerServiceMock is an autogenerated mock type for the PeeringContainerService type
type PeeringContainerServiceMock struct {
	mock.Mock
}

type PeeringContainerServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *PeeringContainerServiceMock) EXPECT() *PeeringContainerServiceMock_Expecter {
	return &PeeringContainerServiceMock_Expecter{mock: &_m.Mock}
}

// CreateContainer provides a mock function with given fields: ctx, projectID, container
func (_m *PeeringContainerServiceMock) CreateContainer(ctx context.Context, projectID string, container *networkpeering.ProviderContainer) (*networkpeering.ProviderContainer, error) {
	ret := _m.Called(ctx, projectID, container)

	if len(ret) == 0 {
		panic("no return value specified for CreateContainer")
	}

	var r0 *networkpeering.ProviderContainer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *networkpeering.ProviderContainer) (*networkpeering.ProviderContainer, error)); ok {
		return rf(ctx, projectID, container)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *networkpeering.ProviderContainer) *networkpeering.ProviderContainer); ok {
		r0 = rf(ctx, projectID, container)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkpeering.ProviderContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *networkpeering.ProviderContainer) error); ok {
		r1 = rf(ctx, projectID, container)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeeringContainerServiceMock_CreateContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateContainer'
type PeeringContainerServiceMock_CreateContainer_Call struct {
	*mock.Call
}

// CreateContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - container *networkpeering.ProviderContainer
func (_e *PeeringContainerServiceMock_Expecter) CreateContainer(ctx interface{}, projectID interface{}, container interface{}) *PeeringContainerServiceMock_CreateContainer_Call {
	return &PeeringContainerServiceMock_CreateContainer_Call{Call: _e.mock.On("CreateContainer", ctx, projectID, container)}
}

func (_c *PeeringContainerServiceMock_CreateContainer_Call) Run(run func(ctx context.Context, projectID string, container *networkpeering.ProviderContainer)) *PeeringContainerServiceMock_CreateContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*networkpeering.ProviderContainer))
	})
	return _c
}

func (_c *PeeringContainerServiceMock_CreateContainer_Call) Return(_a0 *networkpeering.ProviderContainer, _a1 error) *PeeringContainerServiceMock_CreateContainer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PeeringContainerServiceMock_CreateContainer_Call) RunAndReturn(run func(context.Context, string, *networkpeering.ProviderContainer) (*networkpeering.ProviderContainer, error)) *PeeringContainerServiceMock_CreateContainer_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteContainer provides a mock function with given fields: ctx, projectID, containerID
func (_m *PeeringContainerServiceMock) DeleteContainer(ctx context.Context, projectID string, containerID string) error {
	ret := _m.Called(ctx, projectID, containerID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContainer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, containerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PeeringContainerServiceMock_DeleteContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteContainer'
type PeeringContainerServiceMock_DeleteContainer_Call struct {
	*mock.Call
}

// DeleteContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - containerID string
func (_e *PeeringContainerServiceMock_Expecter) DeleteContainer(ctx interface{}, projectID interface{}, containerID interface{}) *PeeringContainerServiceMock_DeleteContainer_Call {
	return &PeeringContainerServiceMock_DeleteContainer_Call{Call: _e.mock.On("DeleteContainer", ctx, projectID, containerID)}
}

func (_c *PeeringContainerServiceMock_DeleteContainer_Call) Run(run func(ctx context.Context, projectID string, containerID string)) *PeeringContainerServiceMock_DeleteContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PeeringContainerServiceMock_DeleteContainer_Call) Return(_a0 error) *PeeringContainerServiceMock_DeleteContainer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PeeringContainerServiceMock_DeleteContainer_Call) RunAndReturn(run func(context.Context, string, string) error) *PeeringContainerServiceMock_DeleteContainer_Call {
	_c.Call.Return(run)
	return _c
}

// FindContainer provides a mock function with given fields: ctx, projectID, provider, cidrBlock
func (_m *PeeringContainerServiceMock) FindContainer(ctx context.Context, projectID string, provider string, cidrBlock string) (*networkpeering.ProviderContainer, error) {
	ret := _m.Called(ctx, projectID, provider, cidrBlock)

	if len(ret) == 0 {
		panic("no return value specified for FindContainer")
	}

	var r0 *networkpeering.ProviderContainer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*networkpeering.ProviderContainer, error)); ok {
		return rf(ctx, projectID, provider, cidrBlock)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *networkpeering.ProviderContainer); ok {
		r0 = rf(ctx, projectID, provider, cidrBlock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkpeering.ProviderContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectID, provider, cidrBlock)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeeringContainerServiceMock_FindContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindContainer'
type PeeringContainerServiceMock_FindContainer_Call struct {
	*mock.Call
}

// FindContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - provider string
//   - cidrBlock string
func (_e *PeeringContainerServiceMock_Expecter) FindContainer(ctx interface{}, projectID interface{}, provider interface{}, cidrBlock interface{}) *PeeringContainerServiceMock_FindContainer_Call {
	return &PeeringContainerServiceMock_FindContainer_Call{Call: _e.mock.On("FindContainer", ctx, projectID, provider, cidrBlock)}
}

func (_c *PeeringContainerServiceMock_FindContainer_Call) Run(run func(ctx context.Context, projectID string, provider string, cidrBlock string)) *PeeringContainerServiceMock_FindContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *PeeringContainerServiceMock_FindContainer_Call) Return(_a0 *networkpeering.ProviderContainer, _a1 error) *PeeringContainerServiceMock_FindContainer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PeeringContainerServiceMock_FindContainer_Call) RunAndReturn(run func(context.Context, string, string, string) (*networkpeering.ProviderContainer, error)) *PeeringContainerServiceMock_FindContainer_Call {
	_c.Call.Return(run)
	return _c
}

// GetContainer provides a mock function with given fields: ctx, projectID, containerID
func (_m *PeeringContainerServiceMock) GetContainer(ctx context.Context, projectID string, containerID string) (*networkpeering.ProviderContainer, error) {
	ret := _m.Called(ctx, projectID, containerID)

	if len(ret) == 0 {
		panic("no return value specified for GetContainer")
	}

	var r0 *networkpeering.ProviderContainer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*networkpeering.ProviderContainer, error)); ok {
		return rf(ctx, projectID, containerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *networkpeering.ProviderContainer); ok {
		r0 = rf(ctx, projectID, containerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkpeering.ProviderContainer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, containerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeeringContainerServiceMock_GetContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContainer'
type PeeringContainerServiceMock_GetContainer_Call struct {
	*mock.Call
}

// GetContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - containerID string
func (_e *PeeringContainerServiceMock_Expecter) GetContainer(ctx interface{}, projectID interface{}, containerID interface{}) *PeeringContainerServiceMock_GetContainer_Call {
	return &PeeringContainerServiceMock_GetContainer_Call{Call: _e.mock.On("GetContainer", ctx, projectID, containerID)}
}

func (_c *PeeringContainerServiceMock_GetContainer_Call) Run(run func(ctx context.Context, projectID string, containerID string)) *PeeringContainerServiceMock_GetContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *PeeringContainerServiceMock_GetContainer_Call) Return(_a0 *networkpeering.ProviderContainer, _a1 error) *PeeringContainerServiceMock_GetContainer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PeeringContainerServiceMock_GetContainer_Call) RunAndReturn(run func(context.Context, string, string) (*networkpeering.ProviderContainer, error)) *PeeringContainerServiceMock_GetContainer_Call {
	_c.Call.Return(run)
	return _c
}

// NewPeeringContainerServiceMock creates a new instance of PeeringContainerServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPeeringContainerServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *PeeringContainerServiceMock {
	mock := &PeeringContainerServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
