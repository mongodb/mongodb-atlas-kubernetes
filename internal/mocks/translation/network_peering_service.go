// Code generated by mockery. DO NOT EDIT.

package translation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/mongodb/mongodb-atlas-kubernetes/v2/api/v1"
	networkpeering "github.com/mongodb/mongodb-atlas-kubernetes/v2/internal/translation/networkpeering"
)

// NetworkPeeringServiceMock is an autogenerated mock type for the NetworkPeeringService type
type NetworkPeeringServiceMock struct {
	mock.Mock
}

type NetworkPeeringServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *NetworkPeeringServiceMock) EXPECT() *NetworkPeeringServiceMock_Expecter {
	return &NetworkPeeringServiceMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, projectID, containerID, cfg
func (_m *NetworkPeeringServiceMock) Create(ctx context.Context, projectID string, containerID string, cfg *v1.AtlasNetworkPeeringConfig) (*networkpeering.NetworkPeer, error) {
	ret := _m.Called(ctx, projectID, containerID, cfg)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *networkpeering.NetworkPeer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *v1.AtlasNetworkPeeringConfig) (*networkpeering.NetworkPeer, error)); ok {
		return rf(ctx, projectID, containerID, cfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *v1.AtlasNetworkPeeringConfig) *networkpeering.NetworkPeer); ok {
		r0 = rf(ctx, projectID, containerID, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkpeering.NetworkPeer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, *v1.AtlasNetworkPeeringConfig) error); ok {
		r1 = rf(ctx, projectID, containerID, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkPeeringServiceMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type NetworkPeeringServiceMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - containerID string
//   - cfg *v1.AtlasNetworkPeeringConfig
func (_e *NetworkPeeringServiceMock_Expecter) Create(ctx interface{}, projectID interface{}, containerID interface{}, cfg interface{}) *NetworkPeeringServiceMock_Create_Call {
	return &NetworkPeeringServiceMock_Create_Call{Call: _e.mock.On("Create", ctx, projectID, containerID, cfg)}
}

func (_c *NetworkPeeringServiceMock_Create_Call) Run(run func(ctx context.Context, projectID string, containerID string, cfg *v1.AtlasNetworkPeeringConfig)) *NetworkPeeringServiceMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*v1.AtlasNetworkPeeringConfig))
	})
	return _c
}

func (_c *NetworkPeeringServiceMock_Create_Call) Return(_a0 *networkpeering.NetworkPeer, _a1 error) *NetworkPeeringServiceMock_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NetworkPeeringServiceMock_Create_Call) RunAndReturn(run func(context.Context, string, string, *v1.AtlasNetworkPeeringConfig) (*networkpeering.NetworkPeer, error)) *NetworkPeeringServiceMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, projectID, peerID
func (_m *NetworkPeeringServiceMock) Delete(ctx context.Context, projectID string, peerID string) error {
	ret := _m.Called(ctx, projectID, peerID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, peerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NetworkPeeringServiceMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type NetworkPeeringServiceMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - peerID string
func (_e *NetworkPeeringServiceMock_Expecter) Delete(ctx interface{}, projectID interface{}, peerID interface{}) *NetworkPeeringServiceMock_Delete_Call {
	return &NetworkPeeringServiceMock_Delete_Call{Call: _e.mock.On("Delete", ctx, projectID, peerID)}
}

func (_c *NetworkPeeringServiceMock_Delete_Call) Run(run func(ctx context.Context, projectID string, peerID string)) *NetworkPeeringServiceMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *NetworkPeeringServiceMock_Delete_Call) Return(_a0 error) *NetworkPeeringServiceMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NetworkPeeringServiceMock_Delete_Call) RunAndReturn(run func(context.Context, string, string) error) *NetworkPeeringServiceMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, projectID, peerID
func (_m *NetworkPeeringServiceMock) Get(ctx context.Context, projectID string, peerID string) (*networkpeering.NetworkPeer, error) {
	ret := _m.Called(ctx, projectID, peerID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *networkpeering.NetworkPeer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*networkpeering.NetworkPeer, error)); ok {
		return rf(ctx, projectID, peerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *networkpeering.NetworkPeer); ok {
		r0 = rf(ctx, projectID, peerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkpeering.NetworkPeer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, peerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkPeeringServiceMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type NetworkPeeringServiceMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - peerID string
func (_e *NetworkPeeringServiceMock_Expecter) Get(ctx interface{}, projectID interface{}, peerID interface{}) *NetworkPeeringServiceMock_Get_Call {
	return &NetworkPeeringServiceMock_Get_Call{Call: _e.mock.On("Get", ctx, projectID, peerID)}
}

func (_c *NetworkPeeringServiceMock_Get_Call) Run(run func(ctx context.Context, projectID string, peerID string)) *NetworkPeeringServiceMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *NetworkPeeringServiceMock_Get_Call) Return(_a0 *networkpeering.NetworkPeer, _a1 error) *NetworkPeeringServiceMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NetworkPeeringServiceMock_Get_Call) RunAndReturn(run func(context.Context, string, string) (*networkpeering.NetworkPeer, error)) *NetworkPeeringServiceMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, pojectID, peerID, containerID, cfg
func (_m *NetworkPeeringServiceMock) Update(ctx context.Context, pojectID string, peerID string, containerID string, cfg *v1.AtlasNetworkPeeringConfig) (*networkpeering.NetworkPeer, error) {
	ret := _m.Called(ctx, pojectID, peerID, containerID, cfg)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *networkpeering.NetworkPeer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *v1.AtlasNetworkPeeringConfig) (*networkpeering.NetworkPeer, error)); ok {
		return rf(ctx, pojectID, peerID, containerID, cfg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *v1.AtlasNetworkPeeringConfig) *networkpeering.NetworkPeer); ok {
		r0 = rf(ctx, pojectID, peerID, containerID, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkpeering.NetworkPeer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *v1.AtlasNetworkPeeringConfig) error); ok {
		r1 = rf(ctx, pojectID, peerID, containerID, cfg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkPeeringServiceMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type NetworkPeeringServiceMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - pojectID string
//   - peerID string
//   - containerID string
//   - cfg *v1.AtlasNetworkPeeringConfig
func (_e *NetworkPeeringServiceMock_Expecter) Update(ctx interface{}, pojectID interface{}, peerID interface{}, containerID interface{}, cfg interface{}) *NetworkPeeringServiceMock_Update_Call {
	return &NetworkPeeringServiceMock_Update_Call{Call: _e.mock.On("Update", ctx, pojectID, peerID, containerID, cfg)}
}

func (_c *NetworkPeeringServiceMock_Update_Call) Run(run func(ctx context.Context, pojectID string, peerID string, containerID string, cfg *v1.AtlasNetworkPeeringConfig)) *NetworkPeeringServiceMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(*v1.AtlasNetworkPeeringConfig))
	})
	return _c
}

func (_c *NetworkPeeringServiceMock_Update_Call) Return(_a0 *networkpeering.NetworkPeer, _a1 error) *NetworkPeeringServiceMock_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NetworkPeeringServiceMock_Update_Call) RunAndReturn(run func(context.Context, string, string, string, *v1.AtlasNetworkPeeringConfig) (*networkpeering.NetworkPeer, error)) *NetworkPeeringServiceMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewNetworkPeeringServiceMock creates a new instance of NetworkPeeringServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNetworkPeeringServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *NetworkPeeringServiceMock {
	mock := &NetworkPeeringServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
