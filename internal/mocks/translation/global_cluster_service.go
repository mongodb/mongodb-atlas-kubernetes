// Code generated by mockery. DO NOT EDIT.

package translation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/mongodb/mongodb-atlas-kubernetes/v2/pkg/api/v1"
)

// GlobalClusterServiceMock is an autogenerated mock type for the GlobalClusterService type
type GlobalClusterServiceMock struct {
	mock.Mock
}

type GlobalClusterServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *GlobalClusterServiceMock) EXPECT() *GlobalClusterServiceMock_Expecter {
	return &GlobalClusterServiceMock_Expecter{mock: &_m.Mock}
}

// CreateCustomZones provides a mock function with given fields: ctx, projectID, clusterName, mappings
func (_m *GlobalClusterServiceMock) CreateCustomZones(ctx context.Context, projectID string, clusterName string, mappings []v1.CustomZoneMapping) (map[string]string, error) {
	ret := _m.Called(ctx, projectID, clusterName, mappings)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomZones")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []v1.CustomZoneMapping) (map[string]string, error)); ok {
		return rf(ctx, projectID, clusterName, mappings)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []v1.CustomZoneMapping) map[string]string); ok {
		r0 = rf(ctx, projectID, clusterName, mappings)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []v1.CustomZoneMapping) error); ok {
		r1 = rf(ctx, projectID, clusterName, mappings)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobalClusterServiceMock_CreateCustomZones_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomZones'
type GlobalClusterServiceMock_CreateCustomZones_Call struct {
	*mock.Call
}

// CreateCustomZones is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - clusterName string
//   - mappings []v1.CustomZoneMapping
func (_e *GlobalClusterServiceMock_Expecter) CreateCustomZones(ctx interface{}, projectID interface{}, clusterName interface{}, mappings interface{}) *GlobalClusterServiceMock_CreateCustomZones_Call {
	return &GlobalClusterServiceMock_CreateCustomZones_Call{Call: _e.mock.On("CreateCustomZones", ctx, projectID, clusterName, mappings)}
}

func (_c *GlobalClusterServiceMock_CreateCustomZones_Call) Run(run func(ctx context.Context, projectID string, clusterName string, mappings []v1.CustomZoneMapping)) *GlobalClusterServiceMock_CreateCustomZones_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]v1.CustomZoneMapping))
	})
	return _c
}

func (_c *GlobalClusterServiceMock_CreateCustomZones_Call) Return(_a0 map[string]string, _a1 error) *GlobalClusterServiceMock_CreateCustomZones_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GlobalClusterServiceMock_CreateCustomZones_Call) RunAndReturn(run func(context.Context, string, string, []v1.CustomZoneMapping) (map[string]string, error)) *GlobalClusterServiceMock_CreateCustomZones_Call {
	_c.Call.Return(run)
	return _c
}

// CreateManagedNamespace provides a mock function with given fields: ctx, projectID, clusterName, ns
func (_m *GlobalClusterServiceMock) CreateManagedNamespace(ctx context.Context, projectID string, clusterName string, ns *v1.ManagedNamespace) error {
	ret := _m.Called(ctx, projectID, clusterName, ns)

	if len(ret) == 0 {
		panic("no return value specified for CreateManagedNamespace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *v1.ManagedNamespace) error); ok {
		r0 = rf(ctx, projectID, clusterName, ns)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GlobalClusterServiceMock_CreateManagedNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateManagedNamespace'
type GlobalClusterServiceMock_CreateManagedNamespace_Call struct {
	*mock.Call
}

// CreateManagedNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - clusterName string
//   - ns *v1.ManagedNamespace
func (_e *GlobalClusterServiceMock_Expecter) CreateManagedNamespace(ctx interface{}, projectID interface{}, clusterName interface{}, ns interface{}) *GlobalClusterServiceMock_CreateManagedNamespace_Call {
	return &GlobalClusterServiceMock_CreateManagedNamespace_Call{Call: _e.mock.On("CreateManagedNamespace", ctx, projectID, clusterName, ns)}
}

func (_c *GlobalClusterServiceMock_CreateManagedNamespace_Call) Run(run func(ctx context.Context, projectID string, clusterName string, ns *v1.ManagedNamespace)) *GlobalClusterServiceMock_CreateManagedNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*v1.ManagedNamespace))
	})
	return _c
}

func (_c *GlobalClusterServiceMock_CreateManagedNamespace_Call) Return(_a0 error) *GlobalClusterServiceMock_CreateManagedNamespace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GlobalClusterServiceMock_CreateManagedNamespace_Call) RunAndReturn(run func(context.Context, string, string, *v1.ManagedNamespace) error) *GlobalClusterServiceMock_CreateManagedNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCustomZones provides a mock function with given fields: ctx, projectID, clusterName
func (_m *GlobalClusterServiceMock) DeleteCustomZones(ctx context.Context, projectID string, clusterName string) error {
	ret := _m.Called(ctx, projectID, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomZones")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, clusterName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GlobalClusterServiceMock_DeleteCustomZones_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCustomZones'
type GlobalClusterServiceMock_DeleteCustomZones_Call struct {
	*mock.Call
}

// DeleteCustomZones is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - clusterName string
func (_e *GlobalClusterServiceMock_Expecter) DeleteCustomZones(ctx interface{}, projectID interface{}, clusterName interface{}) *GlobalClusterServiceMock_DeleteCustomZones_Call {
	return &GlobalClusterServiceMock_DeleteCustomZones_Call{Call: _e.mock.On("DeleteCustomZones", ctx, projectID, clusterName)}
}

func (_c *GlobalClusterServiceMock_DeleteCustomZones_Call) Run(run func(ctx context.Context, projectID string, clusterName string)) *GlobalClusterServiceMock_DeleteCustomZones_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *GlobalClusterServiceMock_DeleteCustomZones_Call) Return(_a0 error) *GlobalClusterServiceMock_DeleteCustomZones_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GlobalClusterServiceMock_DeleteCustomZones_Call) RunAndReturn(run func(context.Context, string, string) error) *GlobalClusterServiceMock_DeleteCustomZones_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteManagedNamespace provides a mock function with given fields: ctx, projectID, clusterName, ns
func (_m *GlobalClusterServiceMock) DeleteManagedNamespace(ctx context.Context, projectID string, clusterName string, ns *v1.ManagedNamespace) error {
	ret := _m.Called(ctx, projectID, clusterName, ns)

	if len(ret) == 0 {
		panic("no return value specified for DeleteManagedNamespace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *v1.ManagedNamespace) error); ok {
		r0 = rf(ctx, projectID, clusterName, ns)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GlobalClusterServiceMock_DeleteManagedNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteManagedNamespace'
type GlobalClusterServiceMock_DeleteManagedNamespace_Call struct {
	*mock.Call
}

// DeleteManagedNamespace is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - clusterName string
//   - ns *v1.ManagedNamespace
func (_e *GlobalClusterServiceMock_Expecter) DeleteManagedNamespace(ctx interface{}, projectID interface{}, clusterName interface{}, ns interface{}) *GlobalClusterServiceMock_DeleteManagedNamespace_Call {
	return &GlobalClusterServiceMock_DeleteManagedNamespace_Call{Call: _e.mock.On("DeleteManagedNamespace", ctx, projectID, clusterName, ns)}
}

func (_c *GlobalClusterServiceMock_DeleteManagedNamespace_Call) Run(run func(ctx context.Context, projectID string, clusterName string, ns *v1.ManagedNamespace)) *GlobalClusterServiceMock_DeleteManagedNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*v1.ManagedNamespace))
	})
	return _c
}

func (_c *GlobalClusterServiceMock_DeleteManagedNamespace_Call) Return(_a0 error) *GlobalClusterServiceMock_DeleteManagedNamespace_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GlobalClusterServiceMock_DeleteManagedNamespace_Call) RunAndReturn(run func(context.Context, string, string, *v1.ManagedNamespace) error) *GlobalClusterServiceMock_DeleteManagedNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomZones provides a mock function with given fields: ctx, projectID, clusterName
func (_m *GlobalClusterServiceMock) GetCustomZones(ctx context.Context, projectID string, clusterName string) (map[string]string, error) {
	ret := _m.Called(ctx, projectID, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomZones")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (map[string]string, error)); ok {
		return rf(ctx, projectID, clusterName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) map[string]string); ok {
		r0 = rf(ctx, projectID, clusterName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, clusterName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobalClusterServiceMock_GetCustomZones_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomZones'
type GlobalClusterServiceMock_GetCustomZones_Call struct {
	*mock.Call
}

// GetCustomZones is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - clusterName string
func (_e *GlobalClusterServiceMock_Expecter) GetCustomZones(ctx interface{}, projectID interface{}, clusterName interface{}) *GlobalClusterServiceMock_GetCustomZones_Call {
	return &GlobalClusterServiceMock_GetCustomZones_Call{Call: _e.mock.On("GetCustomZones", ctx, projectID, clusterName)}
}

func (_c *GlobalClusterServiceMock_GetCustomZones_Call) Run(run func(ctx context.Context, projectID string, clusterName string)) *GlobalClusterServiceMock_GetCustomZones_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *GlobalClusterServiceMock_GetCustomZones_Call) Return(_a0 map[string]string, _a1 error) *GlobalClusterServiceMock_GetCustomZones_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GlobalClusterServiceMock_GetCustomZones_Call) RunAndReturn(run func(context.Context, string, string) (map[string]string, error)) *GlobalClusterServiceMock_GetCustomZones_Call {
	_c.Call.Return(run)
	return _c
}

// GetManagedNamespaces provides a mock function with given fields: ctx, projectID, clusterName
func (_m *GlobalClusterServiceMock) GetManagedNamespaces(ctx context.Context, projectID string, clusterName string) ([]v1.ManagedNamespace, error) {
	ret := _m.Called(ctx, projectID, clusterName)

	if len(ret) == 0 {
		panic("no return value specified for GetManagedNamespaces")
	}

	var r0 []v1.ManagedNamespace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]v1.ManagedNamespace, error)); ok {
		return rf(ctx, projectID, clusterName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []v1.ManagedNamespace); ok {
		r0 = rf(ctx, projectID, clusterName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.ManagedNamespace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, clusterName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobalClusterServiceMock_GetManagedNamespaces_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManagedNamespaces'
type GlobalClusterServiceMock_GetManagedNamespaces_Call struct {
	*mock.Call
}

// GetManagedNamespaces is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - clusterName string
func (_e *GlobalClusterServiceMock_Expecter) GetManagedNamespaces(ctx interface{}, projectID interface{}, clusterName interface{}) *GlobalClusterServiceMock_GetManagedNamespaces_Call {
	return &GlobalClusterServiceMock_GetManagedNamespaces_Call{Call: _e.mock.On("GetManagedNamespaces", ctx, projectID, clusterName)}
}

func (_c *GlobalClusterServiceMock_GetManagedNamespaces_Call) Run(run func(ctx context.Context, projectID string, clusterName string)) *GlobalClusterServiceMock_GetManagedNamespaces_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *GlobalClusterServiceMock_GetManagedNamespaces_Call) Return(_a0 []v1.ManagedNamespace, _a1 error) *GlobalClusterServiceMock_GetManagedNamespaces_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GlobalClusterServiceMock_GetManagedNamespaces_Call) RunAndReturn(run func(context.Context, string, string) ([]v1.ManagedNamespace, error)) *GlobalClusterServiceMock_GetManagedNamespaces_Call {
	_c.Call.Return(run)
	return _c
}

// GetZoneMapping provides a mock function with given fields: ctx, projectID, deploymentName
func (_m *GlobalClusterServiceMock) GetZoneMapping(ctx context.Context, projectID string, deploymentName string) (map[string]string, error) {
	ret := _m.Called(ctx, projectID, deploymentName)

	if len(ret) == 0 {
		panic("no return value specified for GetZoneMapping")
	}

	var r0 map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (map[string]string, error)); ok {
		return rf(ctx, projectID, deploymentName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) map[string]string); ok {
		r0 = rf(ctx, projectID, deploymentName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, deploymentName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GlobalClusterServiceMock_GetZoneMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetZoneMapping'
type GlobalClusterServiceMock_GetZoneMapping_Call struct {
	*mock.Call
}

// GetZoneMapping is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - deploymentName string
func (_e *GlobalClusterServiceMock_Expecter) GetZoneMapping(ctx interface{}, projectID interface{}, deploymentName interface{}) *GlobalClusterServiceMock_GetZoneMapping_Call {
	return &GlobalClusterServiceMock_GetZoneMapping_Call{Call: _e.mock.On("GetZoneMapping", ctx, projectID, deploymentName)}
}

func (_c *GlobalClusterServiceMock_GetZoneMapping_Call) Run(run func(ctx context.Context, projectID string, deploymentName string)) *GlobalClusterServiceMock_GetZoneMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *GlobalClusterServiceMock_GetZoneMapping_Call) Return(_a0 map[string]string, _a1 error) *GlobalClusterServiceMock_GetZoneMapping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GlobalClusterServiceMock_GetZoneMapping_Call) RunAndReturn(run func(context.Context, string, string) (map[string]string, error)) *GlobalClusterServiceMock_GetZoneMapping_Call {
	_c.Call.Return(run)
	return _c
}

// NewGlobalClusterServiceMock creates a new instance of GlobalClusterServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGlobalClusterServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *GlobalClusterServiceMock {
	mock := &GlobalClusterServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
