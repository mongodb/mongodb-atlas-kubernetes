// Code generated by mockery. DO NOT EDIT.

package translation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	teams "github.com/mongodb/mongodb-atlas-kubernetes/v2/internal/translation/teams"
)

// TeamUsersServiceMock is an autogenerated mock type for the TeamUsersService type
type TeamUsersServiceMock struct {
	mock.Mock
}

type TeamUsersServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TeamUsersServiceMock) EXPECT() *TeamUsersServiceMock_Expecter {
	return &TeamUsersServiceMock_Expecter{mock: &_m.Mock}
}

// AddUsers provides a mock function with given fields: ctx, usersToAdd, orgID, teamID
func (_m *TeamUsersServiceMock) AddUsers(ctx context.Context, usersToAdd *[]teams.TeamUser, orgID string, teamID string) error {
	ret := _m.Called(ctx, usersToAdd, orgID, teamID)

	if len(ret) == 0 {
		panic("no return value specified for AddUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *[]teams.TeamUser, string, string) error); ok {
		r0 = rf(ctx, usersToAdd, orgID, teamID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TeamUsersServiceMock_AddUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUsers'
type TeamUsersServiceMock_AddUsers_Call struct {
	*mock.Call
}

// AddUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - usersToAdd *[]teams.TeamUser
//   - orgID string
//   - teamID string
func (_e *TeamUsersServiceMock_Expecter) AddUsers(ctx interface{}, usersToAdd interface{}, orgID interface{}, teamID interface{}) *TeamUsersServiceMock_AddUsers_Call {
	return &TeamUsersServiceMock_AddUsers_Call{Call: _e.mock.On("AddUsers", ctx, usersToAdd, orgID, teamID)}
}

func (_c *TeamUsersServiceMock_AddUsers_Call) Run(run func(ctx context.Context, usersToAdd *[]teams.TeamUser, orgID string, teamID string)) *TeamUsersServiceMock_AddUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*[]teams.TeamUser), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *TeamUsersServiceMock_AddUsers_Call) Return(_a0 error) *TeamUsersServiceMock_AddUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamUsersServiceMock_AddUsers_Call) RunAndReturn(run func(context.Context, *[]teams.TeamUser, string, string) error) *TeamUsersServiceMock_AddUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamUsers provides a mock function with given fields: ctx, orgID, teamID
func (_m *TeamUsersServiceMock) GetTeamUsers(ctx context.Context, orgID string, teamID string) ([]teams.TeamUser, error) {
	ret := _m.Called(ctx, orgID, teamID)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamUsers")
	}

	var r0 []teams.TeamUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]teams.TeamUser, error)); ok {
		return rf(ctx, orgID, teamID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []teams.TeamUser); ok {
		r0 = rf(ctx, orgID, teamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]teams.TeamUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, orgID, teamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamUsersServiceMock_GetTeamUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamUsers'
type TeamUsersServiceMock_GetTeamUsers_Call struct {
	*mock.Call
}

// GetTeamUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - teamID string
func (_e *TeamUsersServiceMock_Expecter) GetTeamUsers(ctx interface{}, orgID interface{}, teamID interface{}) *TeamUsersServiceMock_GetTeamUsers_Call {
	return &TeamUsersServiceMock_GetTeamUsers_Call{Call: _e.mock.On("GetTeamUsers", ctx, orgID, teamID)}
}

func (_c *TeamUsersServiceMock_GetTeamUsers_Call) Run(run func(ctx context.Context, orgID string, teamID string)) *TeamUsersServiceMock_GetTeamUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TeamUsersServiceMock_GetTeamUsers_Call) Return(_a0 []teams.TeamUser, _a1 error) *TeamUsersServiceMock_GetTeamUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeamUsersServiceMock_GetTeamUsers_Call) RunAndReturn(run func(context.Context, string, string) ([]teams.TeamUser, error)) *TeamUsersServiceMock_GetTeamUsers_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUser provides a mock function with given fields: ctx, orgID, teamID, userID
func (_m *TeamUsersServiceMock) RemoveUser(ctx context.Context, orgID string, teamID string, userID string) error {
	ret := _m.Called(ctx, orgID, teamID, userID)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, orgID, teamID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TeamUsersServiceMock_RemoveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUser'
type TeamUsersServiceMock_RemoveUser_Call struct {
	*mock.Call
}

// RemoveUser is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - teamID string
//   - userID string
func (_e *TeamUsersServiceMock_Expecter) RemoveUser(ctx interface{}, orgID interface{}, teamID interface{}, userID interface{}) *TeamUsersServiceMock_RemoveUser_Call {
	return &TeamUsersServiceMock_RemoveUser_Call{Call: _e.mock.On("RemoveUser", ctx, orgID, teamID, userID)}
}

func (_c *TeamUsersServiceMock_RemoveUser_Call) Run(run func(ctx context.Context, orgID string, teamID string, userID string)) *TeamUsersServiceMock_RemoveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *TeamUsersServiceMock_RemoveUser_Call) Return(_a0 error) *TeamUsersServiceMock_RemoveUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamUsersServiceMock_RemoveUser_Call) RunAndReturn(run func(context.Context, string, string, string) error) *TeamUsersServiceMock_RemoveUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewTeamUsersServiceMock creates a new instance of TeamUsersServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTeamUsersServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TeamUsersServiceMock {
	mock := &TeamUsersServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
