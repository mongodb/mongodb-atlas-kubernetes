// Code generated by mockery. DO NOT EDIT.

package translation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	teams "github.com/mongodb/mongodb-atlas-kubernetes/v2/internal/translation/teams"
	v1 "github.com/mongodb/mongodb-atlas-kubernetes/v2/pkg/api/v1"
)

// TeamRolesServiceMock is an autogenerated mock type for the TeamRolesService type
type TeamRolesServiceMock struct {
	mock.Mock
}

type TeamRolesServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TeamRolesServiceMock) EXPECT() *TeamRolesServiceMock_Expecter {
	return &TeamRolesServiceMock_Expecter{mock: &_m.Mock}
}

// GetTeamByID provides a mock function with given fields: ctx, orgID, teamID
func (_m *TeamRolesServiceMock) GetTeamByID(ctx context.Context, orgID string, teamID string) (*teams.AssignedTeam, error) {
	ret := _m.Called(ctx, orgID, teamID)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamByID")
	}

	var r0 *teams.AssignedTeam
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*teams.AssignedTeam, error)); ok {
		return rf(ctx, orgID, teamID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *teams.AssignedTeam); ok {
		r0 = rf(ctx, orgID, teamID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.AssignedTeam)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, orgID, teamID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamRolesServiceMock_GetTeamByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamByID'
type TeamRolesServiceMock_GetTeamByID_Call struct {
	*mock.Call
}

// GetTeamByID is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - teamID string
func (_e *TeamRolesServiceMock_Expecter) GetTeamByID(ctx interface{}, orgID interface{}, teamID interface{}) *TeamRolesServiceMock_GetTeamByID_Call {
	return &TeamRolesServiceMock_GetTeamByID_Call{Call: _e.mock.On("GetTeamByID", ctx, orgID, teamID)}
}

func (_c *TeamRolesServiceMock_GetTeamByID_Call) Run(run func(ctx context.Context, orgID string, teamID string)) *TeamRolesServiceMock_GetTeamByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TeamRolesServiceMock_GetTeamByID_Call) Return(_a0 *teams.AssignedTeam, _a1 error) *TeamRolesServiceMock_GetTeamByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeamRolesServiceMock_GetTeamByID_Call) RunAndReturn(run func(context.Context, string, string) (*teams.AssignedTeam, error)) *TeamRolesServiceMock_GetTeamByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamByName provides a mock function with given fields: ctx, orgID, teamName
func (_m *TeamRolesServiceMock) GetTeamByName(ctx context.Context, orgID string, teamName string) (*teams.AssignedTeam, error) {
	ret := _m.Called(ctx, orgID, teamName)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamByName")
	}

	var r0 *teams.AssignedTeam
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*teams.AssignedTeam, error)); ok {
		return rf(ctx, orgID, teamName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *teams.AssignedTeam); ok {
		r0 = rf(ctx, orgID, teamName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.AssignedTeam)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, orgID, teamName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamRolesServiceMock_GetTeamByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamByName'
type TeamRolesServiceMock_GetTeamByName_Call struct {
	*mock.Call
}

// GetTeamByName is a helper method to define mock.On call
//   - ctx context.Context
//   - orgID string
//   - teamName string
func (_e *TeamRolesServiceMock_Expecter) GetTeamByName(ctx interface{}, orgID interface{}, teamName interface{}) *TeamRolesServiceMock_GetTeamByName_Call {
	return &TeamRolesServiceMock_GetTeamByName_Call{Call: _e.mock.On("GetTeamByName", ctx, orgID, teamName)}
}

func (_c *TeamRolesServiceMock_GetTeamByName_Call) Run(run func(ctx context.Context, orgID string, teamName string)) *TeamRolesServiceMock_GetTeamByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TeamRolesServiceMock_GetTeamByName_Call) Return(_a0 *teams.AssignedTeam, _a1 error) *TeamRolesServiceMock_GetTeamByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeamRolesServiceMock_GetTeamByName_Call) RunAndReturn(run func(context.Context, string, string) (*teams.AssignedTeam, error)) *TeamRolesServiceMock_GetTeamByName_Call {
	_c.Call.Return(run)
	return _c
}

// RenameTeam provides a mock function with given fields: ctx, at, orgID, newName
func (_m *TeamRolesServiceMock) RenameTeam(ctx context.Context, at *teams.AssignedTeam, orgID string, newName string) (*teams.AssignedTeam, error) {
	ret := _m.Called(ctx, at, orgID, newName)

	if len(ret) == 0 {
		panic("no return value specified for RenameTeam")
	}

	var r0 *teams.AssignedTeam
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *teams.AssignedTeam, string, string) (*teams.AssignedTeam, error)); ok {
		return rf(ctx, at, orgID, newName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *teams.AssignedTeam, string, string) *teams.AssignedTeam); ok {
		r0 = rf(ctx, at, orgID, newName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.AssignedTeam)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *teams.AssignedTeam, string, string) error); ok {
		r1 = rf(ctx, at, orgID, newName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamRolesServiceMock_RenameTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameTeam'
type TeamRolesServiceMock_RenameTeam_Call struct {
	*mock.Call
}

// RenameTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - at *teams.AssignedTeam
//   - orgID string
//   - newName string
func (_e *TeamRolesServiceMock_Expecter) RenameTeam(ctx interface{}, at interface{}, orgID interface{}, newName interface{}) *TeamRolesServiceMock_RenameTeam_Call {
	return &TeamRolesServiceMock_RenameTeam_Call{Call: _e.mock.On("RenameTeam", ctx, at, orgID, newName)}
}

func (_c *TeamRolesServiceMock_RenameTeam_Call) Run(run func(ctx context.Context, at *teams.AssignedTeam, orgID string, newName string)) *TeamRolesServiceMock_RenameTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*teams.AssignedTeam), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *TeamRolesServiceMock_RenameTeam_Call) Return(_a0 *teams.AssignedTeam, _a1 error) *TeamRolesServiceMock_RenameTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeamRolesServiceMock_RenameTeam_Call) RunAndReturn(run func(context.Context, *teams.AssignedTeam, string, string) (*teams.AssignedTeam, error)) *TeamRolesServiceMock_RenameTeam_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRoles provides a mock function with given fields: ctx, at, projectID, newRoles
func (_m *TeamRolesServiceMock) UpdateRoles(ctx context.Context, at *teams.AssignedTeam, projectID string, newRoles []v1.TeamRole) error {
	ret := _m.Called(ctx, at, projectID, newRoles)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *teams.AssignedTeam, string, []v1.TeamRole) error); ok {
		r0 = rf(ctx, at, projectID, newRoles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TeamRolesServiceMock_UpdateRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRoles'
type TeamRolesServiceMock_UpdateRoles_Call struct {
	*mock.Call
}

// UpdateRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - at *teams.AssignedTeam
//   - projectID string
//   - newRoles []v1.TeamRole
func (_e *TeamRolesServiceMock_Expecter) UpdateRoles(ctx interface{}, at interface{}, projectID interface{}, newRoles interface{}) *TeamRolesServiceMock_UpdateRoles_Call {
	return &TeamRolesServiceMock_UpdateRoles_Call{Call: _e.mock.On("UpdateRoles", ctx, at, projectID, newRoles)}
}

func (_c *TeamRolesServiceMock_UpdateRoles_Call) Run(run func(ctx context.Context, at *teams.AssignedTeam, projectID string, newRoles []v1.TeamRole)) *TeamRolesServiceMock_UpdateRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*teams.AssignedTeam), args[2].(string), args[3].([]v1.TeamRole))
	})
	return _c
}

func (_c *TeamRolesServiceMock_UpdateRoles_Call) Return(_a0 error) *TeamRolesServiceMock_UpdateRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamRolesServiceMock_UpdateRoles_Call) RunAndReturn(run func(context.Context, *teams.AssignedTeam, string, []v1.TeamRole) error) *TeamRolesServiceMock_UpdateRoles_Call {
	_c.Call.Return(run)
	return _c
}

// NewTeamRolesServiceMock creates a new instance of TeamRolesServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTeamRolesServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TeamRolesServiceMock {
	mock := &TeamRolesServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
