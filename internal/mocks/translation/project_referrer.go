// Code generated by mockery. DO NOT EDIT.

package translation

import (
	mock "github.com/stretchr/testify/mock"

	v1 "github.com/mongodb/mongodb-atlas-kubernetes/v2/api/v1"
)

// ProjectReferrerMock is an autogenerated mock type for the ProjectReferrer type
type ProjectReferrerMock struct {
	mock.Mock
}

type ProjectReferrerMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ProjectReferrerMock) EXPECT() *ProjectReferrerMock_Expecter {
	return &ProjectReferrerMock_Expecter{mock: &_m.Mock}
}

// ProjectDualRef provides a mock function with no fields
func (_m *ProjectReferrerMock) ProjectDualRef() *v1.ProjectDualReference {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProjectDualRef")
	}

	var r0 *v1.ProjectDualReference
	if rf, ok := ret.Get(0).(func() *v1.ProjectDualReference); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ProjectDualReference)
		}
	}

	return r0
}

// ProjectReferrerMock_ProjectDualRef_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectDualRef'
type ProjectReferrerMock_ProjectDualRef_Call struct {
	*mock.Call
}

// ProjectDualRef is a helper method to define mock.On call
func (_e *ProjectReferrerMock_Expecter) ProjectDualRef() *ProjectReferrerMock_ProjectDualRef_Call {
	return &ProjectReferrerMock_ProjectDualRef_Call{Call: _e.mock.On("ProjectDualRef")}
}

func (_c *ProjectReferrerMock_ProjectDualRef_Call) Run(run func()) *ProjectReferrerMock_ProjectDualRef_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProjectReferrerMock_ProjectDualRef_Call) Return(_a0 *v1.ProjectDualReference) *ProjectReferrerMock_ProjectDualRef_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProjectReferrerMock_ProjectDualRef_Call) RunAndReturn(run func() *v1.ProjectDualReference) *ProjectReferrerMock_ProjectDualRef_Call {
	_c.Call.Return(run)
	return _c
}

// NewProjectReferrerMock creates a new instance of ProjectReferrerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectReferrerMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectReferrerMock {
	mock := &ProjectReferrerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
