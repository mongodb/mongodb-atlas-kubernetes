// Code generated by mockery. DO NOT EDIT.

package translation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	teams "github.com/mongodb/mongodb-atlas-kubernetes/v2/internal/translation/teams"
)

// TeamProjectsServiceMock is an autogenerated mock type for the TeamProjectsService type
type TeamProjectsServiceMock struct {
	mock.Mock
}

type TeamProjectsServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TeamProjectsServiceMock) EXPECT() *TeamProjectsServiceMock_Expecter {
	return &TeamProjectsServiceMock_Expecter{mock: &_m.Mock}
}

// Assign provides a mock function with given fields: ctx, at, projectID
func (_m *TeamProjectsServiceMock) Assign(ctx context.Context, at *[]teams.AssignedTeam, projectID string) error {
	ret := _m.Called(ctx, at, projectID)

	if len(ret) == 0 {
		panic("no return value specified for Assign")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *[]teams.AssignedTeam, string) error); ok {
		r0 = rf(ctx, at, projectID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TeamProjectsServiceMock_Assign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Assign'
type TeamProjectsServiceMock_Assign_Call struct {
	*mock.Call
}

// Assign is a helper method to define mock.On call
//   - ctx context.Context
//   - at *[]teams.AssignedTeam
//   - projectID string
func (_e *TeamProjectsServiceMock_Expecter) Assign(ctx interface{}, at interface{}, projectID interface{}) *TeamProjectsServiceMock_Assign_Call {
	return &TeamProjectsServiceMock_Assign_Call{Call: _e.mock.On("Assign", ctx, at, projectID)}
}

func (_c *TeamProjectsServiceMock_Assign_Call) Run(run func(ctx context.Context, at *[]teams.AssignedTeam, projectID string)) *TeamProjectsServiceMock_Assign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*[]teams.AssignedTeam), args[2].(string))
	})
	return _c
}

func (_c *TeamProjectsServiceMock_Assign_Call) Return(_a0 error) *TeamProjectsServiceMock_Assign_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamProjectsServiceMock_Assign_Call) RunAndReturn(run func(context.Context, *[]teams.AssignedTeam, string) error) *TeamProjectsServiceMock_Assign_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, at, orgID
func (_m *TeamProjectsServiceMock) Create(ctx context.Context, at *teams.Team, orgID string) (*teams.Team, error) {
	ret := _m.Called(ctx, at, orgID)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *teams.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *teams.Team, string) (*teams.Team, error)); ok {
		return rf(ctx, at, orgID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *teams.Team, string) *teams.Team); ok {
		r0 = rf(ctx, at, orgID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*teams.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *teams.Team, string) error); ok {
		r1 = rf(ctx, at, orgID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamProjectsServiceMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TeamProjectsServiceMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - at *teams.Team
//   - orgID string
func (_e *TeamProjectsServiceMock_Expecter) Create(ctx interface{}, at interface{}, orgID interface{}) *TeamProjectsServiceMock_Create_Call {
	return &TeamProjectsServiceMock_Create_Call{Call: _e.mock.On("Create", ctx, at, orgID)}
}

func (_c *TeamProjectsServiceMock_Create_Call) Run(run func(ctx context.Context, at *teams.Team, orgID string)) *TeamProjectsServiceMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*teams.Team), args[2].(string))
	})
	return _c
}

func (_c *TeamProjectsServiceMock_Create_Call) Return(_a0 *teams.Team, _a1 error) *TeamProjectsServiceMock_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeamProjectsServiceMock_Create_Call) RunAndReturn(run func(context.Context, *teams.Team, string) (*teams.Team, error)) *TeamProjectsServiceMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// ListProjectTeams provides a mock function with given fields: ctx, projectID
func (_m *TeamProjectsServiceMock) ListProjectTeams(ctx context.Context, projectID string) ([]teams.AssignedTeam, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectTeams")
	}

	var r0 []teams.AssignedTeam
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]teams.AssignedTeam, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []teams.AssignedTeam); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]teams.AssignedTeam)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamProjectsServiceMock_ListProjectTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProjectTeams'
type TeamProjectsServiceMock_ListProjectTeams_Call struct {
	*mock.Call
}

// ListProjectTeams is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *TeamProjectsServiceMock_Expecter) ListProjectTeams(ctx interface{}, projectID interface{}) *TeamProjectsServiceMock_ListProjectTeams_Call {
	return &TeamProjectsServiceMock_ListProjectTeams_Call{Call: _e.mock.On("ListProjectTeams", ctx, projectID)}
}

func (_c *TeamProjectsServiceMock_ListProjectTeams_Call) Run(run func(ctx context.Context, projectID string)) *TeamProjectsServiceMock_ListProjectTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TeamProjectsServiceMock_ListProjectTeams_Call) Return(_a0 []teams.AssignedTeam, _a1 error) *TeamProjectsServiceMock_ListProjectTeams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TeamProjectsServiceMock_ListProjectTeams_Call) RunAndReturn(run func(context.Context, string) ([]teams.AssignedTeam, error)) *TeamProjectsServiceMock_ListProjectTeams_Call {
	_c.Call.Return(run)
	return _c
}

// Unassign provides a mock function with given fields: ctx, projectID, teamID
func (_m *TeamProjectsServiceMock) Unassign(ctx context.Context, projectID string, teamID string) error {
	ret := _m.Called(ctx, projectID, teamID)

	if len(ret) == 0 {
		panic("no return value specified for Unassign")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, teamID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TeamProjectsServiceMock_Unassign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unassign'
type TeamProjectsServiceMock_Unassign_Call struct {
	*mock.Call
}

// Unassign is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - teamID string
func (_e *TeamProjectsServiceMock_Expecter) Unassign(ctx interface{}, projectID interface{}, teamID interface{}) *TeamProjectsServiceMock_Unassign_Call {
	return &TeamProjectsServiceMock_Unassign_Call{Call: _e.mock.On("Unassign", ctx, projectID, teamID)}
}

func (_c *TeamProjectsServiceMock_Unassign_Call) Run(run func(ctx context.Context, projectID string, teamID string)) *TeamProjectsServiceMock_Unassign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TeamProjectsServiceMock_Unassign_Call) Return(_a0 error) *TeamProjectsServiceMock_Unassign_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TeamProjectsServiceMock_Unassign_Call) RunAndReturn(run func(context.Context, string, string) error) *TeamProjectsServiceMock_Unassign_Call {
	_c.Call.Return(run)
	return _c
}

// NewTeamProjectsServiceMock creates a new instance of TeamProjectsServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTeamProjectsServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TeamProjectsServiceMock {
	mock := &TeamProjectsServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
