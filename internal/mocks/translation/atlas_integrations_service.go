// Code generated by mockery. DO NOT EDIT.

package translation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	integrations "github.com/mongodb/mongodb-atlas-kubernetes/v2/internal/translation/integrations"
)

// AtlasIntegrationsServiceMock is an autogenerated mock type for the AtlasIntegrationsService type
type AtlasIntegrationsServiceMock struct {
	mock.Mock
}

type AtlasIntegrationsServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AtlasIntegrationsServiceMock) EXPECT() *AtlasIntegrationsServiceMock_Expecter {
	return &AtlasIntegrationsServiceMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, projectID, integrationType, integration, secrets
func (_m *AtlasIntegrationsServiceMock) Create(ctx context.Context, projectID string, integrationType string, integration integrations.Integration, secrets map[string]string) error {
	ret := _m.Called(ctx, projectID, integrationType, integration, secrets)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, integrations.Integration, map[string]string) error); ok {
		r0 = rf(ctx, projectID, integrationType, integration, secrets)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AtlasIntegrationsServiceMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type AtlasIntegrationsServiceMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - integrationType string
//   - integration integrations.Integration
//   - secrets map[string]string
func (_e *AtlasIntegrationsServiceMock_Expecter) Create(ctx interface{}, projectID interface{}, integrationType interface{}, integration interface{}, secrets interface{}) *AtlasIntegrationsServiceMock_Create_Call {
	return &AtlasIntegrationsServiceMock_Create_Call{Call: _e.mock.On("Create", ctx, projectID, integrationType, integration, secrets)}
}

func (_c *AtlasIntegrationsServiceMock_Create_Call) Run(run func(ctx context.Context, projectID string, integrationType string, integration integrations.Integration, secrets map[string]string)) *AtlasIntegrationsServiceMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(integrations.Integration), args[4].(map[string]string))
	})
	return _c
}

func (_c *AtlasIntegrationsServiceMock_Create_Call) Return(_a0 error) *AtlasIntegrationsServiceMock_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasIntegrationsServiceMock_Create_Call) RunAndReturn(run func(context.Context, string, string, integrations.Integration, map[string]string) error) *AtlasIntegrationsServiceMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, projectID, integrationType
func (_m *AtlasIntegrationsServiceMock) Delete(ctx context.Context, projectID string, integrationType string) error {
	ret := _m.Called(ctx, projectID, integrationType)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, integrationType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AtlasIntegrationsServiceMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type AtlasIntegrationsServiceMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - integrationType string
func (_e *AtlasIntegrationsServiceMock_Expecter) Delete(ctx interface{}, projectID interface{}, integrationType interface{}) *AtlasIntegrationsServiceMock_Delete_Call {
	return &AtlasIntegrationsServiceMock_Delete_Call{Call: _e.mock.On("Delete", ctx, projectID, integrationType)}
}

func (_c *AtlasIntegrationsServiceMock_Delete_Call) Run(run func(ctx context.Context, projectID string, integrationType string)) *AtlasIntegrationsServiceMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AtlasIntegrationsServiceMock_Delete_Call) Return(_a0 error) *AtlasIntegrationsServiceMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasIntegrationsServiceMock_Delete_Call) RunAndReturn(run func(context.Context, string, string) error) *AtlasIntegrationsServiceMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, projectID, integrationType
func (_m *AtlasIntegrationsServiceMock) Get(ctx context.Context, projectID string, integrationType string) (*integrations.Integration, error) {
	ret := _m.Called(ctx, projectID, integrationType)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *integrations.Integration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*integrations.Integration, error)); ok {
		return rf(ctx, projectID, integrationType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *integrations.Integration); ok {
		r0 = rf(ctx, projectID, integrationType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*integrations.Integration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, integrationType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AtlasIntegrationsServiceMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type AtlasIntegrationsServiceMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - integrationType string
func (_e *AtlasIntegrationsServiceMock_Expecter) Get(ctx interface{}, projectID interface{}, integrationType interface{}) *AtlasIntegrationsServiceMock_Get_Call {
	return &AtlasIntegrationsServiceMock_Get_Call{Call: _e.mock.On("Get", ctx, projectID, integrationType)}
}

func (_c *AtlasIntegrationsServiceMock_Get_Call) Run(run func(ctx context.Context, projectID string, integrationType string)) *AtlasIntegrationsServiceMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AtlasIntegrationsServiceMock_Get_Call) Return(_a0 *integrations.Integration, _a1 error) *AtlasIntegrationsServiceMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AtlasIntegrationsServiceMock_Get_Call) RunAndReturn(run func(context.Context, string, string) (*integrations.Integration, error)) *AtlasIntegrationsServiceMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, projectID
func (_m *AtlasIntegrationsServiceMock) List(ctx context.Context, projectID string) ([]integrations.Integration, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []integrations.Integration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]integrations.Integration, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []integrations.Integration); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]integrations.Integration)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AtlasIntegrationsServiceMock_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type AtlasIntegrationsServiceMock_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *AtlasIntegrationsServiceMock_Expecter) List(ctx interface{}, projectID interface{}) *AtlasIntegrationsServiceMock_List_Call {
	return &AtlasIntegrationsServiceMock_List_Call{Call: _e.mock.On("List", ctx, projectID)}
}

func (_c *AtlasIntegrationsServiceMock_List_Call) Run(run func(ctx context.Context, projectID string)) *AtlasIntegrationsServiceMock_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AtlasIntegrationsServiceMock_List_Call) Return(_a0 []integrations.Integration, _a1 error) *AtlasIntegrationsServiceMock_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AtlasIntegrationsServiceMock_List_Call) RunAndReturn(run func(context.Context, string) ([]integrations.Integration, error)) *AtlasIntegrationsServiceMock_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, projectID, integrationType, integration, secrets
func (_m *AtlasIntegrationsServiceMock) Update(ctx context.Context, projectID string, integrationType string, integration integrations.Integration, secrets map[string]string) error {
	ret := _m.Called(ctx, projectID, integrationType, integration, secrets)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, integrations.Integration, map[string]string) error); ok {
		r0 = rf(ctx, projectID, integrationType, integration, secrets)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AtlasIntegrationsServiceMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type AtlasIntegrationsServiceMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - integrationType string
//   - integration integrations.Integration
//   - secrets map[string]string
func (_e *AtlasIntegrationsServiceMock_Expecter) Update(ctx interface{}, projectID interface{}, integrationType interface{}, integration interface{}, secrets interface{}) *AtlasIntegrationsServiceMock_Update_Call {
	return &AtlasIntegrationsServiceMock_Update_Call{Call: _e.mock.On("Update", ctx, projectID, integrationType, integration, secrets)}
}

func (_c *AtlasIntegrationsServiceMock_Update_Call) Run(run func(ctx context.Context, projectID string, integrationType string, integration integrations.Integration, secrets map[string]string)) *AtlasIntegrationsServiceMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(integrations.Integration), args[4].(map[string]string))
	})
	return _c
}

func (_c *AtlasIntegrationsServiceMock_Update_Call) Return(_a0 error) *AtlasIntegrationsServiceMock_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AtlasIntegrationsServiceMock_Update_Call) RunAndReturn(run func(context.Context, string, string, integrations.Integration, map[string]string) error) *AtlasIntegrationsServiceMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewAtlasIntegrationsServiceMock creates a new instance of AtlasIntegrationsServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAtlasIntegrationsServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AtlasIntegrationsServiceMock {
	mock := &AtlasIntegrationsServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
