// Code generated by mockery. DO NOT EDIT.

package translation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	datafederation "github.com/mongodb/mongodb-atlas-kubernetes/v2/internal/translation/datafederation"
)

// DataFederationServiceMock is an autogenerated mock type for the DataFederationService type
type DataFederationServiceMock struct {
	mock.Mock
}

type DataFederationServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *DataFederationServiceMock) EXPECT() *DataFederationServiceMock_Expecter {
	return &DataFederationServiceMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, df
func (_m *DataFederationServiceMock) Create(ctx context.Context, df *datafederation.DataFederation) error {
	ret := _m.Called(ctx, df)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *datafederation.DataFederation) error); ok {
		r0 = rf(ctx, df)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataFederationServiceMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type DataFederationServiceMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - df *datafederation.DataFederation
func (_e *DataFederationServiceMock_Expecter) Create(ctx interface{}, df interface{}) *DataFederationServiceMock_Create_Call {
	return &DataFederationServiceMock_Create_Call{Call: _e.mock.On("Create", ctx, df)}
}

func (_c *DataFederationServiceMock_Create_Call) Run(run func(ctx context.Context, df *datafederation.DataFederation)) *DataFederationServiceMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*datafederation.DataFederation))
	})
	return _c
}

func (_c *DataFederationServiceMock_Create_Call) Return(_a0 error) *DataFederationServiceMock_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationServiceMock_Create_Call) RunAndReturn(run func(context.Context, *datafederation.DataFederation) error) *DataFederationServiceMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, projectID, name
func (_m *DataFederationServiceMock) Delete(ctx context.Context, projectID string, name string) error {
	ret := _m.Called(ctx, projectID, name)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataFederationServiceMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type DataFederationServiceMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - name string
func (_e *DataFederationServiceMock_Expecter) Delete(ctx interface{}, projectID interface{}, name interface{}) *DataFederationServiceMock_Delete_Call {
	return &DataFederationServiceMock_Delete_Call{Call: _e.mock.On("Delete", ctx, projectID, name)}
}

func (_c *DataFederationServiceMock_Delete_Call) Run(run func(ctx context.Context, projectID string, name string)) *DataFederationServiceMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataFederationServiceMock_Delete_Call) Return(_a0 error) *DataFederationServiceMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationServiceMock_Delete_Call) RunAndReturn(run func(context.Context, string, string) error) *DataFederationServiceMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, projectID, name
func (_m *DataFederationServiceMock) Get(ctx context.Context, projectID string, name string) (*datafederation.DataFederation, error) {
	ret := _m.Called(ctx, projectID, name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *datafederation.DataFederation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*datafederation.DataFederation, error)); ok {
		return rf(ctx, projectID, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *datafederation.DataFederation); ok {
		r0 = rf(ctx, projectID, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datafederation.DataFederation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataFederationServiceMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type DataFederationServiceMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - name string
func (_e *DataFederationServiceMock_Expecter) Get(ctx interface{}, projectID interface{}, name interface{}) *DataFederationServiceMock_Get_Call {
	return &DataFederationServiceMock_Get_Call{Call: _e.mock.On("Get", ctx, projectID, name)}
}

func (_c *DataFederationServiceMock_Get_Call) Run(run func(ctx context.Context, projectID string, name string)) *DataFederationServiceMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DataFederationServiceMock_Get_Call) Return(_a0 *datafederation.DataFederation, _a1 error) *DataFederationServiceMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataFederationServiceMock_Get_Call) RunAndReturn(run func(context.Context, string, string) (*datafederation.DataFederation, error)) *DataFederationServiceMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, df
func (_m *DataFederationServiceMock) Update(ctx context.Context, df *datafederation.DataFederation) error {
	ret := _m.Called(ctx, df)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *datafederation.DataFederation) error); ok {
		r0 = rf(ctx, df)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataFederationServiceMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type DataFederationServiceMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - df *datafederation.DataFederation
func (_e *DataFederationServiceMock_Expecter) Update(ctx interface{}, df interface{}) *DataFederationServiceMock_Update_Call {
	return &DataFederationServiceMock_Update_Call{Call: _e.mock.On("Update", ctx, df)}
}

func (_c *DataFederationServiceMock_Update_Call) Run(run func(ctx context.Context, df *datafederation.DataFederation)) *DataFederationServiceMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*datafederation.DataFederation))
	})
	return _c
}

func (_c *DataFederationServiceMock_Update_Call) Return(_a0 error) *DataFederationServiceMock_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataFederationServiceMock_Update_Call) RunAndReturn(run func(context.Context, *datafederation.DataFederation) error) *DataFederationServiceMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewDataFederationServiceMock creates a new instance of DataFederationServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDataFederationServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *DataFederationServiceMock {
	mock := &DataFederationServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
