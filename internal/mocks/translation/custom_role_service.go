// Code generated by mockery. DO NOT EDIT.

package translation

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	customroles "github.com/mongodb/mongodb-atlas-kubernetes/v2/internal/translation/customroles"
)

// CustomRoleServiceMock is an autogenerated mock type for the CustomRoleService type
type CustomRoleServiceMock struct {
	mock.Mock
}

type CustomRoleServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CustomRoleServiceMock) EXPECT() *CustomRoleServiceMock_Expecter {
	return &CustomRoleServiceMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, projectID, role
func (_m *CustomRoleServiceMock) Create(ctx context.Context, projectID string, role customroles.CustomRole) error {
	ret := _m.Called(ctx, projectID, role)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, customroles.CustomRole) error); ok {
		r0 = rf(ctx, projectID, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomRoleServiceMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CustomRoleServiceMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - role customroles.CustomRole
func (_e *CustomRoleServiceMock_Expecter) Create(ctx interface{}, projectID interface{}, role interface{}) *CustomRoleServiceMock_Create_Call {
	return &CustomRoleServiceMock_Create_Call{Call: _e.mock.On("Create", ctx, projectID, role)}
}

func (_c *CustomRoleServiceMock_Create_Call) Run(run func(ctx context.Context, projectID string, role customroles.CustomRole)) *CustomRoleServiceMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(customroles.CustomRole))
	})
	return _c
}

func (_c *CustomRoleServiceMock_Create_Call) Return(_a0 error) *CustomRoleServiceMock_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CustomRoleServiceMock_Create_Call) RunAndReturn(run func(context.Context, string, customroles.CustomRole) error) *CustomRoleServiceMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, projectID, roleName
func (_m *CustomRoleServiceMock) Delete(ctx context.Context, projectID string, roleName string) error {
	ret := _m.Called(ctx, projectID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, projectID, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomRoleServiceMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type CustomRoleServiceMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - roleName string
func (_e *CustomRoleServiceMock_Expecter) Delete(ctx interface{}, projectID interface{}, roleName interface{}) *CustomRoleServiceMock_Delete_Call {
	return &CustomRoleServiceMock_Delete_Call{Call: _e.mock.On("Delete", ctx, projectID, roleName)}
}

func (_c *CustomRoleServiceMock_Delete_Call) Run(run func(ctx context.Context, projectID string, roleName string)) *CustomRoleServiceMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CustomRoleServiceMock_Delete_Call) Return(_a0 error) *CustomRoleServiceMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CustomRoleServiceMock_Delete_Call) RunAndReturn(run func(context.Context, string, string) error) *CustomRoleServiceMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, projectID, roleName
func (_m *CustomRoleServiceMock) Get(ctx context.Context, projectID string, roleName string) (customroles.CustomRole, error) {
	ret := _m.Called(ctx, projectID, roleName)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 customroles.CustomRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (customroles.CustomRole, error)); ok {
		return rf(ctx, projectID, roleName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) customroles.CustomRole); ok {
		r0 = rf(ctx, projectID, roleName)
	} else {
		r0 = ret.Get(0).(customroles.CustomRole)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomRoleServiceMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CustomRoleServiceMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - roleName string
func (_e *CustomRoleServiceMock_Expecter) Get(ctx interface{}, projectID interface{}, roleName interface{}) *CustomRoleServiceMock_Get_Call {
	return &CustomRoleServiceMock_Get_Call{Call: _e.mock.On("Get", ctx, projectID, roleName)}
}

func (_c *CustomRoleServiceMock_Get_Call) Run(run func(ctx context.Context, projectID string, roleName string)) *CustomRoleServiceMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CustomRoleServiceMock_Get_Call) Return(_a0 customroles.CustomRole, _a1 error) *CustomRoleServiceMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomRoleServiceMock_Get_Call) RunAndReturn(run func(context.Context, string, string) (customroles.CustomRole, error)) *CustomRoleServiceMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, projectID
func (_m *CustomRoleServiceMock) List(ctx context.Context, projectID string) ([]customroles.CustomRole, error) {
	ret := _m.Called(ctx, projectID)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []customroles.CustomRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]customroles.CustomRole, error)); ok {
		return rf(ctx, projectID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []customroles.CustomRole); ok {
		r0 = rf(ctx, projectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]customroles.CustomRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, projectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomRoleServiceMock_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type CustomRoleServiceMock_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
func (_e *CustomRoleServiceMock_Expecter) List(ctx interface{}, projectID interface{}) *CustomRoleServiceMock_List_Call {
	return &CustomRoleServiceMock_List_Call{Call: _e.mock.On("List", ctx, projectID)}
}

func (_c *CustomRoleServiceMock_List_Call) Run(run func(ctx context.Context, projectID string)) *CustomRoleServiceMock_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CustomRoleServiceMock_List_Call) Return(_a0 []customroles.CustomRole, _a1 error) *CustomRoleServiceMock_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomRoleServiceMock_List_Call) RunAndReturn(run func(context.Context, string) ([]customroles.CustomRole, error)) *CustomRoleServiceMock_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, projectID, roleName, role
func (_m *CustomRoleServiceMock) Update(ctx context.Context, projectID string, roleName string, role customroles.CustomRole) error {
	ret := _m.Called(ctx, projectID, roleName, role)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, customroles.CustomRole) error); ok {
		r0 = rf(ctx, projectID, roleName, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomRoleServiceMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type CustomRoleServiceMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - roleName string
//   - role customroles.CustomRole
func (_e *CustomRoleServiceMock_Expecter) Update(ctx interface{}, projectID interface{}, roleName interface{}, role interface{}) *CustomRoleServiceMock_Update_Call {
	return &CustomRoleServiceMock_Update_Call{Call: _e.mock.On("Update", ctx, projectID, roleName, role)}
}

func (_c *CustomRoleServiceMock_Update_Call) Run(run func(ctx context.Context, projectID string, roleName string, role customroles.CustomRole)) *CustomRoleServiceMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(customroles.CustomRole))
	})
	return _c
}

func (_c *CustomRoleServiceMock_Update_Call) Return(_a0 error) *CustomRoleServiceMock_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CustomRoleServiceMock_Update_Call) RunAndReturn(run func(context.Context, string, string, customroles.CustomRole) error) *CustomRoleServiceMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewCustomRoleServiceMock creates a new instance of CustomRoleServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomRoleServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomRoleServiceMock {
	mock := &CustomRoleServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
