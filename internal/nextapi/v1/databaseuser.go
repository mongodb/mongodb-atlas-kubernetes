// Code generated by crd2go. DO NOT EDIT.

package v1

import (
	k8s "github.com/mongodb/mongodb-atlas-kubernetes/tools/crd2go/k8s"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

func init() {
	SchemeBuilder.Register(&DatabaseUser{})
	SchemeBuilder.Register(&DatabaseUserList{})
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

type DatabaseUser struct {
	metav1.TypeMeta `json:",inline"`

	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec DatabaseUserSpec `json:"spec,omitempty"`

	Status DatabaseUserStatus `json:"status,omitempty"`
}

type DatabaseUserSpec struct {
	// V20250312 The spec of the databaseuser resource for version v20250312.
	V20250312 *DatabaseUserSpecV20250312 `json:"v20250312,omitempty"`
}

type DatabaseUserSpecV20250312 struct {
	// Entry The entry fields of the databaseuser resource spec. These fields can be
	// set for creating and updating databaseusers.
	Entry *DatabaseUserSpecV20250312Entry `json:"entry,omitempty"`

	/*
	   GroupId Unique 24-hexadecimal digit string that identifies your project. Use the [/groups](#tag/Projects/operation/listProjects) endpoint to retrieve all projects to which the authenticated user has access.

	   **NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group/project id remains the same. The resource and corresponding endpoints use the term groups.
	*/
	GroupId *string `json:"groupId,omitempty"`

	/*
	   GroupRef A reference to a "Group" resource.
	   The value of "$.status.v20250312.id" will be used to set "groupId".
	   Mutually exclusive with the "groupId" property.
	*/
	GroupRef *k8s.LocalReference `json:"groupRef,omitempty"`
}

type DatabaseUserSpecV20250312Entry struct {
	// AwsIAMType Human-readable label that indicates whether the new database user
	// authenticates with the Amazon Web Services (AWS) Identity and Access Management
	// (IAM) credentials associated with the user or the user's role.
	AwsIAMType *string `json:"awsIAMType,omitempty"`

	// DatabaseName The database against which the database user authenticates.
	// Database users must provide both a username and authentication database to log
	// into MongoDB. If the user authenticates with AWS IAM, x.509, LDAP, or OIDC
	// Workload this value should be `$external`. If the user authenticates with
	// SCRAM-SHA or OIDC Workforce, this value should be `admin`.
	DatabaseName string `json:"databaseName"`

	// DeleteAfterDate Date and time when MongoDB Cloud deletes the user. This
	// parameter expresses its value in the ISO 8601 timestamp format in UTC and can
	// include the time zone designation. You must specify a future date that falls
	// within one week of making the Application Programming Interface (API) request.
	DeleteAfterDate *string `json:"deleteAfterDate,omitempty"`

	// Description Description of this database user.
	Description *string `json:"description,omitempty"`

	// GroupId Unique 24-hexadecimal digit string that identifies the project.
	GroupId string `json:"groupId"`

	// Labels List that contains the key-value pairs for tagging and categorizing the
	// MongoDB database user. The labels that you define do not appear in the console.
	Labels *[]Tags `json:"labels,omitempty"`

	// LdapAuthType Part of the Lightweight Directory Access Protocol (LDAP) record
	// that the database uses to authenticate this database user on the LDAP host.
	LdapAuthType *string `json:"ldapAuthType,omitempty"`

	// OidcAuthType Human-readable label that indicates whether the new database user
	// or group authenticates with OIDC federated authentication. To create a federated
	// authentication user, specify the value of USER in this field. To create a
	// federated authentication group, specify the value of IDP_GROUP in this field.
	OidcAuthType *string `json:"oidcAuthType,omitempty"`

	// Password Alphanumeric string that authenticates this database user against the
	// database specified in `databaseName`. To authenticate with SCRAM-SHA, you must
	// specify this parameter. This parameter doesn't appear in this response.
	Password *string `json:"password,omitempty"`

	// Roles List that provides the pairings of one role with one applicable database.
	Roles *[]Roles `json:"roles,omitempty"`

	// Scopes List that contains clusters, MongoDB Atlas Data Lakes, and MongoDB Atlas
	// Streams Instances that this database user can access. If omitted, MongoDB Cloud
	// grants the database user access to all the clusters, MongoDB Atlas Data Lakes,
	// and MongoDB Atlas Streams Instances in the project.
	Scopes *[]Scopes `json:"scopes,omitempty"`

	/*
	   Username Human-readable label that represents the user that authenticates to MongoDB. The format of this label depends on the method of authentication:

	   | Authentication Method | Parameter Needed | Parameter Value | username Format |
	   |---|---|---|---|
	   | AWS IAM | awsIAMType | ROLE | <abbr title="Amazon Resource Name">ARN</abbr> |
	   | AWS IAM | awsIAMType | USER | <abbr title="Amazon Resource Name">ARN</abbr> |
	   | x.509 | x509Type | CUSTOMER | [RFC 2253](https://tools.ietf.org/html/2253) Distinguished Name |
	   | x.509 | x509Type | MANAGED | [RFC 2253](https://tools.ietf.org/html/2253) Distinguished Name |
	   | LDAP | ldapAuthType | USER | [RFC 2253](https://tools.ietf.org/html/2253) Distinguished Name |
	   | LDAP | ldapAuthType | GROUP | [RFC 2253](https://tools.ietf.org/html/2253) Distinguished Name |
	   | OIDC Workforce | oidcAuthType | IDP_GROUP | Atlas OIDC IdP ID (found in federation settings), followed by a '/', followed by the IdP group name |
	   | OIDC Workload | oidcAuthType | USER | Atlas OIDC IdP ID (found in federation settings), followed by a '/', followed by the IdP user name |
	   | SCRAM-SHA | awsIAMType, x509Type, ldapAuthType, oidcAuthType | NONE | Alphanumeric string |
	*/
	Username string `json:"username"`

	/*
	   X509Type X.509 method that MongoDB Cloud uses to authenticate the database user.

	   - For application-managed X.509, specify `MANAGED`.
	   - For self-managed X.509, specify `CUSTOMER`.

	   Users created with the `CUSTOMER` method require a Common Name (CN) in the **username** parameter. You must create externally authenticated users on the `$external` database.
	*/
	X509Type *string `json:"x509Type,omitempty"`
}

type Roles struct {
	// CollectionName Collection on which this role applies.
	CollectionName *string `json:"collectionName,omitempty"`

	// DatabaseName Database to which the user is granted access privileges.
	DatabaseName string `json:"databaseName"`

	// RoleName Human-readable label that identifies a group of privileges assigned to
	// a database user. This value can either be a built-in role or a custom role.
	RoleName string `json:"roleName"`
}

type Scopes struct {
	// Name Human-readable label that identifies the cluster or MongoDB Atlas Data Lake
	// that this database user can access.
	Name string `json:"name"`

	// Type Category of resource that this database user can access.
	Type string `json:"type"`
}

type DatabaseUserStatus struct {
	// Conditions Represents the latest available observations of a resource's current
	// state.
	Conditions *[]metav1.Condition `json:"conditions,omitempty"`
}

// +kubebuilder:object:root=true
type DatabaseUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DatabaseUser `json:"items"`
}
